SET DEFINE OFF;
CREATE OR REPLACE PROCEDURE "CF0078" (
   PV_REFCURSOR   IN OUT   PKG_REPORT.REF_CURSOR,
   OPT            IN       VARCHAR2,
   PV_BRID           IN       VARCHAR2,
   TLGOUPS        IN       VARCHAR2,
   TLSCOPE        IN       VARCHAR2,
   F_DATE         IN       VARCHAR2,
   T_DATE         IN       VARCHAR2,
   PV_CUSTODYCD   IN       VARCHAR2,
   MAKER          IN       VARCHAR2,
   CHECKER        IN       VARCHAR2,
   I_BRIDGD       IN       VARCHAR2

)
IS
--
-- PURPOSE: BRIEFLY EXPLAIN THE FUNCTIONALITY OF THE PROCEDURE
--
-- MODIFICATION HISTORY
-- PERSON      DATE    COMMENTS
-- NGOCVTT               CREATED
-- ---------   ------  -------------------------------------------
   V_STROPTION        VARCHAR2 (5);       -- A: ALL; B: BRANCH; S: SUB-BRANCH
   V_STRBRID          VARCHAR2 (4);              -- USED WHEN V_NUMOPTION > 0


   V_STRCUSTODYCD  VARCHAR2 (10);
   V_STRMAKER   VARCHAR2 (4);
   V_STRCHECKER  VARCHAR2 (4);
   V_I_BRID  VARCHAR2 (10);

-- DECLARE PROGRAM VARIABLES AS SHOWN ABOVE
BEGIN
   V_STROPTION := OPT;

   IF (V_STROPTION <> 'A') AND (PV_BRID <> 'ALL')
   THEN
      V_STRBRID := PV_BRID;
   ELSE
      V_STRBRID := '%%';
   END IF;

   -- GET REPORT'S PARAMETERS

  IF (I_BRIDGD  <> 'ALL')
   THEN
      V_I_BRID  := I_BRIDGD;
   ELSE
      V_I_BRID := '%%';
   END IF;

     IF (MAKER  <> 'ALL')
   THEN
      V_STRMAKER  := MAKER;
   ELSE
      V_STRMAKER := '%%';
   END IF;


  IF (CHECKER  <> 'ALL')
   THEN
      V_STRCHECKER  := CHECKER;
   ELSE
      V_STRCHECKER := '%%';
   END IF;


  IF (PV_CUSTODYCD  <> 'ALL')
   THEN
      V_STRCUSTODYCD  := PV_CUSTODYCD;
   ELSE
      V_STRCUSTODYCD := '%%';
   END IF;

   -- END OF GETTING REPORT'S PARAMETERS
   -- GET REPORT'S DATA

      OPEN PV_REFCURSOR
       FOR

    SELECT CF.*, NVL(RE.REFULLNAME,'') MG_CHINH, NVL(RE.REFULLNAMEFT,'') MG_PHU
    FROM (
        SELECT CF.CUSTID, CF.CUSTODYCD, NVL(CF.TRADINGCODE,'') TRADINGCODE,CF.FULLNAME,
              BR.BRNAME, TL.TXDATE, NVL(TL1.TLNAME,'') MAKE, NVL(TL2.TLNAME,'') DUYET,
              CFT1.TYPENAME OLD, CFT2.TYPENAME NEW,CF.BRID
         FROM (SELECT * FROM CFMAST WHERE FNC_VALIDATE_SCOPE(BRID, CAREBY, TLSCOPE, PV_BRID, TLGOUPS)=0) CF,
              BRGRP BR, TLPROFILES TL1, TLPROFILES TL2,CHANGECFTYPE_LOG TL,CFTYPE CFT1, CFTYPE CFT2

         WHERE CF.CUSTID=TL.CUSTID
         AND CF.BRID=BR.BRID(+)
         AND TL.MAKERID=TL1.TLID(+)
         AND TL.CHECKERID=TL2.TLID(+)
         AND TL.DELTD<>'Y'
         AND TL.OLDACTYPE=CFT1.ACTYPE
         AND TL.NEWACTYPE=CFT2.ACTYPE
         AND NVL(TL.MAKERID,'A') LIKE V_STRMAKER
         AND NVL(TL.CHECKERID,'A') LIKE V_STRCHECKER
         AND CF.CUSTODYCD LIKE V_STRCUSTODYCD
         AND CF.BRID LIKE V_I_BRID
         AND TL.TXDATE BETWEEN TO_DATE(F_DATE,'DD/MM/YYYY') AND TO_DATE(T_DATE,'DD/MM/YYYY')) CF
     LEFT JOIN
       (SELECT max(case when TYP.REROLE = 'CS' then CFRE.FULLNAME else '' end) REFULLNAME,
                    max(case when TYP.REROLE = 'DG' then CFRE.FULLNAME else '' end) REFULLNAMEFT,
                    LNK.AFACCTNO ACCTNO
                FROM REAFLNK LNK, REMAST RE, RETYPE TYP, CFMAST CFRE
                WHERE LNK.deltd <> 'Y' AND TYP.REROLE in ('CS','DG')
                    AND RE.ACTYPE=TYP.ACTYPE AND RE.CUSTID=CFRE.CUSTID AND RE.ACCTNO=LNK.REACCTNO
                group by LNK.AFACCTNO) RE   ON RE.ACCTNO=CF.CUSTID
 ORDER BY CF.CUSTID;



 EXCEPTION
   WHEN OTHERS
   THEN
      RETURN;
END;

 
 
 
 
/
