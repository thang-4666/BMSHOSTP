SET DEFINE OFF;
CREATE OR REPLACE PACKAGE txpks_batch
/*----------------------------------------------------------------------------------------------------
     ** Module   : COMMODITY SYSTEM
     ** and is copyrighted by FSS.
     **
     **    All rights reserved.  No part of this work may be reproduced, stored in a retrieval system,
     **    adopted or transmitted in any form or by any means, electronic, mechanical, photographic,
     **    graphic, optic recording or otherwise, translated in any language or computer language,
     **    without the prior written permission of Financial Software Solutions. JSC.
     **

     **  MODIFICATION HISTORY
     **  Person      Date           Comments
     **  Fsser      09-JUNE-2009   dbms_output.put_line(''); Created
     ** (c) 2008 by Financial Software Solutions. JSC.
     ----------------------------------------------------------------------------------------------------*/
 IS

  PROCEDURE PR_SIMPLETRADINGFEECALCULATE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_ORDERCLEANUP(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_ORDERFINISH(P_ERR_CODE OUT VARCHAR2);
  FUNCTION FN_SETTLEMENTORDER(P_TXMSG    IN TX.MSG_RECTYPE,
                              P_ERR_CODE OUT VARCHAR2) RETURN NUMBER;
  PROCEDURE PR_ORDERBACKUP(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SIMPLECREDITINTERESTACCURE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SIMPLEOVDTINTERESTACCURE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_T2OVERDRAFTINTERESTACCURE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_T0OVERDRAFTCALCULATE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNNORMALINTERESTACCRUE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNCALMATURITYPRINCIPAL(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNCLEANSCHEDULE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNOPENLOANACCOUNT(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNACCRUEINTEREST(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNMOVEINTTOOVERDUE(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2);
  FUNCTION FN_ADJUSTPAYMENTSCHEDULE(P_TXMSG    IN TX.MSG_RECTYPE,
                                    P_ERR_CODE OUT VARCHAR2) RETURN NUMBER;
  PROCEDURE PR_LNMOVEPRINTOOVERDUE(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNAUTODRAWNDOWN(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_AUTOBLOCKADEACCOUNT(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2);
  FUNCTION FN_DRAWNDOWNPROCESS(P_TXMSG    IN TX.MSG_RECTYPE,
                               P_ERR_CODE OUT VARCHAR2) RETURN NUMBER;
  PROCEDURE PR_LNAUTOPAYMENT(P_BCHMDL   VARCHAR,
                             P_DUEPAID  VARCHAR2,
                             P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_LNADVPAYMENT(P_BCHMDL   VARCHAR,
                            P_DUEPAID  VARCHAR2,
                            P_ERR_CODE OUT VARCHAR2);
  PROCEDURE pr_LNPayment4TA0(P_BCHMDL   VARCHAR,
                            P_DUEPAID  VARCHAR2,
                            P_ERR_CODE OUT VARCHAR2);
 FUNCTION FN_LOANPAYMENTSCHEDULEALLOCATE(P_TXMSG    IN TX.MSG_RECTYPE,
                                          P_ERR_CODE OUT VARCHAR2)
    RETURN NUMBER;
  PROCEDURE PR_CIEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_LNEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTRECEIVEMONEY(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2);
PROCEDURE pr_ODSltReceiveMoney_temp(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTRECEIVESEC(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2);
 PROCEDURE PR_ODSETTLEMENTRECEIVESEC_TEMP(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTTRANSFERMONEY(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2,
                                         P_FROMROW  NUMBER,
                                         P_TOROW    NUMBER,
                                         P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTTRANSFERSEC(P_BCHMDL   VARCHAR,
                                       P_ERR_CODE OUT VARCHAR2,
                                       P_FROMROW  NUMBER,
                                       P_TOROW    NUMBER,
                                       P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TRANSFERBUYFEE(P_BCHMDL   VARCHAR,
                              P_ERR_CODE OUT VARCHAR2,
                              P_FROMROW  NUMBER,
                              P_TOROW    NUMBER,
                              P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TRANSFERSELLFEE(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TRANSFERSELLFEE_TEMP(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_DFEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_DFDEALFEEACCRUE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DFDEALDRAWNDOWN(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_DFCLEANDEAL(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DFPAYMENT(P_BCHMDL   VARCHAR,
                         P_ERR_CODE OUT VARCHAR2,
                         P_FROMROW  NUMBER,
                         P_TOROW    NUMBER,
                         P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODDAYRELEASEADVANCED(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODDAYRELEASEADVANCED_TEMP(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODRELEASEBLOCKADVANCED(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_DEALRECEIVE(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DEALRECEIVE_TEMP(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DFDEALTRANSFERSEC(P_BCHMDL   VARCHAR,
                                 P_ERR_CODE OUT VARCHAR2,
                                 P_FROMROW  NUMBER,
                                 P_TOROW    NUMBER,
                                 P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_SECOSTPRICECALCULATE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SEEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CIAUTOADVANCE(P_BCHMDL   VARCHAR,
                             P_ERR_CODE OUT VARCHAR2,
                             P_FROMROW  NUMBER,
                             P_TOROW    NUMBER,
                             P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_SAEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_SABACKUPDATA(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SACHANGEWORKINGDATE(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DFDUEAUTOPAYMENT(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODDEALALLOCATE(P_BCHMDL   VARCHAR,
                              P_ERR_CODE OUT VARCHAR2,
                              P_FROMROW  NUMBER,
                              P_TOROW    NUMBER,
                              P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODEXTENTIONACCOUNT(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DFAUTOADVTOPAYMENT(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_CFEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CFPAIDSELLVAT(P_BCHMDL   VARCHAR,
                             P_ERR_CODE OUT VARCHAR2,
                             P_FROMROW  NUMBER,
                             P_TOROW    NUMBER,
                             P_LASTRUN  OUT VARCHAR2);
 PROCEDURE PR_CFPAIDSELLVAT_TEMP(P_BCHMDL   VARCHAR,
                             P_ERR_CODE OUT VARCHAR2,
                             P_FROMROW  NUMBER,
                             P_TOROW    NUMBER,
                             P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CFDAYTRADINGFEECAL(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2,
                                  P_FROMROW  NUMBER,
                                  P_TOROW    NUMBER,
                                  P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_AUTOCLOSEAFMAST(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2);

  PROCEDURE PR_CIDEBTAUTOPAYMENT(P_BCHMDL   VARCHAR,
                                 P_ERR_CODE OUT VARCHAR2,
                                 P_FROMROW  NUMBER,
                                 P_TOROW    NUMBER,
                                 P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_SAGENERALWORKING(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_BATCH(P_APPTYPE  VARCHAR2,
                     P_BCHMDL   VARCHAR,
                     P_ERR_CODE OUT VARCHAR2,
                     P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_BATCHLOG_DOING(
    p_ACTION    IN varchar2,
    p_CMDID     IN varchar2,
    p_IPADDRESS IN varchar2,
    p_BUSDATE   IN varchar2,
    p_TELLERID  IN varchar2,
    p_USERRUN   IN varchar2,
    p_ISAUTO   IN varchar2,
    P_ERR_CODE  OUT VARCHAR2);
  PROCEDURE PR_CICALCFEEDEPOSITSECURITIES(P_BCHMDL   VARCHAR,
                                          P_ERR_CODE OUT VARCHAR2,
                                          P_FROMROW  NUMBER,
                                          P_TOROW    NUMBER,
                                          P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CICALCFEEDEPOSIT(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CICALCFEEDEPOSITBOND(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CIPAYFEEDEPOSITSEBO(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2,
                                   P_FROMROW  NUMBER,
                                   P_TOROW    NUMBER,
                                   P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CIPAYFEEDEPOSITDEBIT(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CALCFEEONODTYPE(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CALCFEEONODTYPECOREBANK(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_CAEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_CAWATINGFORTRADE(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TDEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TDEOTD(P_BCHMDL   VARCHAR,
                      P_ERR_CODE OUT VARCHAR2,
                      P_FROMROW  NUMBER,
                      P_TOROW    NUMBER,
                      P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TDEOTD_BANK(P_BCHMDL   VARCHAR,
                           P_ERR_CODE OUT VARCHAR2,
                           P_FROMROW  NUMBER,
                           P_TOROW    NUMBER,
                           P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TDRNA(P_BCHMDL   VARCHAR,
                     P_ERR_CODE OUT VARCHAR2,
                     P_FROMROW  NUMBER,
                     P_TOROW    NUMBER,
                     P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TDAW(P_BCHMDL   VARCHAR,
                    P_ERR_CODE OUT VARCHAR2,
                    P_FROMROW  NUMBER,
                    P_TOROW    NUMBER,
                    P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_SAONLINESYNDATA(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_CIINTERESTTOPRINCIPAL(P_BCHMDL   VARCHAR,
                                     P_ERR_CODE OUT VARCHAR2,
                                     P_FROMROW  NUMBER,
                                     P_TOROW    NUMBER,
                                     P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODFEECALCULATE(P_BCHMDL   VARCHAR,
                              P_ERR_CODE OUT VARCHAR2,
                              P_FROMROW  NUMBER,
                              P_TOROW    NUMBER,
                              P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_SABEFOREBATCH(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SAAFTERBATCH(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_ICCFCREDITINTERESTACCURE(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_LNADVPAYMENTAFTSENDMONEY(P_BCHMDL   VARCHAR,
                                        P_DUEPAID  VARCHAR2,
                                        P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RECALREVENUE(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RECALFEECOMM(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RECHANGECFSTS(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_REEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_RMEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_RMBAMTTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMBFEETRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMSAMTTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMSFEETRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMSFDTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMSPAIDADV(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEXCA3384(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEXCA3386(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEXCA3350(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEXCA3350DF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEX8879(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEX8879DF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEXSEDPFEE(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMRMEODRPT(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMSUBBAMTTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMUNHOLDACCOUNT(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_DFAUTOMARGINLOANDRAWNDOWN(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SAAFTERINDAYPROCESS(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_SABEGINBATCH(P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTRECEIVESEC_TP(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2,
                                         P_FROMROW  NUMBER,
                                         P_TOROW    NUMBER,
                                         P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_DEALRECEIVE_TP(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_ICCFCREDITINTERESTACCURE2(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2,
                                         P_FROMROW  NUMBER,
                                         P_TOROW    NUMBER,
                                         P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODPRESETTLEMENTTRFMONEY(P_BCHMDL   VARCHAR,
                                       P_ERR_CODE OUT VARCHAR2,
                                       P_FROMROW  NUMBER,
                                       P_TOROW    NUMBER,
                                       P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_RMSUBRELEASEBALANCE(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RevertVoucherBuyFee(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RevertVoucherSellFee(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_CompleteVoucher(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_AFIBDEALSFEE(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_GetPM_CAMAST(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2,
                                  P_FROMROW  NUMBER,
                                  P_TOROW    NUMBER,
                                  P_LASTRUN  OUT VARCHAR2);
  PROCEDURE pr_SABackupDataSTP(p_err_code  OUT varchar2);
  PROCEDURE PR_NETOFFORDERENDDAY(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTRECEIVESECID(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_ODSETTLEMENTRECEIVEMONEYID(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2);
  PROCEDURE PR_TRANSFERSELLFEEID(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
  PROCEDURE pr_ODDayReleaseAdvancedExcess(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_rmSFEETRFInday(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE PR_RMSFEETRFID(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_RMSFDTRFID(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2);
  PROCEDURE PR_CFPAIDSELLVATID(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2);
END;
/


CREATE OR REPLACE PACKAGE BODY txpks_batch IS
  PKGCTX PLOG.LOG_CTX;
  LOGROW TLOGDEBUG%ROWTYPE;
  -------------------------------------pr_batch--------------------------------------------
  PROCEDURE PR_BATCH(P_APPTYPE  VARCHAR2,
                     P_BCHMDL   VARCHAR,
                     P_ERR_CODE OUT VARCHAR2,
                     P_LASTRUN  OUT VARCHAR2) IS
    L_COUNT       NUMBER(10, 0);
    L_CURREXECROW NUMBER(10, 0);
    L_ROWPERPAGE  NUMBER(10, 0);
    L_ACTION      VARCHAR2(50);
    L_CURRROW     NUMBER(10, 0);
    L_FROMROW     VARCHAR2(20);
    L_TOROW       VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_batch');
    P_LASTRUN := 'Y';
    --Lay ra trang se thuc hien tiep
    BEGIN
      SELECT B.ROWPERPAGE, A.BCHSUCPAGE, B.ACTION
        INTO L_ROWPERPAGE, L_CURREXECROW, L_ACTION
        FROM SBBATCHSTS A, SBBATCHCTL B
       WHERE A.BCHMDL = B.BCHMDL
         AND A.BCHSTS = ' '
         AND A.BCHMDL = P_BCHMDL
       ORDER BY B.BCHSQN;
    EXCEPTION
      WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        RETURN;
    END;
    IF L_ROWPERPAGE > 0 THEN
      L_CURRROW := L_CURREXECROW + L_ROWPERPAGE;
      L_FROMROW := L_CURREXECROW;
      L_TOROW   := L_CURREXECROW + L_ROWPERPAGE - 1;

      PLOG.DEBUG(PKGCTX,
                 'Begin Run batch for ' || P_BCHMDL || 'from row ' ||
                 L_FROMROW || ' to row ' || L_TOROW);
    ELSE
      L_FROMROW := 0;
      L_TOROW   := 9000000000;
      PLOG.DEBUG(PKGCTX, 'Begin Run batch for ' || P_BCHMDL);
    END IF;

    --kIEM TRA XEM HOST CO O TRANG THAI ACTIVE HAY KHONG
    SELECT COUNT(*)
      INTO L_COUNT
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'HOSTATUS'
       AND VARVALUE = SYSTEMNUMS.C_OPERATION_INACTIVE;
    IF L_COUNT = 0 AND L_ACTION <> 'BF' THEN
      P_ERR_CODE := ERRNUMS.C_HOST_OPERATION_STILL_ACTIVE;
      RETURN;
    END IF;
    IF P_APPTYPE = 'OD' THEN
      PR_ODEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'CI' THEN
      PR_CIEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'SE' THEN
      PR_SEEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'LN' THEN
      PR_LNEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'DF' THEN
      PR_DFEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'SA' THEN
      PR_SAEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'CF' THEN
      PR_CFEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'CA' THEN
      PR_CAEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'TD' THEN
      PR_TDEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
    ELSIF P_APPTYPE = 'RE' THEN
      PR_REEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
      --TungNT added , for RM
    ELSIF P_APPTYPE = 'RM' THEN
      PR_RMEXECUTEROUTER(P_BCHMDL,
                         P_ERR_CODE,
                         L_FROMROW,
                         L_TOROW,
                         P_LASTRUN);
      --End
    END IF;

    /*--TungNT added, them phan gen bang ke
    if p_err_code = 0 then
        cspks_rmproc.pr_createcrbtxreq(p_err_code);
    end if;
    --End*/

    IF P_ERR_CODE <> 0 THEN
      ROLLBACK;
      RETURN;
    END IF;
    IF L_ROWPERPAGE <= 0 THEN
      PLOG.DEBUG(PKGCTX, 'End Run batch for ' || P_BCHMDL);
      UPDATE SBBATCHSTS
         SET BCHSTS = 'Y', CMPLTIME = SYSDATE, BCHSUCPAGE = -1
       WHERE UPPER(BCHMDL) = P_BCHMDL
         AND BCHDATE = (SELECT MAX(BCHDATE) FROM SBBATCHSTS);
    ELSE
      IF P_LASTRUN = 'Y' THEN
        PLOG.DEBUG(PKGCTX,
                   'End Run batch for ' || P_BCHMDL || 'from row ' ||
                   L_FROMROW || ' to last row');
        UPDATE SBBATCHSTS
           SET BCHSTS = 'Y', CMPLTIME = SYSDATE, BCHSUCPAGE = L_CURRROW
         WHERE UPPER(BCHMDL) = P_BCHMDL
           AND BCHDATE = (SELECT MAX(BCHDATE) FROM SBBATCHSTS);
      ELSE
        PLOG.DEBUG(PKGCTX,
                   'End Run batch for ' || P_BCHMDL || 'from row ' ||
                   L_FROMROW || ' to row ' || L_TOROW);
        UPDATE SBBATCHSTS
           SET BCHSUCPAGE = L_CURRROW
         WHERE UPPER(BCHMDL) = P_BCHMDL
           AND BCHDATE = (SELECT MAX(BCHDATE) FROM SBBATCHSTS);
      END IF;
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_batch');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_batch');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_BATCH;

  -------------------------------------pr_tdExecuteRouter--------------------------------------------
  PROCEDURE PR_TDEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_tdExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL IN ('TDEOTD') THEN TXPKS_BATCH.PR_TDEOTD(P_BCHMDL,
                            P_ERR_CODE,
                            P_FROMROW,
                            P_TOROW,
                            P_LASTRUN);
    ELSIF P_BCHMDL IN ('TDEOTDBNK') THEN
      TXPKS_BATCH.PR_TDEOTD_BANK(P_BCHMDL,
                                 P_ERR_CODE,
                                 P_FROMROW,
                                 P_TOROW,
                                 P_LASTRUN);
    ELSIF P_BCHMDL IN ('TDRNA') THEN
      TXPKS_BATCH.PR_TDRNA(P_BCHMDL,
                           P_ERR_CODE,
                           P_FROMROW,
                           P_TOROW,
                           P_LASTRUN);
    ELSIF P_BCHMDL IN ('TDAW') THEN
      TXPKS_BATCH.PR_TDAW(P_BCHMDL,
                          P_ERR_CODE,
                          P_FROMROW,
                          P_TOROW,
                          P_LASTRUN);
    END IF;

    PLOG.SETENDSECTION(PKGCTX, 'pr_tdExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_tdExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TDEXECUTEROUTER;
  -------------------------------------pr_odExecuteRouter--------------------------------------------
    PROCEDURE PR_ODEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
   --T2-NAMNT
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
  --END T2-NAMNT

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_odExecuteRouter');
    --T2-NAMNT
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'SYSTEM' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'SYSTEM' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'SYSTEM' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    --END T2-NAMNT
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'SODICCF' THEN
      TXPKS_BATCH.PR_SIMPLETRADINGFEECALCULATE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'ODCLN' THEN
      TXPKS_BATCH.PR_ORDERCLEANUP(P_ERR_CODE);
    ELSIF P_BCHMDL = 'ODFSH' THEN
      TXPKS_BATCH.PR_ORDERFINISH(P_ERR_CODE);
    --T2-NAMNT
/*   ELSIF P_BCHMDL = 'ODRCVM' THEN
      TXPKS_BATCH.PR_ODSETTLEMENTRECEIVEMONEY(P_BCHMDL,
                                              P_ERR_CODE,
                                              P_FROMROW,
                                              P_TOROW,
                                              P_LASTRUN);
  */
    elsif p_bchmdl = 'ODRCVM_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_ODSltReceiveMoney_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODRCVM', 'ODRCVM_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'ODRCVM') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'ODRCVM_EOD') then
            txpks_batch.pr_ODSettlementReceiveMoney(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            --HSX04
            if (p_lastRun ='Y' ) then
                DELETE FROM CIMASTEXT;
                PRC_ADV_CIMASTEXT ('ALL', 'N');
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    -- END T2-NAMNT

    --T2-NAMNT
  /*  ELSIF P_BCHMDL = 'ODRCVS' THEN
      TXPKS_BATCH.PR_ODSETTLEMENTRECEIVESEC(P_BCHMDL,
                                            P_ERR_CODE,
                                            P_FROMROW,
                                            P_TOROW,
                                            P_LASTRUN);
    */

    elsif p_bchmdl = 'ODRCVS_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_ODSettlementReceiveSec_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODRCVS','ODRCVS_EOD') then
        if (l_RCVSECTIME = 'DN' and p_bchmdl = 'ODRCVS') or (l_RCVSECTIME = 'CN' and p_bchmdl = 'ODRCVS_EOD') then
            txpks_batch.pr_ODSettlementReceiveSec(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            --HSX04: log turning SE.odreceiving
            -- Neu ODRCVS_EOD: tai batch giua ngay SL Cho ve da bao gom SLCK mua trong ngay
            if(p_lastRun ='Y') then
             update semast set odreceiving = 0 where odreceiving <> 0;
              MERGE INTO semast  se
              USING (SELECT sum(st.QTTY - od.NETEXECQTTY - od.CFNETEXECQTTY - ST.AQTTY) QTTY , ACCTNO
                     FROM stschd ST, odmast od
                     WHERE st.DUETYPE='RS' and st.orgorderid =  od.orderid
                         and st.deltd = 'N' and st.status = 'N'
                         and st.QTTY - od.NETEXECQTTY - od.CFNETEXECQTTY - st.aqtty > 0
                             group by ACCTNO) st
               ON (se.acctno = st.acctno )
                WHEN MATCHED THEN
                     UPDATE SET se.odreceiving = st.qtty ;
               end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
      -- END T2-NAMNT

    ELSIF P_BCHMDL = 'ODRCVS_TP' THEN
      TXPKS_BATCH.PR_ODSETTLEMENTRECEIVESEC_TP(P_BCHMDL,
                                               P_ERR_CODE,
                                               P_FROMROW,
                                               P_TOROW,
                                               P_LASTRUN);
    ELSIF P_BCHMDL = 'ODTRFM' THEN
      TXPKS_BATCH.PR_ODSETTLEMENTTRANSFERMONEY(P_BCHMDL,
                                               P_ERR_CODE,
                                               P_FROMROW,
                                               P_TOROW,
                                               P_LASTRUN);
      --HSX04
      if(p_lastRun ='Y') then
          update semast se
          set se.execbuyqtty = 0
          where se.execbuyqtty >0;

          update cimast ci
          set ci.execbuyamt = 0, ci.execfeebuyamt =0
          where ci.execbuyamt  > 0;
       end if;
       --END HSX04
    ELSIF P_BCHMDL = 'ODPRETRFM' THEN
      TXPKS_BATCH.PR_ODPRESETTLEMENTTRFMONEY(P_BCHMDL,
                                             P_ERR_CODE,
                                             P_FROMROW,
                                             P_TOROW,
                                             P_LASTRUN);
    ELSIF P_BCHMDL = 'ODTRFS' THEN
      TXPKS_BATCH.PR_ODSETTLEMENTTRANSFERSEC(P_BCHMDL,
                                             P_ERR_CODE,
                                             P_FROMROW,
                                             P_TOROW,
                                             P_LASTRUN);
       --HSX04
      if(p_lastRun ='Y') then
         update semast se
          set se.execsellqtty = 0, se.execmsqtty = 0
          where se.execsellqtty +  se.execmsqtty  >0;
          update cimast ci
          set ci.execsellamt =0, ci.execfeevatsellamt =0
          where ci.execsellamt  > 0;
       end if;
       --END HSX04


    --T2-NAMNT
 /*   ELSIF P_BCHMDL = 'ODPAIDSF' THEN
      TXPKS_BATCH.PR_TRANSFERSELLFEE(P_BCHMDL,
                                     P_ERR_CODE,
                                     P_FROMROW,
                                     P_TOROW,
                                     P_LASTRUN);*/


  elsif p_bchmdl = 'ODPAIDSF_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_TransferSellFee_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODPAIDSF','ODPAIDSF_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'ODPAIDSF') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'ODPAIDSF_EOD') then
            txpks_batch.pr_TransferSellFee(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    -- END T2-NAMNT



    ELSIF P_BCHMDL = 'ODPAIDBF' THEN
      TXPKS_BATCH.PR_TRANSFERBUYFEE(P_BCHMDL,
                                    P_ERR_CODE,
                                    P_FROMROW,
                                    P_TOROW,
                                    P_LASTRUN);
    ELSIF P_BCHMDL = 'ODRLSBADV' THEN
      TXPKS_BATCH.PR_ODRELEASEBLOCKADVANCED(P_BCHMDL,
                                            P_ERR_CODE,
                                            P_FROMROW,
                                            P_TOROW,
                                            P_LASTRUN);
   --T2-NAMNT
   /* ELSIF P_BCHMDL = 'ODRLSADV' THEN
      TXPKS_BATCH.PR_ODDAYRELEASEADVANCED(P_BCHMDL,
                                          P_ERR_CODE,
                                          P_FROMROW,
                                          P_TOROW,
                                          P_LASTRUN);*/

      elsif p_bchmdl = 'ODRLSADV_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_ODDayReleaseAdvanced_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODRLSADV_EOD') then
        -- HSX04: Hoan tra ung truoc thua lenh ban
        txpks_batch.pr_ODDayReleaseAdvancedExcess(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        if l_RCVCASHTIME = 'CN' then
            txpks_batch.pr_ODDayReleaseAdvanced(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    -- END T2-NAMNT
    elsif p_bchmdl in ('ODRLSADV') then
        if l_RCVCASHTIME = 'DN' then
            txpks_batch.pr_ODDayReleaseAdvanced(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    ELSIF P_BCHMDL = 'ODETSALC' THEN
      TXPKS_BATCH.PR_ODDEALALLOCATE(P_BCHMDL,
                                    P_ERR_CODE,
                                    P_FROMROW,
                                    P_TOROW,
                                    P_LASTRUN);
    ELSIF P_BCHMDL = 'ODTYPEFEE' THEN
      TXPKS_BATCH.PR_CALCFEEONODTYPE(P_BCHMDL,
                                     P_ERR_CODE,
                                     P_FROMROW,
                                     P_TOROW,
                                     P_LASTRUN);
    ELSIF P_BCHMDL = 'ODFEECAL' THEN
      TXPKS_BATCH.PR_ODFEECALCULATE(P_BCHMDL,
                                    P_ERR_CODE,
                                    P_FROMROW,
                                    P_TOROW,
                                    P_LASTRUN);
    ELSIF P_BCHMDL = 'ODBAK' THEN
      TXPKS_BATCH.PR_ORDERBACKUP(P_ERR_CODE);
    ELSIF P_BCHMDL = 'ODEXTCF' THEN
      TXPKS_BATCH.PR_ODEXTENTIONACCOUNT(P_ERR_CODE);
      ---HaiLT bo tinh thue TNCN de tinh o cho khac
      --    elsif p_bchmdl ='ODFEEPIT' then
      --        txpks_SEPITLOG.pr_CalcPIT(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
      ---End of HaiLT bo tinh thue TNCN de tinh o cho khac
    ELSIF P_BCHMDL = 'ODNETOFFED' THEN
    -- HSX04: Thanh toan luon lich RM trong ngay neu lenh bi net het
        TXPKS_BATCH.PR_NETOFFORDERENDDAY(P_BCHMDL ,P_ERR_CODE);
        IF P_ERR_CODE <> 0 THEN
            PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
            PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
            RETURN;
        END IF;
    ELSIF P_BCHMDL = 'ODRCVMT0_EOD' THEN
    -- HSX04: Thanh toan luon lich RM trong ngay neu lenh bi net het
        TXPKS_BATCH.PR_ODSETTLEMENTRECEIVEMONEYID(P_BCHMDL ,P_ERR_CODE,P_FROMROW ,P_TOROW , P_LASTRUN);
        IF P_ERR_CODE <> 0 THEN
            PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
            PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
            RETURN;
        END IF;
    ELSIF P_BCHMDL = 'ODPAIDSFT0_EOD' THEN
    -- HSX04: Tra phi ODPAIDSF_EOD lenh lenh ban net trong ngay
        TXPKS_BATCH.PR_TRANSFERSELLFEEID(P_BCHMDL ,P_ERR_CODE,P_FROMROW ,P_TOROW , P_LASTRUN);
        IF P_ERR_CODE <> 0 THEN
          PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
          PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
          RETURN;
        END IF;
    ELSIF P_BCHMDL = 'ODRCVST0_EOD' THEN
    -- HSX04: Thanh toan luon lich SM trong ngay neu lenh bi net het
        TXPKS_BATCH.PR_ODSETTLEMENTRECEIVESECID(P_BCHMDL ,P_ERR_CODE,P_FROMROW ,P_TOROW , P_LASTRUN);
         IF P_ERR_CODE <> 0 THEN
           PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
           PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
           RETURN;
         END IF;
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODEXECUTEROUTER;
  -------------------------------------pr_caExecuteRouter--------------------------------------------
  PROCEDURE PR_CAEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_odExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'CAWFT' THEN
      TXPKS_BATCH.PR_CAWATINGFORTRADE(P_BCHMDL,
                                      P_ERR_CODE,
                                      P_FROMROW,
                                      P_TOROW,
                                      P_LASTRUN);
    ELSIF P_BCHMDL = 'PMCAMAST' THEN
        TXPKS_BATCH.PR_GetPM_CAMAST(P_BCHMDL,
                                      P_ERR_CODE,
                                      P_FROMROW,
                                      P_TOROW,
                                      P_LASTRUN);
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CAEXECUTEROUTER;
  -------------------------------------pr_ciExecuteRouter--------------------------------------------
  PROCEDURE PR_CIEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ciExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'SCRINTACR' THEN
      TXPKS_BATCH.PR_SIMPLECREDITINTERESTACCURE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'CICRINTACR' THEN
      --txpks_batch.pr_ICCFCreditInterestAccure(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
      TXPKS_BATCH.PR_ICCFCREDITINTERESTACCURE2(P_BCHMDL,
                                               P_ERR_CODE,
                                               P_FROMROW,
                                               P_TOROW,
                                               P_LASTRUN);
    ELSIF P_BCHMDL = 'SODINTACR' THEN
      TXPKS_BATCH.PR_SIMPLEOVDTINTERESTACCURE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SODT2INTACR' THEN
      TXPKS_BATCH.PR_T2OVERDRAFTINTERESTACCURE(P_ERR_CODE);
    ELSIF P_BCHMDL IN ('CIAUTOADV', 'CIAUTOADV2') THEN
      TXPKS_BATCH.PR_CIAUTOADVANCE(P_BCHMDL,
                                   P_ERR_CODE,
                                   P_FROMROW,
                                   P_TOROW,
                                   P_LASTRUN);
    ELSIF P_BCHMDL = 'CIDEBTPM' THEN
      TXPKS_BATCH.PR_CIDEBTAUTOPAYMENT(P_BCHMDL,
                                       P_ERR_CODE,
                                       P_FROMROW,
                                       P_TOROW,
                                       P_LASTRUN);
      /*elsif p_bchmdl ='CIFEEDEPOSITSE' then
              txpks_batch.pr_CICalcFeeDepositSecurities(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
          elsif p_bchmdl ='CIFEEDEPOSITBO' then
              txpks_batch.pr_CICalcFeeDepositBond(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
      */
    ELSIF P_BCHMDL = 'CIFEEDEPODR' THEN
      TXPKS_BATCH.PR_CIPAYFEEDEPOSITDEBIT(P_BCHMDL,
                                          P_ERR_CODE,
                                          P_FROMROW,
                                          P_TOROW,
                                          P_LASTRUN);
    ELSIF P_BCHMDL = 'CIFEEDEPOSITSE' THEN
      TXPKS_BATCH.PR_CICALCFEEDEPOSIT(P_BCHMDL,
                                      P_ERR_CODE,
                                      P_FROMROW,
                                      P_TOROW,
                                      P_LASTRUN);
    ELSIF P_BCHMDL = 'AFIBDEALSFEE' THEN
      TXPKS_BATCH.PR_AFIBDEALSFEE(P_BCHMDL,
                                      P_ERR_CODE,
                                      P_FROMROW,
                                      P_TOROW,
                                      P_LASTRUN);

    ELSIF (P_BCHMDL = 'CIFEEDEPOSIT' OR P_BCHMDL = 'CIFEEDEPOSITBF') THEN
      TXPKS_BATCH.PR_CIPAYFEEDEPOSITSEBO(P_BCHMDL,
                                         P_ERR_CODE,
                                         P_FROMROW,
                                         P_TOROW,
                                         P_LASTRUN);
    ELSIF P_BCHMDL = 'CICRINTPRN' THEN
      TXPKS_BATCH.PR_CIINTERESTTOPRINCIPAL(P_BCHMDL,
                                           P_ERR_CODE,
                                           P_FROMROW,
                                           P_TOROW,
                                           P_LASTRUN);
      /*    elsif p_bchmdl ='CIT0SENDMONEY' then
      txpks_batch.pr_CIT0SendMoney(p_bchmdl ,p_err_code);*/
      /*    elsif p_bchmdl ='CILATESENDMONEY' then
      txpks_batch.pr_CILateSendMoney(p_bchmdl ,p_err_code);*/
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ciExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ciExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CIEXECUTEROUTER;

  -------------------------------------pr_seExecuteRouter--------------------------------------------
  PROCEDURE PR_SEEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_seExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'SECALC' THEN
      TXPKS_BATCH.PR_SECOSTPRICECALCULATE(P_ERR_CODE);
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_seExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_seExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SEEXECUTEROUTER;

  -------------------------------------pr_lnExecuteRouter--------------------------------------------
  PROCEDURE PR_LNEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_lnExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'LNINTNMLACR' THEN
      TXPKS_BATCH.PR_LNNORMALINTERESTACCRUE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNINTDUE' THEN
      TXPKS_BATCH.PR_LNACCRUEINTEREST(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNINTNMLOVD' THEN
      TXPKS_BATCH.PR_LNMOVEINTTOOVERDUE(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNPRINDUE' THEN
      TXPKS_BATCH.PR_LNCALMATURITYPRINCIPAL(P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNPRINOVD' THEN
      TXPKS_BATCH.PR_LNMOVEPRINTOOVERDUE(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNDRAWNDOWN' THEN
      TXPKS_BATCH.PR_LNAUTODRAWNDOWN(P_BCHMDL, P_ERR_CODE);
      TXPKS_BATCH.PR_AUTOBLOCKADEACCOUNT(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNADVPAY' THEN
      TXPKS_BATCH.PR_LNADVPAYMENT(P_BCHMDL, 'OVD', P_ERR_CODE);
      TXPKS_BATCH.PR_LNADVPAYMENT(P_BCHMDL, 'NML', P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNAUTOPAY' THEN
      TXPKS_BATCH.PR_LNAUTOPAYMENT(P_BCHMDL, 'OVD', P_ERR_CODE);
      TXPKS_BATCH.PR_LNAUTOPAYMENT(P_BCHMDL, 'NML', P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNATPAY4TA0' THEN
      TXPKS_BATCH.pr_LNPayment4TA0(P_BCHMDL, 'NML', P_ERR_CODE);
    ELSIF P_BCHMDL = 'LNADVPAYAFTSM' THEN
      TXPKS_BATCH.PR_LNADVPAYMENTAFTSENDMONEY(P_BCHMDL, 'OVD', P_ERR_CODE);
      TXPKS_BATCH.PR_LNADVPAYMENTAFTSENDMONEY(P_BCHMDL, 'NML', P_ERR_CODE);
    ELSIF P_BCHMDL = 'CLNSCHD' THEN
      TXPKS_BATCH.PR_LNCLEANSCHEDULE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'CREATELNMAST' THEN
      TXPKS_BATCH.PR_LNOPENLOANACCOUNT(P_ERR_CODE);

    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_lnExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_lnExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNEXECUTEROUTER;

  -------------------------------------pr_dfExecuteRouter--------------------------------------------
  PROCEDURE PR_DFEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    -- /*T10/2015 TTBT T+2 Begin*/
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
    -- /*T10/2015 TTBT T+2 End*/

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_dfExecuteRouter');
     -- /*T10/2015 TTBT T+2 Begin*/
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'SYSTEM' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'SYSTEM' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'SYSTEM' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    -- /*T10/2015 TTBT T+2 End*/
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'DFFEEACR' THEN
      TXPKS_BATCH.PR_DFDEALFEEACCRUE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'DFDRAWNDOWN' THEN
      TXPKS_BATCH.PR_DFDEALDRAWNDOWN(P_BCHMDL,
                                     P_ERR_CODE,
                                     P_FROMROW,
                                     P_TOROW,
                                     P_LASTRUN);
    ELSIF P_BCHMDL = 'DFCLNDEAL' THEN
      TXPKS_BATCH.PR_DFCLEANDEAL(P_ERR_CODE);
    ELSIF P_BCHMDL = 'DFPAYMENT' THEN
      TXPKS_BATCH.PR_DFPAYMENT(P_BCHMDL,
                               P_ERR_CODE,
                               P_FROMROW,
                               P_TOROW,
                               P_LASTRUN);
/*    ELSIF P_BCHMDL = 'DFRCVS' THEN
      TXPKS_BATCH.PR_DEALRECEIVE(P_BCHMDL, P_ERR_CODE);*/

    -- T2-NAMNT
   elsif p_bchmdl = 'DFRCVS_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_DealReceive_temp(p_bchmdl ,p_err_code);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('DFRCVS','DFRCVS_EOD') then
        if (l_RCVSECTIME = 'DN' and p_bchmdl = 'DFRCVS') or (l_RCVSECTIME = 'CN' and p_bchmdl = 'DFRCVS_EOD') then
            txpks_batch.pr_DealReceive(p_bchmdl ,p_err_code);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    -- END T2-NAMNT
    ELSIF P_BCHMDL = 'DFRCVS_TP' THEN
      TXPKS_BATCH.PR_DEALRECEIVE_TP(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'DFTRFS' THEN
      TXPKS_BATCH.PR_DFDEALTRANSFERSEC(P_BCHMDL,
                                       P_ERR_CODE,
                                       P_FROMROW,
                                       P_TOROW,
                                       P_LASTRUN);
    ELSIF P_BCHMDL = 'DFAUTOPAY' THEN
      TXPKS_BATCH.PR_DFDUEAUTOPAYMENT(P_BCHMDL,
                                      P_ERR_CODE,
                                      P_FROMROW,
                                      P_TOROW,
                                      P_LASTRUN);
    ELSIF P_BCHMDL = 'DFADVPAY' THEN
      TXPKS_BATCH.PR_DFAUTOADVTOPAYMENT(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'AUTOMRML' THEN
      TXPKS_BATCH.PR_DFAUTOMARGINLOANDRAWNDOWN(P_BCHMDL, P_ERR_CODE);
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_dfExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_dfExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFEXECUTEROUTER;

  -------------------------------------pr_saExecuteRouter--------------------------------------------
  PROCEDURE PR_SAEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_saExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'SABKDT' THEN
      TXPKS_BATCH.PR_SABACKUPDATA(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SABFB' THEN
      TXPKS_BATCH.PR_SABEFOREBATCH(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SAAFB' THEN
      TXPKS_BATCH.PR_SAAFTERBATCH(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SAAFINDAYPROCESS' THEN
      TXPKS_BATCH.PR_SAAFTERINDAYPROCESS(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SACWD' THEN
      TXPKS_BATCH.PR_SACHANGEWORKINGDATE(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SAGNWK' THEN
      TXPKS_BATCH.PR_SAGENERALWORKING(P_ERR_CODE);
    ELSIF P_BCHMDL = 'OLSYN' THEN
      TXPKS_BATCH.PR_SAONLINESYNDATA(P_ERR_CODE);
    ELSIF P_BCHMDL = 'SABEGINBATCH' THEN
      TXPKS_BATCH.PR_SABEGINBATCH(P_ERR_CODE);
    elsif p_bchmdl ='SABKDTSTP' then
      txpks_batch.pr_SABackupDataSTP(p_err_code);
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_saExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_saExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SAEXECUTEROUTER;

  ---------------------------------pr_SAGeneralWorking------------------------------------------------
PROCEDURE pr_SABackupDataSTP(p_err_code  OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SABackupDataSTP');

    /*nsert into   VSD_CSVCONTENT_LOGHIST  select * from VSD_CSVCONTENT_LOG;
    delete from  VSD_CSVCONTENT_LOG;


    insert into   VSD_MT508_INF_HIST  select * from VSD_MT508_INF;
    delete from VSD_MT508_INF;

    insert into   VSD_MT598_INF_HIST  select * from VSD_MT598_INF;
    delete from VSD_MT598_INF;

    insert into   VSD_MT564_INF_HIST  select * from VSD_MT564_INF where msgstatus = 'C';
    delete from VSD_MT564_INF where msgstatus = 'C';
    */
    insert into   VSD_PROCESS_LOGHIST select * from VSD_PROCESS_LOG;
    delete from VSD_PROCESS_LOG;

    insert into   VSDMSGLOG_HIST select * from VSDMSGLOG;
    delete from VSDMSGLOG;

    insert into   VSDTXREQDTLHIST  select * from VSDTXREQDTL where reqid not in (select reqid from vsdtxreq where msgstatus in ('P','S','A'));
    delete from VSDTXREQDTL where reqid not in (select reqid from vsdtxreq where msgstatus in ('P','S','A'));

    insert into   VSDTXREQHIST select * from VSDTXREQ where msgstatus not in ('P','S','A');
    delete from VSDTXREQ where msgstatus not in ('P','S','A');

    insert into   VSDTRFLOGDTLHIST  select * from VSDTRFLOGDTL
    where refautoid in (
            select autoid
            from VSDTRFLOG
            where status not in ('P','A')
            and nvl(referenceid,'9999') not in (select reqid from VSDTXREQ where msgstatus in ('P','S','A'))
        );
    delete from VSDTRFLOGDTL
    where refautoid in (
            select autoid
            from VSDTRFLOG
            where status not in ('P','A')
            and nvl(referenceid,'9999') not in (select reqid from VSDTXREQ where msgstatus in ('P','S','A'))
        );

    insert into   VSDTRFLOGHIST  select * from VSDTRFLOG where status not in ('P','A') and nvl(referenceid,'9999') not in (select reqid from VSDTXREQ where msgstatus in ('P','S','A'));
    delete from VSDTRFLOG where status not in ('P','A') and nvl(referenceid,'9999') not in (select reqid from VSDTXREQ where msgstatus in ('P','S','A'));

    insert into   VSD_PARCONTENT_LOG_HIST  select * from VSD_PARCONTENT_LOG;
    delete from VSD_PARCONTENT_LOG;

    insert into   VSDMSGFROMFLEX_HIST  select * from VSDMSGFROMFLEX;
    delete from VSDMSGFROMFLEX;

    insert into REPORTMTLOG_HIST select * from REPORTMTLOG;
    delete from REPORTMTLOG;

    commit;

 EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SABackupDataSTP');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SABackupDataSTP;


  -------------------------------------pr_cfExecuteRouter--------------------------------------------
  PROCEDURE PR_CFEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    --T2-NAMNT
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
    --END T2-NAMNT
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_cfExecuteRouter');
       --T2-NAMNT
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'SYSTEM' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'SYSTEM' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'SYSTEM' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    --END T2-NAMNT


    P_LASTRUN := 'Y';
 /*   IF P_BCHMDL = 'CFSELLVAT' THEN
      TXPKS_BATCH.PR_CFPAIDSELLVAT(P_BCHMDL,
                                   P_ERR_CODE,
                                   P_FROMROW,
                                   P_TOROW,
                                   P_LASTRUN);*/

     --T2-NAMNT
   if p_bchmdl  = 'CFSELLVAT_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_CFPaidSellVAT_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('CFSELLVAT','CFSELLVAT_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'CFSELLVAT') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'CFSELLVAT_EOD') then
            txpks_batch.pr_CFPaidSellVAT(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --END T2-NAMNT
    ELSIF P_BCHMDL = 'CFICCF' THEN
      TXPKS_BATCH.PR_CFDAYTRADINGFEECAL(P_BCHMDL,
                                        P_ERR_CODE,
                                        P_FROMROW,
                                        P_TOROW,
                                        P_LASTRUN);
    ELSIF p_bchmdl='CFSELLVATT0_EOD' THEN
      -- HSX04: Tra thue lenh ban net trong ngay
        TXPKS_BATCH.PR_CFPAIDSELLVATID(P_BCHMDL ,P_ERR_CODE,P_FROMROW ,P_TOROW , P_LASTRUN);
        IF P_ERR_CODE <> 0 THEN
           PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
           PLOG.SETENDSECTION(PKGCTX, 'pr_odExecuteRouter');
           RETURN;
        END IF;
    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_cfExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_cfExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CFEXECUTEROUTER;

  --TungNT added , for RM
  -------------------------------------pr_reExecuteRouter--------------------------------------------
  PROCEDURE PR_RMEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'BAMTTRF' THEN
      --Gen bang ke tien ban
      TXPKS_BATCH.PR_RMBAMTTRF(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      --Gen bang ke phi
      TXPKS_BATCH.PR_RMBFEETRF(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      --Gen bang ke cho tai khoan phu va giai toa
      TXPKS_BATCH.PR_RMSUBBAMTTRF(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      --Giai toa so du Hold cho cac tai khoan COrebank
      TXPKS_BATCH.PR_RMUNHOLDACCOUNT(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      --Tu dong Gom cac bang ke pending ra ngan hang
      CSPKS_RMPROC.SP_EXEC_CREATE_CRBTRFLOG_MULTI('ALL', P_ERR_CODE);
      IF P_ERR_CODE <> '0' THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
        RETURN;
      END IF;
    ELSIF P_BCHMDL = 'SAMTTRF' THEN
      TXPKS_BATCH.PR_RMSAMTTRF(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      TXPKS_BATCH.PR_RMSFEETRF(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      TXPKS_BATCH.PR_RMSPAIDADV(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      TXPKS_BATCH.PR_RMSFDTRF(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      CSPKS_RMPROC.PR_RMGROUPREQUEST('TRFODSELL', P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
      --chuyen tien thua tren tai khoan chinh sang tai khoan Corebank
      TXPKS_BATCH.PR_RMSUBRELEASEBALANCE(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
    ELSIF p_bchmdl ='SFEETRF_EOD' then
      txpks_batch.pr_rmSFEETRFInday(p_bchmdl ,p_err_code);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
    ELSIF P_BCHMDL = 'SFEETRFT0_EOD' THEN
      TXPKS_BATCH.PR_RMSFEETRFID(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
    ELSIF P_BCHMDL = 'SFDTRFT0_EOD' THEN
      TXPKS_BATCH.PR_RMSFDTRFID(P_BCHMDL, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
        RETURN;
      END IF;
    END IF;

    --cspks_rmproc.pr_createcrbtxreq(p_err_code);
    /*if p_err_code = 0 then
        cspks_rmproc.pr_createcrbtxreq(p_err_code);
    end if;*/

    PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMEXECUTEROUTER;
  --End

  ---------------------------------pr_CFPaidSellVAT------------------------------------------------
  PROCEDURE PR_CFPAIDSELLVAT(P_BCHMDL   VARCHAR,
                             P_ERR_CODE OUT VARCHAR2,
                             P_FROMROW  NUMBER,
                             P_TOROW    NUMBER,
                             P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_VATRATE       NUMBER(20, 6);
    L_RIGHTRATE     NUMBER(20, 6);
    V_DELTA         NUMBER(20, 6);
    L_RULETYPE      VARCHAR2(10);
    l_CHGBCHORDERSTARTDATE DATE ;
    L_RCVCASH_BUYIN VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CFPaidSellVAT');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM AFMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '0066';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

     --HSX04
    SELECT NVL(VARVALUE, 'Y')
      INTO L_RCVCASH_BUYIN
      FROM SYSVAR
     WHERE GRNAME LIKE 'SYSTEM'
       AND VARNAME = 'RCVCASHTIME_BUYIN_CN';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '0066';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Default thu thue la 0.1%
    BEGIN
      L_VATRATE := TO_NUMBER(CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                        'ADVSELLDUTY'));
    EXCEPTION
      WHEN OTHERS THEN
        L_VATRATE := 0.1;
    END;


     select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    --- Lay ti le thue TNCN
    SELECT VARVALUE
      INTO L_RIGHTRATE
      FROM SYSVAR
     WHERE VARNAME = 'ADVVATDUTY'
       AND GRNAME = 'SYSTEM';

    V_DELTA := 0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT MST.ACCTNO,
                       CASE
                         WHEN CI.COREBANK = 'Y' THEN
                          1
                         ELSE
                          0
                       END COREBANK,
                       MST.ACTYPE,
                       CF.VAT,
                       --SUM(ST.AMT) SELLAMT,
                       SUM(ST.AMT - OD.NETEXECAMT - OD.CFNETEXECAMT) SELLAMT, --HSX04
                       --SUM(OD.TAXSELLAMT) TAXSELLAMT,
                       SUM(OD.TAXSELLAMT -DECODE(OD.NETEXECAMT + OD.CFNETEXECAMT, OD.EXECAMT,
                                                 OD.TAXSELLAMT, CEIL((OD.NETEXECAMT + OD.CFNETEXECAMT)* OD.TAXSELLAMT/OD.EXECAMT)))
                                                 TAXSELLAMT,--HSX04
                       --SUM(DECODE ( CF.VAT,'Y',ST.ARIGHT,'N',0)) SELLRIGHTAMT,
                       SUM(DECODE ( CF.VAT,'Y',ST.ARIGHT - DECODE(OD.NETEXECAMT + OD.CFNETEXECAMT, OD.EXECAMT, ST.ARIGHT,
                                                                  CEIL((OD.NETEXECAMT + OD.CFNETEXECAMT) *ST.ARIGHT/OD.EXECAMT)),
                                               'N',0)) SELLRIGHTAMT,--HSX04
                       MAX( CASE WHEN  cf.whtax='Y' THEN  REPLACE ( V_STRDESC,'TNCN','') ELSE V_STRDESC  END  || ' ' ||
                           TO_CHAR(ST.TXDATE, 'DD/MM/RRRR')) TRDESC
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM AFMAST A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       AFTYPE TYP,
                       STSCHD ST,
                       SBSECURITIES SB,
                       ODMAST OD,
                       CIMAST CI,
                       CFMAST CF
                 WHERE MST.ACTYPE = TYP.ACTYPE
                   AND MST.ACCTNO = ST.ACCTNO
                   AND ST.ORGORDERID = OD.ORDERID
                   AND ST.CODEID = SB.CODEID
                   AND MST.ACCTNO = CI.AFACCTNO
                   AND ST.DUETYPE = 'RM'
                   AND ST.CLEARDATE <= TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) --HSX04
                   AND MST.STATUS <> 'C'
                   AND  (CF.VAT = 'Y' OR cf.whtax='Y')
                   AND ST.DELTD = 'N'
                   AND CF.CUSTID = MST.CUSTID
                   AND CF.CUSTATCOM = 'Y'
                --T2 NAMNT
                  and od.txdate >= l_CHGBCHORDERSTARTDATE
                --End T2 NAMNT
                  AND nvl(od.isbuyin , 'N') like decode (L_RcvCash_Buyin, 'Y', 'N', '%') --HSX04
                  GROUP BY MST.ACCTNO, MST.ACTYPE, CF.VAT, CI.COREBANK
                 ORDER BY MST.ACCTNO) LOOP
      IF REC.TAXSELLAMT > 0 OR REC.SELLRIGHTAMT > 0 THEN
        --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
        /*begin
        --Lay base rate trong iccftypedef
            select icrate,ruletype into l_vatrate,l_ruletype from iccftypedef
            where actype =rec.actype and modcode ='CF'
            and eventcode=p_bchmdl and deltd <> 'Y';
        --Xac dinh tier
            if l_ruletype ='T' or l_ruletype='C' then
                select delta into v_delta from iccftier
                where actype =rec.actype and modcode ='CF'
                and eventcode=p_bchmdl and deltd <> 'Y'
                and framt < rec.sellamt and toamt > rec.sellamt;
            else
                v_delta:=0;
            end if;
            l_vatrate:=l_vatrate+v_delta;
        exception when others then
            l_vatrate:=0.1;
        end;*/
        --Set txnum
        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.ACCTNO || ' ngay' ||
                   V_STRCURRDATE);
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

        --Set cac field giao dich
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        --07  PERCENT     N
        L_TXMSG.TXFIELDS('07').DEFNAME := 'PERCENT';
        L_TXMSG.TXFIELDS('07').TYPE := 'N';
        L_TXMSG.TXFIELDS('07').VALUE := 100;
        --08  ICCFBAL     N
        L_TXMSG.TXFIELDS('08').DEFNAME := 'ICCFBAL';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.SELLAMT, 0);
        --09  ICCFRATE    N
        L_TXMSG.TXFIELDS('09').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := L_VATRATE;
        --10  INTAMT      N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := REC.TAXSELLAMT; --round(l_vatrate/100*REC.SELLAMT,0);
        --11  RIGHTRATE    N
        L_TXMSG.TXFIELDS('11').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := L_RIGHTRATE;
        --12  INTRIGHTAMT      N
        L_TXMSG.TXFIELDS('12').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.SELLRIGHTAMT, 0);
        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := REC.TRDESC;
        --31    COREBANK        N
        L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;
        BEGIN
          IF TXPKS_#0066.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 0066: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CFPaidSellVAT');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_CFPaidSellVAT');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CFPaidSellVAT');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CFPAIDSELLVAT;
  --T2-NAMNT
  ---------------------------------PR_CFPAIDSELLVAT_TEMP------------------------------------------------
  PROCEDURE PR_CFPAIDSELLVAT_TEMP(P_BCHMDL   VARCHAR,
                             P_ERR_CODE OUT VARCHAR2,
                             P_FROMROW  NUMBER,
                             P_TOROW    NUMBER,
                             P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_VATRATE       NUMBER(20, 6);
    L_RIGHTRATE     NUMBER(20, 6);
    V_DELTA         NUMBER(20, 6);
    L_RULETYPE      VARCHAR2(10);
    l_CHGBCHORDERSTARTDATE date;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_CFPAIDSELLVAT_TEMP');

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM AFMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '0066';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '0066';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Default thu thue la 0.1%
    BEGIN
      L_VATRATE := TO_NUMBER(CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                        'ADVSELLDUTY'));
    EXCEPTION
      WHEN OTHERS THEN
        L_VATRATE := 0.1;
    END;

    --- Lay ti le thue TNCN
    SELECT VARVALUE
      INTO L_RIGHTRATE
      FROM SYSVAR
     WHERE VARNAME = 'ADVVATDUTY'
       AND GRNAME = 'SYSTEM';

    V_DELTA := 0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT MST.ACCTNO,
                       CASE
                         WHEN CI.COREBANK = 'Y' THEN
                          1
                         ELSE
                          0
                       END COREBANK,
                       MST.ACTYPE,
                       CF.VAT,
                       SUM(ST.AMT) SELLAMT,
                       SUM(OD.TAXSELLAMT) TAXSELLAMT,
                       SUM(ST.ARIGHT) SELLRIGHTAMT,
                       MAX(V_STRDESC || ' ' ||
                           TO_CHAR(ST.TXDATE, 'DD/MM/RRRR')) TRDESC
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM AFMAST A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       AFTYPE TYP,
                       STSCHD ST,
                       SBSECURITIES SB,
                       ODMAST OD,
                       CIMAST CI,
                       CFMAST CF
                 WHERE MST.ACTYPE = TYP.ACTYPE
                   AND MST.ACCTNO = ST.ACCTNO
                   AND ST.ORGORDERID = OD.ORDERID
                   AND ST.CODEID = SB.CODEID
                   AND MST.ACCTNO = CI.AFACCTNO
                   AND ST.DUETYPE = 'RM'
                   AND ST.CLEARDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.STATUS <> 'C'
                   AND CF.VAT = 'Y'
                   AND ST.DELTD = 'N'
                   AND CF.CUSTID = MST.CUSTID
                   AND CF.CUSTATCOM = 'Y'
                    and od.txdate < l_CHGBCHORDERSTARTDATE -- T10/2015 TTBT T+2 Begin
              and not exists (select 1 from tllog where batchname = p_bchmdl and MST.ACCTNO = tllog.msgacct and deltd <> 'Y') --T10/2015 TTBT T+2
                 GROUP BY MST.ACCTNO, MST.ACTYPE, CF.VAT, CI.COREBANK
                 ORDER BY MST.ACCTNO) LOOP
      IF REC.TAXSELLAMT > 0 OR REC.SELLRIGHTAMT > 0 THEN
        --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
        /*begin
        --Lay base rate trong iccftypedef
            select icrate,ruletype into l_vatrate,l_ruletype from iccftypedef
            where actype =rec.actype and modcode ='CF'
            and eventcode=p_bchmdl and deltd <> 'Y';
        --Xac dinh tier
            if l_ruletype ='T' or l_ruletype='C' then
                select delta into v_delta from iccftier
                where actype =rec.actype and modcode ='CF'
                and eventcode=p_bchmdl and deltd <> 'Y'
                and framt < rec.sellamt and toamt > rec.sellamt;
            else
                v_delta:=0;
            end if;
            l_vatrate:=l_vatrate+v_delta;
        exception when others then
            l_vatrate:=0.1;
        end;*/
        --Set txnum
        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.ACCTNO || ' ngay' ||
                   V_STRCURRDATE);
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

        --Set cac field giao dich
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        --07  PERCENT     N
        L_TXMSG.TXFIELDS('07').DEFNAME := 'PERCENT';
        L_TXMSG.TXFIELDS('07').TYPE := 'N';
        L_TXMSG.TXFIELDS('07').VALUE := 100;
        --08  ICCFBAL     N
        L_TXMSG.TXFIELDS('08').DEFNAME := 'ICCFBAL';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.SELLAMT, 0);
        --09  ICCFRATE    N
        L_TXMSG.TXFIELDS('09').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := L_VATRATE;
        --10  INTAMT      N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := REC.TAXSELLAMT; --round(l_vatrate/100*REC.SELLAMT,0);
        --11  RIGHTRATE    N
        L_TXMSG.TXFIELDS('11').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := L_RIGHTRATE;
        --12  INTRIGHTAMT      N
        L_TXMSG.TXFIELDS('12').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.SELLRIGHTAMT, 0);
        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := REC.TRDESC;
        --31    COREBANK        N
        L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;
        BEGIN
          IF TXPKS_#0066.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 0066: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_CFPAIDSELLVAT_TEMP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release PR_CFPAIDSELLVAT_TEMP');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_CFPAIDSELLVAT_TEMP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CFPAIDSELLVAT_TEMP;
  --END T2-NAMNT
  ---------------------------------pr_CaWatingfortrade------------------------------------------------
 PROCEDURE PR_CAWATINGFORTRADE(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG       TX.MSG_RECTYPE;
    V_STRCURRDATE VARCHAR2(20);
    V_STRPREVDATE VARCHAR2(20);
    V_STRNEXTDATE VARCHAR2(20);
    V_STRDESC     VARCHAR2(1000);
    L_ERR_PARAM   VARCHAR2(300);
    L_MAXROW      NUMBER(20, 0);
    V_COMPANYCD   VARCHAR2(10);
    L_ISMARGIN    VARCHAR2(1);
    L_COUNT       NUMBER(20);
    L_ROOMREMAIN  NUMBER(20);
    L_BLOCKEDAVL  NUMBER(20);
    L_TRADEAVL    NUMBER(20);
   l_sectype   VARCHAR2(50);
   l_custid     VARCHAR2(50);
   l_afacctno VARCHAR2(50);
   l_codeid   VARCHAR2(50);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CaWatingfortrade');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM SEMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2262';

    FOR REC IN (SELECT SB.PARVALUE,
                       SE.COSTPRICE PRICE,
                       CF.CUSTODYCD,
                       CF.CUSTID,
                       AF.ACCTNO AFACCTNO,
                       SB.CODEID,
                       CF.FULLNAME,
                       CF.IDCODE,
                       CF.ADDRESS,
                       SB.SYMBOL,
                       SE.STATUS,
                       AF.ACCTNO || SB.CODEID SEACCTNOCR,
                       AF.ACCTNO || SBWFT.CODEID SEACCTNODR,
                       TRADE,
                       MORTAGE,
                       MARGIN,
                       NETTING,
                       STANDING,
                       WITHDRAW,
                       DEPOSIT,
                       LOAN,
                       BLOCKED,
                       RECEIVING,
                       TRANSFER,
                       SENDDEPOSIT,
                       SENDPENDING,
                       DTOCLOSE,
                       SDTOCLOSE,
                       EMKQTTY,
                       BLOCKWITHDRAW,
                       BLOCKDTOCLOSE
                  FROM SEMAST          SE,
                       AFMAST          AF,
                       CFMAST          CF,
                       SBSECURITIES    SB,
                       SBSECURITIES    SBWFT,
                       SECURITIES_INFO SEINFO

                 WHERE SE.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND SB.CODEID = SEINFO.CODEID
                   AND SE.CODEID = SBWFT.CODEID
                   AND SBWFT.REFCODEID = SB.CODEID
                   AND SBWFT.TRADEPLACE = '006'
                   AND SB.CODEID IN ( SELECT  CODEID FROM   CAMAST  CA WHERE CATYPE ='026' AND STATUS ='N' AND ACTIONDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT))
                   AND TRADE + MORTAGE + STANDING + WITHDRAW + DEPOSIT +
                       BLOCKED + SENDDEPOSIT + DTOCLOSE + EMKQTTY +
                       BLOCKWITHDRAW + BLOCKDTOCLOSE > 0

                ) LOOP




    SELECT count(*) INTO l_count
    FROM SEMAST
    WHERE ACCTNO= REC.SEACCTNOCR;


  IF l_count = 0 THEN
         l_afacctno := substr(REC.SEACCTNOCR,1,10);
         l_codeid := substr(REC.SEACCTNOCR,11);
         BEGIN
             SELECT b.setype,a.custid
             INTO l_sectype,l_custid
             FROM AFMAST A, aftype B
             WHERE  A.actype= B.actype
             AND a.ACCTNO = l_afacctno;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
             p_err_code := errnums.C_CF_REGTYPE_NOT_FOUND;
             RAISE errnums.E_CF_REGTYPE_NOT_FOUND;
         END;


         INSERT INTO SEMAST
         (ACTYPE,CUSTID,ACCTNO,CODEID,AFACCTNO,OPNDATE,LASTDATE,COSTDT,TBALDT,STATUS,IRTIED,IRCD,
         COSTPRICE,TRADE,MORTAGE,MARGIN,NETTING,STANDING,WITHDRAW,DEPOSIT,LOAN)
         VALUES(
         l_sectype, l_custid,REC.SEACCTNOCR,l_codeid,l_afacctno,
         getcurrdate() ,getcurrdate(),
         getcurrdate(),getcurrdate(),
         'A','Y','000', 0,0,0,0,0,0,0,0,0);
    END IF;


      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --01   N   CODEID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.CODEID;
      --02   C   AFACCTNO
      L_TXMSG.TXFIELDS('02').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.AFACCTNO;
      --03   C   SEACCTNODR
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SEACCTNODR';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.SEACCTNODR;
      --04   C   CUSTODYCD
      L_TXMSG.TXFIELDS('04').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.CUSTODYCD;
      --05   C   SEACCTNOCR
      L_TXMSG.TXFIELDS('05').DEFNAME := 'SEACCTNOCR';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.SEACCTNOCR;
      --09   C   PRICE
      L_TXMSG.TXFIELDS('09').DEFNAME := 'PRICE';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.PRICE;
      --10   N   TRADE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'TRADE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.TRADE;
      --11   N   PARVALUE
      L_TXMSG.TXFIELDS('11').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.PARVALUE;
      --12   N   MORTAGE
      L_TXMSG.TXFIELDS('12').DEFNAME := 'MORTAGE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.MORTAGE;

      --14   N   NETTING
      L_TXMSG.TXFIELDS('14').DEFNAME := 'NETTING';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := REC.NETTING;

      --15   N   STANDING
      L_TXMSG.TXFIELDS('15').DEFNAME := 'STANDING';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := REC.STANDING;
      --16   N   WITHDRAW
      L_TXMSG.TXFIELDS('16').DEFNAME := 'WITHDRAW';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := REC.WITHDRAW;

      --17   N   DEPOSIT
      L_TXMSG.TXFIELDS('17').DEFNAME := 'DEPOSIT';
      L_TXMSG.TXFIELDS('17').TYPE := 'N';
      L_TXMSG.TXFIELDS('17').VALUE := REC.DEPOSIT;

      --19   N   BLOCKED
      L_TXMSG.TXFIELDS('19').DEFNAME := 'BLOCKED';
      L_TXMSG.TXFIELDS('19').TYPE := 'N';
      L_TXMSG.TXFIELDS('19').VALUE := REC.BLOCKED;

      --20   N   RECEIVING
      L_TXMSG.TXFIELDS('20').DEFNAME := 'RECEIVING';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := REC.RECEIVING;

      --21   N   TRANSFER
      L_TXMSG.TXFIELDS('21').DEFNAME := 'TRANSFER';
      L_TXMSG.TXFIELDS('21').TYPE := 'N';
      L_TXMSG.TXFIELDS('21').VALUE := REC.TRANSFER;

      --22   N   SENDDEPOSIT
      L_TXMSG.TXFIELDS('22').DEFNAME := 'SENDDEPOSIT';
      L_TXMSG.TXFIELDS('22').TYPE := 'N';
      L_TXMSG.TXFIELDS('22').VALUE := REC.SENDDEPOSIT;

      --23   N   SENDPENDING
      L_TXMSG.TXFIELDS('23').DEFNAME := 'SENDPENDING';
      L_TXMSG.TXFIELDS('23').TYPE := 'N';
      L_TXMSG.TXFIELDS('23').VALUE := REC.SENDPENDING;

      --25   C   DTOCLOSE
      L_TXMSG.TXFIELDS('25').DEFNAME := 'DTOCLOSE';
      L_TXMSG.TXFIELDS('25').TYPE := 'N';
      L_TXMSG.TXFIELDS('25').VALUE := REC.DTOCLOSE;

      --26   C   EMKQTTY
      L_TXMSG.TXFIELDS('26').DEFNAME := 'EMKQTTY';
      L_TXMSG.TXFIELDS('26').TYPE := 'N';
      L_TXMSG.TXFIELDS('26').VALUE := REC.EMKQTTY;

      --27   C   BLOCKWITHDRAW
      L_TXMSG.TXFIELDS('27').DEFNAME := 'BLOCKWITHDRAW';
      L_TXMSG.TXFIELDS('27').TYPE := 'N';
      L_TXMSG.TXFIELDS('27').VALUE := REC.BLOCKWITHDRAW;

      --25   C   BLOCKDTOCLOSE
      L_TXMSG.TXFIELDS('28').DEFNAME := 'BLOCKDTOCLOSE';
      L_TXMSG.TXFIELDS('28').TYPE := 'N';
      L_TXMSG.TXFIELDS('28').VALUE := REC.BLOCKDTOCLOSE;

      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_2262;

      --90   N   CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91   N   ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'N';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --53   N   LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.IDCODE;
      BEGIN
        IF TXPKS_#2262.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2262: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    UPDATE CAMAST SET STATUS ='C'
    WHERE CATYPE = '026' AND STATUS IN ('N') AND  ACTIONDATE <= TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);

    --PhuongHT add: tu dong chuyen CK tu cho giao dich thanh jao dich khi den ngay
    L_TXMSG.TLTXCD := '3356';
    SELECT TXDESC INTO V_STRDESC FROM TLTX WHERE TLTXCD = '3356';
    FOR REC IN (

                SELECT MST.*, SE.QTTY, (SE.QTTY - REALQTTY) DIFFQTTY
                  FROM (SELECT MAX(MSTAUTOID) AUTOID,
                                CAMASTID,
                                MAX(DESCRIPTION) DESCRIPTION,
                                MAX(TYPE) TYPE,
                                MAX(TRADEDATE) TRADEDATE,
                                MAX(PARVALUE) PARVALUE,
                                MAX(PRICE) PRICE,
                                SUM(TRADE) TRADE,
                                SUM(BLOCKED) BLOCKED,
                                MAX(CODEID) CODEID,
                                MAX(SYMBOL) SYMBOL,
                                MAX(CATYPE) CATYPE,
                                SUM(CAQTTY) CAQTTY,
                                SUM(REALQTTY) REALQTTY,
                                MAX(CODEIDWFT) CODEIDWFT
                           FROM (SELECT CAMAST.AUTOID MSTAUTOID,
                                        CA.AUTOID,
                                        CAMAST.CAMASTID,
                                        CAMAST.DESCRIPTION,
                                        '001' TYPE,
                                        CAMAST.TRADEDATE,
                                        SB.PARVALUE,
                                        SE.COSTPRICE PRICE,
                                        CF.CUSTODYCD,
                                        CF.CUSTID,
                                        AF.ACCTNO AFACCTNO,
                                        SB.CODEID,
                                        CF.FULLNAME,
                                        CF.IDCODE,
                                        CF.ADDRESS,
                                        SB.SYMBOL,
                                        SE.STATUS,
                                        AF.ACCTNO || SB.CODEID SEACCTNOCR,
                                        AF.ACCTNO || SBWFT.CODEID SEACCTNODR,
                                        LEAST(CA.QTTY, SE.TRADE) TRADE,
                                        (CASE
                                          WHEN (CA.QTTY > SE.TRADE) THEN
                                           LEAST((CA.QTTY - SE.TRADE), SE.BLOCKED)
                                          ELSE
                                           0
                                        END) BLOCKED,
                                        A1.CDCONTENT CATYPE,
                                        CA.QTTY CAQTTY,
                                        (LEAST(CA.QTTY, SE.TRADE) + (CASE
                                          WHEN (CA.QTTY > SE.TRADE) THEN
                                           LEAST((CA.QTTY - SE.TRADE), SE.BLOCKED)
                                          ELSE
                                           0
                                        END)) REALQTTY,
                                        SBWFT.CODEID CODEIDWFT,
                                        CAMAST.ISINCODE
                                   FROM VW_CAMAST_ALL   CAMAST,
                                        VW_CASCHD_ALL   CA,
                                        SEMAST          SE,
                                        AFMAST          AF,
                                        CFMAST          CF,
                                        SBSECURITIES    SB,
                                        SBSECURITIES    SBWFT,
                                        SECURITIES_INFO SEINFO,
                                        ALLCODE         A1
                                  WHERE CAMAST.CAMASTID = CA.CAMASTID
                                    AND CAMAST.ISWFT = 'Y'
                                    AND CA.ISSE = 'Y'
                                    AND NVL(CAMAST.TOCODEID, CAMAST.CODEID) =
                                        SB.CODEID
                                    AND CA.AFACCTNO = SE.AFACCTNO
                                    AND SE.AFACCTNO = AF.ACCTNO
                                    AND AF.CUSTID = CF.CUSTID
                                    AND SB.CODEID = SEINFO.CODEID
                                    AND SE.CODEID = SBWFT.CODEID
                                    AND SBWFT.REFCODEID = SB.CODEID /* and se.trade+se.blocked>0*/
                                    AND A1.CDVAL = CAMAST.CATYPE
                                    AND A1.CDNAME = 'CATYPE'
                                    AND A1.CDTYPE = 'CA'
                                    AND SBWFT.TRADEPLACE = '006'
                                    AND CA.STATUS IN ('C', 'S', 'G', 'H', 'J')
                                    AND INSTR(NVL(CA.PSTATUS, 'A'), 'W') <= 0
                                       -- DK DEN NGAY VA CHUA CHUYEN THANH CK GIAO DICH
                                    AND CAMAST.TRADEDATE <=
                                        TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT)
                                    AND CAMAST.ISCHANGEWFT = 'N')
                          GROUP BY CAMASTID, ISINCODE) MST,
                        (SELECT CODEID,
                                SUM(SE2.TRADE + SE2.MORTAGE + SE2.STANDING +
                                    SE2.WITHDRAW + SE2.DEPOSIT + SE2.BLOCKED +
                                    SE2.SENDDEPOSIT + SE2.DTOCLOSE) QTTY
                           FROM SEMAST SE2
                          GROUP BY CODEID) SE
                 WHERE MST.CODEIDWFT = SE.CODEID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := '0001';

      --Set cac field giao dich
      --03   C   camastid
      L_TXMSG.TXFIELDS('03').DEFNAME := 'CAMASTID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.CAMASTID;

      --04   C   SYMBOL
      L_TXMSG.TXFIELDS('04').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.SYMBOL;

      --05   C   CATYPE
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CATYPE';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.CATYPE;

      --07   D   TRADEDATE
      L_TXMSG.TXFIELDS('07').DEFNAME := 'TRADEDATE';
      L_TXMSG.TXFIELDS('07').TYPE := 'D';
      L_TXMSG.TXFIELDS('07').VALUE := REC.TRADEDATE;

      --08   C   CODEID
      L_TXMSG.TXFIELDS('08').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := REC.CODEID;

      --09   C   PRICE
      L_TXMSG.TXFIELDS('09').DEFNAME := 'PRICE';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.PRICE;

      --10   N   TRADE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'TRADE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.TRADE;

      --13   C   CODEID
      L_TXMSG.TXFIELDS('13').DEFNAME := 'CONTENTS';
      L_TXMSG.TXFIELDS('13').TYPE := 'C';
      L_TXMSG.TXFIELDS('13').VALUE := REC.DESCRIPTION;

      --10   N   TRADE
      L_TXMSG.TXFIELDS('19').DEFNAME := 'BLOCKED';
      L_TXMSG.TXFIELDS('19').TYPE := 'N';
      L_TXMSG.TXFIELDS('19').VALUE := REC.BLOCKED;

      --20   N   REALQTTY
      L_TXMSG.TXFIELDS('20').DEFNAME := 'REALQTTY';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := REC.REALQTTY;

      --21   N   CAQTTY
      L_TXMSG.TXFIELDS('21').DEFNAME := 'CAQTTY';
      L_TXMSG.TXFIELDS('21').TYPE := 'N';
      L_TXMSG.TXFIELDS('21').VALUE := REC.CAQTTY;

      --10   N   QTTY
      L_TXMSG.TXFIELDS('22').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('22').TYPE := 'N';
      L_TXMSG.TXFIELDS('22').VALUE := REC.QTTY;

      --23   N   DIFFQTTY
      L_TXMSG.TXFIELDS('23').DEFNAME := 'DIFFQTTY';
      L_TXMSG.TXFIELDS('23').TYPE := 'N';
      L_TXMSG.TXFIELDS('23').VALUE := REC.DIFFQTTY;

      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#3356.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 3356: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    --PhuongHT add: chuyen cho phan CK luu ky wft, set ngay giao dich qua 2225
    FOR REC IN (SELECT LOG.*,
                       SEC.REFCODEID,
                       CF.BRID,
                       CF.CUSTODYCD,
                       SE.COSTPRICE  PRICE,
                       SEC.PARVALUE,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE,
                       SE.TRADE      SETRADE,
                       SE.BLOCKED    SEBLOCKED
                  FROM SEDEPOWFTLOG LOG,
                       (SELECT * FROM SYSVAR WHERE VARNAME = 'CURRDATE') SYS,
                       SBSECURITIES SEC,
                       CFMAST CF,
                       AFMAST AF,
                       SEMAST SE
                 WHERE LOG.DELTD <> 'Y'
                   AND LOG.ISWFT = 'Y'
                   AND LOG.TRADEDATE <= TO_DATE(SYS.VARVALUE, 'DD/MM/RRRR')
                   AND LOG.CODEID = SEC.CODEID
                   AND LOG.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.AFACCTNO = SE.AFACCTNO
                   AND LOG.CODEID = SE.CODEID) LOOP


    SELECT count(*) INTO l_count
    FROM SEMAST
    WHERE ACCTNO= REC.AFACCTNO || REC.REFCODEID;


  IF l_count = 0 THEN
         l_afacctno :=  REC.AFACCTNO;
         l_codeid := REC.REFCODEID;
         BEGIN
             SELECT b.setype,a.custid
             INTO l_sectype,l_custid
             FROM AFMAST A, aftype B
             WHERE  A.actype= B.actype
             AND a.ACCTNO = l_afacctno;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
             p_err_code := errnums.C_CF_REGTYPE_NOT_FOUND;
             RAISE errnums.E_CF_REGTYPE_NOT_FOUND;
         END;


         INSERT INTO SEMAST
         (ACTYPE,CUSTID,ACCTNO,CODEID,AFACCTNO,OPNDATE,LASTDATE,COSTDT,TBALDT,STATUS,IRTIED,IRCD,
         COSTPRICE,TRADE,MORTAGE,MARGIN,NETTING,STANDING,WITHDRAW,DEPOSIT,LOAN)
         VALUES(
         l_sectype, l_custid,REC.AFACCTNO || REC.REFCODEID,l_codeid,l_afacctno,
         getcurrdate() ,getcurrdate(),
         getcurrdate(),getcurrdate(),
         'A','Y','000', 0,0,0,0,0,0,0,0,0);
    END IF;


      SELECT LEAST(SE.TRADE, REC.TRADE), LEAST(SE.BLOCKED, REC.BLOCKED)
        INTO L_TRADEAVL, L_BLOCKEDAVL
        FROM SEMAST SE
       WHERE SE.ACCTNO = REC.AFACCTNO || REC.CODEID;
      /*L_TRADEAVL:=LEAST (REC.TRADE,REC.SETRADE);
      L_BLOCKEDAVL:=LEAST (REC.BLOCKED,REC.SEBLOCKED);*/
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID   := REC.BRID;
      L_TXMSG.TLTXCD := '2262';

      --Set cac field giao dich
      --01   N   CODEID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.REFCODEID;
      --02   C   AFACCTNO
      L_TXMSG.TXFIELDS('02').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.AFACCTNO;
      --03   C   SEACCTNODR
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SEACCTNODR';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO || REC.CODEID;
      --04   C   CUSTODYCD
      L_TXMSG.TXFIELDS('04').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.CUSTODYCD;
      --05   C   SEACCTNOCR
      L_TXMSG.TXFIELDS('05').DEFNAME := 'SEACCTNOCR';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO || REC.REFCODEID;
      --09   C   PRICE
      L_TXMSG.TXFIELDS('09').DEFNAME := 'PRICE';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.PRICE;
      --10   N   TRADE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'TRADE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := L_TRADEAVL;
      --11   N   PARVALUE
      L_TXMSG.TXFIELDS('11').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.PARVALUE;
      --12   N   MORTAGE
      L_TXMSG.TXFIELDS('12').DEFNAME := 'MORTAGE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;

      --14   N   NETTING
      L_TXMSG.TXFIELDS('14').DEFNAME := 'NETTING';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := 0;

      --15   N   STANDING
      L_TXMSG.TXFIELDS('15').DEFNAME := 'STANDING';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := 0;
      --16   N   WITHDRAW
      L_TXMSG.TXFIELDS('16').DEFNAME := 'WITHDRAW';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := 0;

      --17   N   DEPOSIT
      L_TXMSG.TXFIELDS('17').DEFNAME := 'DEPOSIT';
      L_TXMSG.TXFIELDS('17').TYPE := 'N';
      L_TXMSG.TXFIELDS('17').VALUE := 0;

      --19   N   BLOCKED
      L_TXMSG.TXFIELDS('19').DEFNAME := 'BLOCKED';
      L_TXMSG.TXFIELDS('19').TYPE := 'N';
      L_TXMSG.TXFIELDS('19').VALUE := L_BLOCKEDAVL;

      --20   N   RECEIVING
      L_TXMSG.TXFIELDS('20').DEFNAME := 'RECEIVING';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := 0;

      --21   N   TRANSFER
      L_TXMSG.TXFIELDS('21').DEFNAME := 'TRANSFER';
      L_TXMSG.TXFIELDS('21').TYPE := 'N';
      L_TXMSG.TXFIELDS('21').VALUE := 0;

      --22   N   SENDDEPOSIT
      L_TXMSG.TXFIELDS('22').DEFNAME := 'SENDDEPOSIT';
      L_TXMSG.TXFIELDS('22').TYPE := 'N';
      L_TXMSG.TXFIELDS('22').VALUE := 0;

      --23   N   SENDPENDING
      L_TXMSG.TXFIELDS('23').DEFNAME := 'SENDPENDING';
      L_TXMSG.TXFIELDS('23').TYPE := 'N';
      L_TXMSG.TXFIELDS('23').VALUE := 0;

      --25   C   DTOCLOSE
      L_TXMSG.TXFIELDS('25').DEFNAME := 'DTOCLOSE';
      L_TXMSG.TXFIELDS('25').TYPE := 'N';
      L_TXMSG.TXFIELDS('25').VALUE := 0;

      --26   C   EMKQTTY
      L_TXMSG.TXFIELDS('26').DEFNAME := 'EMKQTTY';
      L_TXMSG.TXFIELDS('26').TYPE := 'N';
      L_TXMSG.TXFIELDS('26').VALUE := 0;

      --27   C   BLOCKWITHDRAW
      L_TXMSG.TXFIELDS('27').DEFNAME := 'BLOCKWITHDRAW';
      L_TXMSG.TXFIELDS('27').TYPE := 'N';
      L_TXMSG.TXFIELDS('27').VALUE := 0;

      --25   C   BLOCKDTOCLOSE
      L_TXMSG.TXFIELDS('28').DEFNAME := 'BLOCKDTOCLOSE';
      L_TXMSG.TXFIELDS('28').TYPE := 'N';
      L_TXMSG.TXFIELDS('28').VALUE := 0;

      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_2262;

      --90   N   CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91   N   ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'N';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --53   N   LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.IDCODE;
      BEGIN
        IF TXPKS_#2262.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2262: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
      -- update trong bang log
      UPDATE SEDEPOWFTLOG
         SET ISWFT = 'N'
       WHERE TXNUM = REC.TXNUM
         AND TXDATE = REC.TXDATE;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CaWatingfortrade');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on Wating for trade');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CaWatingfortrade');
      RAISE ERRNUMS.E_SYSTEM_ERROR;

  END PR_CAWATINGFORTRADE;

  ---------------------------------pr_AutoCloseAFMAST------------------------------------------------
  PROCEDURE PR_AUTOCLOSEAFMAST(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2
                             ) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_ICRATE        NUMBER;
    V_DELTA         NUMBER;
    L_RULETYPE      VARCHAR2(10);
    L_ICCFBAL       NUMBER;
    L_AMOUNT        NUMBER;
    V_COUNTCI       NUMBER;
    V_COUNTSE       NUMBER;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_AutoCloseAFMAST');

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2249';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2249';
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    --Xac dinh xem co tieu khoan nao cho dong va khong tien, khong chung khoan
    FOR REC IN (SELECT AF.ACCTNO AFACCTNO,
                       AF.STATUS,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       NVL(CI.BALANCE, 0) BALANCE,
                       NVL(CI.NETTING, 0) CINETTING,
                       NVL(CI.RECEIVING, 0) CIRECEIVING,
                       NVL(SE.SENETTING, 0) SENETTING,
                       NVL(SE.SERECEIVING, 0) SERECEIVING
                  FROM AFMAST AF,
                       CIMAST CI,
                       CFMAST CF,
                       (SELECT AFACCTNO,
                               SUM(NETTING) SENETTING,
                               SUM(RECEIVING) SERECEIVING,
                               SUM(DTOCLOSE) DTOCLOSE,
                               SUM(TRADE) TRADE,
                               SUM(MORTAGE) MORTAGE,
                               SUM(SENDDEPOSIT) SENDDEPOSIT
                          FROM SEMAST
                         GROUP BY AFACCTNO) SE
                 WHERE AF.ACCTNO = CI.AFACCTNO
                   AND AF.ACCTNO = SE.AFACCTNO(+)
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.STATUS = 'N'
                   AND CF.STATUS ='C'
                   AND NVL(CI.BALANCE, 0) + NVL(CI.NETTING, 0) +
                       NVL(CI.RECEIVING, 0) + NVL(SE.SENETTING, 0) +
                       NVL(SE.SERECEIVING, 0) + NVL(SE.DTOCLOSE, 0) +
                       NVL(SE.TRADE, 0) + NVL(SE.MORTAGE, 0) +
                       NVL(SE.SENDDEPOSIT, 0) + NVL(CI.FLOATAMT, 0) = 0) LOOP
      -- kiem tra xem co tai khoan nao chua dc phan bo tien khong
      SELECT COUNT(1)
        INTO V_COUNTCI
        FROM CASCHD
       WHERE AFACCTNO = REC.AFACCTNO
         AND DELTD = 'N'
         AND AMT > 0
         AND ISCI = 'N'
         AND ISEXEC = 'Y';

      -- kiem tra xem co tai khoan nao chua dc phan bo CK khong
      SELECT COUNT(1)
        INTO V_COUNTSE
        FROM CASCHD
       WHERE CAMASTID = REC.AFACCTNO
         AND DELTD = 'N'
         AND QTTY > 0
         AND ISSE = 'N'
         AND ISEXEC = 'Y';

      IF V_COUNTCI + V_COUNTSE = 0 THEN

        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.AFACCTNO || ' ngay' ||
                   TO_CHAR(V_STRCURRDATE));
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

        --Set cac field giao dich
        --02  ACCTNO      C
        L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('02').TYPE := 'C';
        L_TXMSG.TXFIELDS('02').VALUE := REC.AFACCTNO;

        --88  CUSTODYCD      C
        L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
        L_TXMSG.TXFIELDS('88').TYPE := 'C';
        L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;

        --90  CUSTNAME      C
        L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('90').TYPE := 'C';
        L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
        BEGIN
          IF TXPKS_#2249.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 2249: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_AutoCloseAFMAST');

  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_AutoCloseAFMAST');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_AutoCloseAFMAST');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_AUTOCLOSEAFMAST;

  ---------------------------------pr_CFDayTradingFeeCal------------------------------------------------
  PROCEDURE PR_CFDAYTRADINGFEECAL(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2,
                                  P_FROMROW  NUMBER,
                                  P_TOROW    NUMBER,
                                  P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_ICRATE        NUMBER;
    V_DELTA         NUMBER;
    L_RULETYPE      VARCHAR2(10);
    L_ICCFBAL       NUMBER;
    L_AMOUNT        NUMBER;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CFDayTradingFeeCal');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM AFMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '0065';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '0065';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Default thu thue la 0.1%
    L_ICRATE := 0;
    V_DELTA  := 0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT OD.AFACCTNO,
                       AF.ACTYPE,
                       SUM(EXECAMT) EXECAMT,
                       MAX(ICCF.ICRATE) ICRATE,
                       MAX(RULETYPE) RULETYPE
                  FROM ODMAST OD,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM AFMAST A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) AF,
                       AFTYPE TYP,
                       ICCFTYPEDEF ICCF
                 WHERE OD.DELTD <> 'Y'
                   AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                   AND OD.EXECQTTY > 0
                   AND OD.AFACCTNO = AF.ACCTNO
                   AND AF.ACTYPE = TYP.ACTYPE
                   AND ICCF.MODCODE = 'CF'
                   AND ICCF.ACTYPE = TYP.ACTYPE
                   AND ICCF.EVENTCODE = 'DTRADEFEE'
                   AND ICCF.DELTD <> 'Y'
                   AND OD.TXDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                 GROUP BY OD.AFACCTNO, AF.ACTYPE) LOOP
      L_ICCFBAL  := REC.EXECAMT;
      L_ICRATE   := REC.ICRATE;
      L_RULETYPE := REC.RULETYPE;
      IF L_ICCFBAL > 0 THEN
        IF L_RULETYPE <> 'C' THEN
          --Luat tinh theo fixed hoac tier
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN
              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'CF'
                 AND EVENTCODE = 'DTRADEFEE'
                 AND DELTD <> 'Y'
                 AND FRAMT < L_ICCFBAL
                 AND TOAMT >= L_ICCFBAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;
          L_AMOUNT := L_ICCFBAL;
          --Set txnum
          PLOG.DEBUG(PKGCTX,
                     'Loop for account:' || REC.AFACCTNO || ' ngay' ||
                     TO_CHAR(V_STRCURRDATE));
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

          --Set cac field giao dich
          --03  ACCTNO      C
          L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;
          --07  PERCENT     N
          L_TXMSG.TXFIELDS('07').DEFNAME := 'PERCENT';
          L_TXMSG.TXFIELDS('07').TYPE := 'N';
          L_TXMSG.TXFIELDS('07').VALUE := 100;
          --08  ICCFBAL     N
          L_TXMSG.TXFIELDS('08').DEFNAME := 'ICCFBAL';
          L_TXMSG.TXFIELDS('08').TYPE := 'N';
          L_TXMSG.TXFIELDS('08').VALUE := ROUND(L_AMOUNT, 0);
          --09  ICCFRATE    N
          L_TXMSG.TXFIELDS('09').DEFNAME := 'FEEAMT';
          L_TXMSG.TXFIELDS('09').TYPE := 'N';
          L_TXMSG.TXFIELDS('09').VALUE := L_ICRATE;
          --10  INTAMT      N
          L_TXMSG.TXFIELDS('10').DEFNAME := 'INTAMT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := ROUND(L_ICRATE / 100 * L_AMOUNT,
                                                0);
          --30    DESC        C
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
          BEGIN
            IF TXPKS_#0065.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 0065: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;
        ELSE
          --Luat tinh theo cluster
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          FOR REC_TIER IN (SELECT DELTA, FRAMT, TOAMT
                             FROM ICCFTIER
                            WHERE ACTYPE = REC.ACTYPE
                              AND MODCODE = 'CF'
                              AND EVENTCODE = P_BCHMDL
                              AND DELTD <> 'Y'
                            ORDER BY FRAMT) LOOP
            EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
            IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
              L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
            ELSE
              L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
            END IF;
            L_ICRATE := L_ICRATE + REC_TIER.DELTA;
            --Set txnum
            PLOG.DEBUG(PKGCTX,
                       'Loop for account:' || REC.AFACCTNO || ' ngay' ||
                       TO_CHAR(V_STRCURRDATE));
            SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                   LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO L_TXMSG.TXNUM
              FROM DUAL;
            L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

            --Set cac field giao dich
            --03  ACCTNO      C
            L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
            L_TXMSG.TXFIELDS('03').TYPE := 'C';
            L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;
            --07  PERCENT     N
            L_TXMSG.TXFIELDS('07').DEFNAME := 'PERCENT';
            L_TXMSG.TXFIELDS('07').TYPE := 'N';
            L_TXMSG.TXFIELDS('07').VALUE := 100;
            --08  ICCFBAL     N
            L_TXMSG.TXFIELDS('08').DEFNAME := 'ICCFBAL';
            L_TXMSG.TXFIELDS('08').TYPE := 'N';
            L_TXMSG.TXFIELDS('08').VALUE := ROUND(L_ICCFBAL, 0);
            --09  ICCFRATE    N
            L_TXMSG.TXFIELDS('09').DEFNAME := 'FEEAMT';
            L_TXMSG.TXFIELDS('09').TYPE := 'N';
            L_TXMSG.TXFIELDS('09').VALUE := L_ICRATE;
            --10  INTAMT      N
            L_TXMSG.TXFIELDS('10').DEFNAME := 'INTAMT';
            L_TXMSG.TXFIELDS('10').TYPE := 'N';
            L_TXMSG.TXFIELDS('10').VALUE := ROUND(L_ICRATE / 100 *
                                                  L_ICCFBAL,
                                                  0);
            --30    DESC        C
            L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
            L_TXMSG.TXFIELDS('30').TYPE := 'C';
            L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
            BEGIN
              IF TXPKS_#0065.FN_BATCHTXPROCESS(L_TXMSG,
                                               P_ERR_CODE,
                                               L_ERR_PARAM) <>
                 SYSTEMNUMS.C_SUCCESS THEN
                PLOG.DEBUG(PKGCTX, 'got error 0065: ' || P_ERR_CODE);
                ROLLBACK;
                RETURN;
              END IF;
            END;
          END LOOP;
        END IF;

      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CFDayTradingFeeCal');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CFDayTradingFeeCal');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CFDayTradingFeeCal');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CFDAYTRADINGFEECAL;

  ---------------------------------pr_SimpleTradingFeeCalculate------------------------------------------------
  PROCEDURE PR_SIMPLETRADINGFEECALCULATE(P_ERR_CODE OUT VARCHAR2) IS
    INDATE VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SimpleTradingFeeCalculate');
    SELECT VARVALUE
      INTO INDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    UPDATE ODMAST
       SET FEEACR = ROUND(FEEACR +
                          (EXECAMT - EXAMT) / 100 *
                          NVL((SELECT ICCFRATE
                                FROM (SELECT OD.ORDERID,
                                             OD.EXECAMT - OD.EXAMT ICCFAMT,
                                             ICCF.RATE ICCFRATE
                                        FROM ODMAST OD,
                                             (SELECT TYPEDEF.ACTYPE,
                                                     TYPEDEF.ICRATE +
                                                     NVL(TIER.DELTA, 0) RATE,
                                                     NVL(FRAMT, -1) FRAMT,
                                                     (CASE
                                                       WHEN NVL(TOAMT, -1) = -1 THEN
                                                        10000000000000
                                                       ELSE
                                                        NVL(TOAMT, -1)
                                                     END) TOAMT
                                                FROM (SELECT MODCODE || ACTYPE ||
                                                             EVENTCODE ICCFCODE,
                                                             ACTYPE,
                                                             ICRATE,
                                                             DELTD,
                                                             RULETYPE,
                                                             MODCODE
                                                        FROM ICCFTYPEDEF) TYPEDEF,
                                                     (SELECT MODCODE || ACTYPE ||
                                                             EVENTCODE ICCFCODE,
                                                             DELTA,
                                                             FRAMT,
                                                             TOAMT
                                                        FROM ICCFTIER) TIER
                                               WHERE TYPEDEF.ICCFCODE =
                                                     TIER.ICCFCODE(+)
                                                 AND TYPEDEF.DELTD <> 'Y'
                                                 AND TYPEDEF.RULETYPE = 'T'
                                                 AND TYPEDEF.MODCODE = 'OD'
                                              UNION
                                              SELECT TYPEDEF.ACTYPE,
                                                     TYPEDEF.ICRATE RATE,
                                                     -1             FRAMT,
                                                     10000000000000 TOAMT
                                                FROM ICCFTYPEDEF TYPEDEF
                                               WHERE TYPEDEF.DELTD <> 'Y'
                                                 AND TYPEDEF.RULETYPE = 'F'
                                                 AND TYPEDEF.MODCODE = 'OD') ICCF
                                       WHERE OD.ACTYPE = ICCF.ACTYPE
                                         AND OD.EXECAMT - OD.EXAMT > 0
                                         AND OD.DELTD <> 'Y'
                                         AND OD.TXDATE =
                                             TO_DATE(INDATE, 'DD/MM/YYYY')
                                         AND ICCF.FRAMT <
                                             (OD.EXECAMT - OD.EXAMT)
                                         AND ICCF.TOAMT >=
                                             (OD.EXECAMT - OD.EXAMT)) IC
                               WHERE IC.ORDERID = ODMAST.ORDERID),
                              0),
                          0);

    --Cap nhat examt
    UPDATE ODMAST
       SET EXAMT = ROUND(EXAMT +
                         NVL((SELECT ICCFAMT
                               FROM (SELECT OD.ORDERID,
                                            OD.EXECAMT - OD.EXAMT ICCFAMT,
                                            ICCF.RATE ICCFRATE
                                       FROM ODMAST OD,
                                            (SELECT TYPEDEF.ACTYPE,
                                                    TYPEDEF.ICRATE +
                                                    NVL(TIER.DELTA, 0) RATE,
                                                    NVL(FRAMT, -1) FRAMT,
                                                    (CASE
                                                      WHEN NVL(TOAMT, -1) = -1 THEN
                                                       10000000000000
                                                      ELSE
                                                       NVL(TOAMT, -1)
                                                    END) TOAMT
                                               FROM (SELECT MODCODE || ACTYPE ||
                                                            EVENTCODE ICCFCODE,
                                                            ACTYPE,
                                                            ICRATE,
                                                            DELTD,
                                                            RULETYPE,
                                                            MODCODE
                                                       FROM ICCFTYPEDEF) TYPEDEF,
                                                    (SELECT MODCODE || ACTYPE ||
                                                            EVENTCODE ICCFCODE,
                                                            DELTA,
                                                            FRAMT,
                                                            TOAMT
                                                       FROM ICCFTIER) TIER
                                              WHERE TYPEDEF.ICCFCODE =
                                                    TIER.ICCFCODE(+)
                                                AND TYPEDEF.DELTD <> 'Y'
                                                AND TYPEDEF.RULETYPE = 'T'
                                                AND TYPEDEF.MODCODE = 'OD'
                                             UNION
                                             SELECT TYPEDEF.ACTYPE,
                                                    TYPEDEF.ICRATE RATE,
                                                    -1             FRAMT,
                                                    10000000000000 TOAMT
                                               FROM ICCFTYPEDEF TYPEDEF
                                              WHERE TYPEDEF.DELTD <> 'Y'
                                                AND TYPEDEF.RULETYPE = 'F'
                                                AND TYPEDEF.MODCODE = 'OD') ICCF
                                      WHERE OD.ACTYPE = ICCF.ACTYPE
                                        AND OD.EXECAMT - OD.EXAMT > 0
                                        AND OD.DELTD <> 'Y'
                                        AND OD.TXDATE =
                                            TO_DATE(INDATE, 'DD/MM/YYYY')
                                        AND ICCF.FRAMT <
                                            (OD.EXECAMT - OD.EXAMT)
                                        AND ICCF.TOAMT >=
                                            (OD.EXECAMT - OD.EXAMT)) IC
                              WHERE IC.ORDERID = ODMAST.ORDERID),
                             0),
                         0);
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleTradingFeeCalculate');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleTradingFeeCalculate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SIMPLETRADINGFEECALCULATE;
  ---------------------------------pr_OrderCleanUp------------------------------------------------
  /*  PROCEDURE pr_OrderCleanUp(p_err_code  OUT varchar2)
  IS
      indate varchar2(20);
  BEGIN
    plog.setendsection(pkgctx, 'pr_OrderCleanUp');
    select varvalue into indate from sysvar where grname ='SYSTEM' and varname ='CURRDATE';

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_OrderCleanUp');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_OrderCleanUp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_OrderCleanUp;*/

  ---------------------------------pr_LNOpenLoanAccount------------------------------------------------
  PROCEDURE PR_LNOPENLOANACCOUNT(P_ERR_CODE OUT VARCHAR2) IS
    V_DTCURDATE DATE;
    V_STRACCTNO VARCHAR2(16);
    V_STRBRID   VARCHAR2(4);
  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNOpenLoanAccount');
    --1.Cap nhat lai thong tin tu loai hinh Loan xuong tai khoan vay.
    --Neu co thay doi thi cac deal giai ngan sap toi se an theo thay doi trong loai hinh
    FOR I IN (SELECT * FROM LNTYPE) LOOP
      UPDATE LNMAST
         SET LNTYPE         = I.LNTYPE,
             LNCLDR         = I.LNCLDR,
             PRINFRQ        = I.PRINFRQ,
             PRINPERIOD     = I.PRINPERIOD,
             INTFRGCD       = I.INTFRQCD,
             INTDAY         = I.INTDAY,
             INTPERIOD      = I.INTPERIOD,
             NINTCD         = I.NINTCD,
             OINTCD         = I.OINTCD,
             RATE1          = I.RATE1,
             RATE2          = I.RATE2,
             RATE3          = I.RATE3,
             OPRINFRQ       = I.OPRINFRQ,
             OPRINPERIOD    = I.OPRINPERIOD,
             OINTFRQCD      = I.OINTFRQCD,
             OINTDAY        = I.OINTDAY,
             ORATE1         = I.ORATE1,
             ORATE2         = I.ORATE2,
             ORATE3         = I.ORATE3,
             DRATE          = I.DRATE,
             ADVPAY         = I.ADVPAY,
             PREPAID        = I.PREPAID,
             ADVPAYFEE      = I.ADVPAYFEE,
             MINTERM        = I.MINTERM,
             CFRATE1        = I.CFRATE1,
             CFRATE2        = I.CFRATE2,
             CFRATE3        = I.CFRATE3,
             INTOVDCD       = I.INTOVDCD,
             BANKPAIDMETHOD = I.BANKPAIDMETHOD
       WHERE LNMAST.ACTYPE = I.ACTYPE
         AND AUTOAPPLY IN ('A', 'L'); -- cap nhat cac hop dong autoappy in  ('A','N')
      COMMIT;
    END LOOP;
    --cap nhat vao lnschd voi cac hop dong autoapply='A'
    FOR I2 IN (SELECT * FROM LNMAST WHERE AUTOAPPLY = 'A') LOOP
      UPDATE LNSCHD
         SET RATE1   = I2.RATE1,
             RATE2   = I2.RATE2,
             RATE3   = I2.RATE3,
             CFRATE1 = I2.CFRATE1,
             CFRATE2 = I2.CFRATE2,
             CFRATE3 = I2.CFRATE3
       WHERE LNSCHD.ACCTNO = I2.ACCTNO;
      COMMIT;
    END LOOP;
    --2.Mo moi tai khoan vay neu chua co, cua nhung tai khoan xuat hien khoan vay
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_DTCURDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    FOR REC IN (SELECT DISTINCT *
                  FROM (
                        --Vay Bao lanh: Tai khoan thuong Or marginT3
                        SELECT CI.ACCTNO,
                                LNT.CCYCD,
                                LNT.LNTYPE,
                                LNT.LNCLDR,
                                LNT.PRINFRQ,
                                LNT.PRINPERIOD,
                                LNT.INTFRQCD,
                                LNT.INTDAY,
                                LNT.INTPERIOD,
                                LNT.NINTCD,
                                LNT.OINTCD,
                                LNT.RATE1,
                                LNT.RATE2,
                                LNT.RATE3,
                                LNT.OPRINFRQ,
                                LNT.OPRINPERIOD,
                                LNT.OINTFRQCD,
                                LNT.OINTDAY,
                                LNT.ORATE1,
                                LNT.ORATE2,
                                LNT.ORATE3,
                                LNT.ADVPAY,
                                LNT.ADVPAYFEE,
                                LNT.DRATE,
                                LNT.ACTYPE,
                                LNT.PREPAID,
                                LNT.CFRATE1,
                                LNT.CFRATE2,
                                LNT.CFRATE3,
                                LNT.MINTERM,
                                LNT.AUTOAPPLY,
                                LNT.INTPAIDMETHOD,
                                LNT.RRTYPE,
                                LNT.CIACCTNO,
                                LNT.CUSTBANK,
                                LNT.INTOVDCD,
                                LNT.BANKPAIDMETHOD
                          FROM CIMAST CI,
                                AFMAST AF,
                                AFTYPE AFT,
                                LNTYPE LNT,
                                MRTYPE MR
                         WHERE CI.AFACCTNO = AF.ACCTNO
                           AND CI.STATUS = 'A'
                           AND ROUND(-CI.BALANCE) > 0
                           AND AF.ACTYPE = AFT.ACTYPE
                           AND LNT.ACTYPE = AFT.T0LNTYPE --AND AF.STATUS = 'A'
                           AND LNT.STATUS <> 'N'
                           AND AFT.MRTYPE = MR.ACTYPE
                              --AND (MR.MRTYPE = 'N' or AFT.ISTRFBUY = 'Y')
                           AND NOT EXISTS
                         (SELECT 1
                                  FROM LNMAST
                                 WHERE LNMAST.TRFACCTNO = CI.ACCTNO
                                   AND LNMAST.ACTYPE = AFT.T0LNTYPE
                                   AND LNMAST.STATUS NOT IN ('P', 'R', 'C')
                                   AND LNMAST.FTYPE = 'AF')
                        UNION ALL
                        --Vay Margin: Tai khoan Margin
                        SELECT CI.ACCTNO,
                                LNT.CCYCD,
                                LNT.LNTYPE,
                                LNT.LNCLDR,
                                LNT.PRINFRQ,
                                LNT.PRINPERIOD,
                                LNT.INTFRQCD,
                                LNT.INTDAY,
                                LNT.INTPERIOD,
                                LNT.NINTCD,
                                LNT.OINTCD,
                                LNT.RATE1,
                                LNT.RATE2,
                                LNT.RATE3,
                                LNT.OPRINFRQ,
                                LNT.OPRINPERIOD,
                                LNT.OINTFRQCD,
                                LNT.OINTDAY,
                                LNT.ORATE1,
                                LNT.ORATE2,
                                LNT.ORATE3,
                                LNT.ADVPAY,
                                LNT.ADVPAYFEE,
                                LNT.DRATE,
                                LNT.ACTYPE,
                                LNT.PREPAID,
                                LNT.CFRATE1,
                                LNT.CFRATE2,
                                LNT.CFRATE3,
                                LNT.MINTERM,
                                LNT.AUTOAPPLY,
                                LNT.INTPAIDMETHOD,
                                LNT.RRTYPE,
                                LNT.CIACCTNO,
                                LNT.CUSTBANK,
                                LNT.INTOVDCD,
                                LNT.BANKPAIDMETHOD
                          FROM CIMAST CI,
                                AFMAST AF,
                                AFTYPE AFT,
                                LNTYPE LNT,
                                MRTYPE MR
                         WHERE CI.AFACCTNO = AF.ACCTNO
                           AND CI.STATUS = 'A'
                           AND ROUND(-CI.BALANCE) > 0
                           AND AF.ACTYPE = AFT.ACTYPE
                           AND LNT.ACTYPE = AFT.LNTYPE --AND AF.STATUS = 'A'
                           AND LNT.STATUS <> 'N'
                           AND AFT.MRTYPE = MR.ACTYPE
                           AND MR.MRTYPE <> 'N'
                           AND AFT.ISTRFBUY <> 'Y'
                           AND NOT EXISTS
                         (SELECT 1
                                  FROM LNMAST
                                 WHERE LNMAST.TRFACCTNO = CI.ACCTNO
                                   AND LNMAST.ACTYPE = AFT.LNTYPE
                                   AND LNMAST.STATUS NOT IN ('P', 'R', 'C')
                                   AND LNMAST.FTYPE = 'AF')
                        UNION ALL
                        --Vay dong tai tro: Cho tai khoan Margin
                        SELECT CI.ACCTNO,
                                LNT.CCYCD,
                                LNT.LNTYPE,
                                LNT.LNCLDR,
                                LNT.PRINFRQ,
                                LNT.PRINPERIOD,
                                LNT.INTFRQCD,
                                LNT.INTDAY,
                                LNT.INTPERIOD,
                                LNT.NINTCD,
                                LNT.OINTCD,
                                LNT.RATE1,
                                LNT.RATE2,
                                LNT.RATE3,
                                LNT.OPRINFRQ,
                                LNT.OPRINPERIOD,
                                LNT.OINTFRQCD,
                                LNT.OINTDAY,
                                LNT.ORATE1,
                                LNT.ORATE2,
                                LNT.ORATE3,
                                LNT.ADVPAY,
                                LNT.ADVPAYFEE,
                                LNT.DRATE,
                                LNT.ACTYPE,
                                LNT.PREPAID,
                                LNT.CFRATE1,
                                LNT.CFRATE2,
                                LNT.CFRATE3,
                                LNT.MINTERM,
                                LNT.AUTOAPPLY,
                                LNT.INTPAIDMETHOD,
                                LNT.RRTYPE,
                                LNT.CIACCTNO,
                                LNT.CUSTBANK,
                                LNT.INTOVDCD,
                                LNT.BANKPAIDMETHOD
                          FROM CIMAST   CI,
                                AFMAST   AF,
                                AFTYPE   AFT,
                                LNTYPE   LNT,
                                AFIDTYPE AFID
                         WHERE CI.AFACCTNO = AF.ACCTNO
                           AND CI.STATUS = 'A'
                           AND ROUND(-CI.BALANCE) > 0
                           AND AF.ACTYPE = AFT.ACTYPE --AND AF.STATUS = 'A'
                           AND LNT.STATUS <> 'N'
                           AND AFT.ACTYPE = AFID.AFTYPE
                           AND AFID.OBJNAME = 'LN.LNTYPE'
                           AND LNT.ACTYPE = AFID.ACTYPE
                           AND NOT EXISTS
                         (SELECT 1
                                  FROM LNMAST
                                 WHERE LNMAST.TRFACCTNO = CI.ACCTNO
                                   AND LNMAST.ACTYPE = AFID.ACTYPE
                                   AND LNMAST.STATUS NOT IN ('P', 'R', 'C')
                                   AND LNMAST.FTYPE = 'AF'))) LOOP
      V_STRBRID := SUBSTR(REC.ACCTNO, 0, 4);
      V_STRBRID := SUBSTR(REC.ACCTNO, 0, 4);
      SELECT SEQ_LNMAST.NEXTVAL LNACCTNO INTO V_STRACCTNO FROM DUAL;
      V_STRACCTNO := SUBSTR('000000' || V_STRACCTNO,
                            LENGTH('000000' || V_STRACCTNO) - 5,
                            6);
      V_STRACCTNO := V_STRBRID ||
                     SUBSTR(TO_CHAR(V_DTCURDATE, SYSTEMNUMS.C_DATE_FORMAT),
                            1,
                            2) ||
                     SUBSTR(TO_CHAR(V_DTCURDATE, SYSTEMNUMS.C_DATE_FORMAT),
                            4,
                            2) ||
                     SUBSTR(TO_CHAR(V_DTCURDATE, SYSTEMNUMS.C_DATE_FORMAT),
                            9,
                            2) || V_STRACCTNO;
      INSERT INTO LNMAST
        ("ACTYPE",
         "ACCTNO",
         "CCYCD",
         "BANKID",
         "APPLID",
         "OPNDATE",
         "EXPDATE",
         "EXTDATE",
         "CLSDATE",
         "RLSDATE",
         "LASTDATE",
         "ACRDATE",
         "OACRDATE",
         "STATUS",
         "PSTATUS",
         "TRFACCTNO",
         "PRINAFT",
         "INTAFT",
         "LNTYPE",
         "LNCLDR",
         "PRINFRQ",
         "PRINPERIOD",
         "INTFRGCD",
         "INTDAY",
         "INTPERIOD",
         "NINTCD",
         "OINTCD",
         "RATE1",
         "RATE2",
         "RATE3",
         "OPRINFRQ",
         "OPRINPERIOD",
         "OINTFRQCD",
         "OINTDAY",
         "ORATE1",
         "ORATE2",
         "ORATE3",
         "DRATE",
         "APRLIMIT",
         "RLSAMT",
         "PRINPAID",
         "PRINNML",
         "PRINOVD",
         "INTNMLACR",
         "INTOVDACR",
         "INTNMLPBL",
         "INTNMLOVD",
         "INTDUE",
         "INTPAID",
         "INTPREPAID",
         "NOTES",
         "LNCLASS",
         "ADVPAY",
         "ADVPAYFEE",
         "ORLSAMT",
         "OPRINPAID",
         "OPRINNML",
         "OPRINOVD",
         "OINTNMLACR",
         "OINTNMLOVD",
         "OINTOVDACR",
         "OINTDUE",
         "OINTPAID",
         "OINTPREPAID",
         "FEE",
         "FEEPAID",
         "FEEDUE",
         "FEEOVD",
         "FTYPE",
         "PREPAID",
         "CFRATE1",
         "CFRATE2",
         "CFRATE3",
         "MINTERM",
         "AUTOAPPLY",
         "INTPAIDMETHOD",
         "FEEINTNMLACR",
         "FEEINTOVDACR",
         "FEEINTNMLOVD",
         "FEEINTDUE",
         "FEEINTPREPAID",
         "FEEINTPAID",
         "INTFLOATAMT",
         "FEEFLOATAMT",
         RRTYPE,
         CIACCTNO,
         CUSTBANK,
         INTOVDCD,
         BANKPAIDMETHOD)
      VALUES
        (REC.ACTYPE,
         V_STRACCTNO,
         REC.CCYCD,
         NULL,
         NULL,
         V_DTCURDATE,
         V_DTCURDATE,
         NULL,
         NULL,
         V_DTCURDATE,
         NULL,
         V_DTCURDATE,
         V_DTCURDATE,
         'N',
         '',
         REC.ACCTNO,
         'Y',
         'Y',
         REC.LNTYPE,
         REC.LNCLDR,
         REC.PRINFRQ,
         REC.PRINPERIOD,
         REC.INTFRQCD,
         REC.INTDAY,
         REC.INTPERIOD,
         REC.NINTCD,
         REC.OINTCD,
         REC.RATE1,
         REC.RATE2,
         REC.RATE3,
         REC.OPRINFRQ,
         REC.OPRINPERIOD,
         REC.OINTFRQCD,
         REC.OINTDAY,
         REC.ORATE1,
         REC.ORATE2,
         REC.ORATE3,
         REC.DRATE,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         NULL,
         'I',
         REC.ADVPAY,
         REC.ADVPAYFEE,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         'AF',
         REC.PREPAID,
         REC.CFRATE1,
         REC.CFRATE2,
         REC.CFRATE3,
         REC.MINTERM,
         REC.AUTOAPPLY,
         REC.INTPAIDMETHOD,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         REC.RRTYPE,
         REC.CIACCTNO,
         REC.CUSTBANK,
         REC.INTOVDCD,
         REC.BANKPAIDMETHOD);

    END LOOP;



    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNOpenLoanAccount');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNOpenLoanAccount');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNOPENLOANACCOUNT;

  ---------------------------------pr_LNCleanSchedule------------------------------------------------
  PROCEDURE PR_LNCLEANSCHEDULE(P_ERR_CODE OUT VARCHAR2) IS
    L_CONST_05 NUMBER(10, 4);
  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNCleanSchedule');
    L_CONST_05 := 0.5;

    UPDATE LNSCHD SET INTDUE = 0 WHERE ABS(INTDUE) < L_CONST_05;
    UPDATE LNSCHD SET INTNMLACR = 0 WHERE ABS(INTNMLACR) < L_CONST_05;
    UPDATE LNSCHD SET INTOVD = 0 WHERE ABS(INTOVD) < L_CONST_05;

    UPDATE LNMAST SET INTNMLACR = 0 WHERE ABS(INTNMLACR) < L_CONST_05;
    UPDATE LNMAST SET INTDUE = 0 WHERE ABS(INTDUE) < L_CONST_05;
    UPDATE LNMAST SET INTOVDACR = 0 WHERE ABS(INTOVDACR) < L_CONST_05;

    UPDATE LNSCHD SET FEEINTDUE = 0 WHERE ABS(FEEINTDUE) < L_CONST_05;
    UPDATE LNSCHD
       SET FEEINTNMLACR = 0
     WHERE ABS(FEEINTNMLACR) < L_CONST_05;
    UPDATE LNSCHD
       SET FEEINTOVDACR = 0
     WHERE ABS(FEEINTOVDACR) < L_CONST_05;

    UPDATE LNMAST
       SET FEEINTNMLACR = 0
     WHERE ABS(FEEINTNMLACR) < L_CONST_05;
    UPDATE LNMAST SET FEEINTDUE = 0 WHERE ABS(FEEINTDUE) < L_CONST_05;
    UPDATE LNMAST
       SET FEEINTOVDACR = 0
     WHERE ABS(FEEINTOVDACR) < L_CONST_05;

    UPDATE LNMAST SET OINTNMLACR = 0 WHERE ABS(OINTNMLACR) < L_CONST_05;
    UPDATE LNMAST SET OINTDUE = 0 WHERE ABS(OINTDUE) < L_CONST_05;
    UPDATE LNMAST SET OINTOVDACR = 0 WHERE ABS(OINTOVDACR) < L_CONST_05;

    INSERT INTO LNSCHDHIST
      SELECT *
        FROM LNSCHD
       WHERE ABS(NML) < 1
         AND ABS(OVD) < 1
         AND ABS(INTNMLACR) < 1
         AND ABS(FEEINTNMLACR) < 1
         AND ABS(FEE) < 1
         AND ABS(FEEINTDUE) < 1
         AND ABS(FEEINTOVDACR) < 1
         AND ABS(INTDUE) < 1
         AND ABS(INTOVD) < 1
         AND ABS(FEEDUE) < 1
         AND ABS(FEEOVD) < 1
         AND ABS(INTOVDPRIN) < 1
         AND ABS(FEEINTNMLOVD) < 1;
    DELETE LNSCHD
     WHERE ABS(NML) < 1
       AND ABS(OVD) < 1
       AND ABS(INTNMLACR) < 1
       AND ABS(FEE) < 1
       AND ABS(FEEINTNMLACR) < 1
       AND ABS(FEEINTNMLOVD) < 1
       AND ABS(FEEINTDUE) < 1
       AND ABS(FEEINTOVDACR) < 1
       AND ABS(INTDUE) < 1
       AND ABS(INTOVD) < 1
       AND ABS(FEEDUE) < 1
       AND ABS(FEEOVD) < 1
       AND ABS(INTOVDPRIN) < 1;
    --BACK UP cac tai khoan loan cho cac deal.
    INSERT INTO LNMASTHIST
      SELECT *
        FROM LNMAST
       WHERE FTYPE = 'DF'
         AND NOT EXISTS
       (SELECT ACCTNO FROM LNSCHD WHERE ACCTNO = LNMAST.ACCTNO)
         AND NOT EXISTS
       (SELECT ACCTNO
                FROM DFMAST
               WHERE LNACCTNO = LNMAST.ACCTNO
                 AND DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY > 0);

    DELETE FROM LNMAST
     WHERE FTYPE = 'DF'
       AND NOT EXISTS
     (SELECT ACCTNO FROM LNSCHD WHERE ACCTNO = LNMAST.ACCTNO)
       AND NOT EXISTS
     (SELECT ACCTNO
              FROM DFMAST
             WHERE LNACCTNO = LNMAST.ACCTNO
               AND DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY > 0);

    -- intnmlacr
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.INTNMLACR), 0) INTNMLACR,
                       NVL(SUM(LS.INTNMLACR), 0) SCHDINTNMLACR
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.INTNMLACR), 0)) - ABS(NVL(SUM(LS.INTNMLACR), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET INTNMLACR = REC.SCHDINTNMLACR
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- intdue
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.INTDUE), 0) INTDUE,
                       NVL(SUM(LS.INTDUE), 0) SCHDINTDUE
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.INTDUE), 0)) - ABS(NVL(SUM(LS.INTDUE), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET INTDUE = REC.SCHDINTDUE
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- intnmlovd
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.INTNMLOVD), 0) INTNMLOVD,
                       NVL(SUM(LS.INTOVD), 0) SCHDINTNMLOVD
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.INTNMLOVD), 0)) - ABS(NVL(SUM(LS.INTOVD), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET INTNMLOVD = REC.SCHDINTNMLOVD
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- intovdacr
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.INTOVDACR), 0) INTOVDACR,
                       NVL(SUM(LS.INTOVDPRIN), 0) SCHDINTOVDACR
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.INTOVDACR), 0)) - ABS(NVL(SUM(LS.INTOVDPRIN), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET INTOVDACR = REC.SCHDINTOVDACR
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- feeintnmlacr
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.FEEINTNMLACR), 0) FEEINTNMLACR,
                       NVL(SUM(LS.FEEINTNMLACR), 0) SCHDFEEINTNMLACR
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.FEEINTNMLACR), 0)) - ABS(NVL(SUM(LS.FEEINTNMLACR), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET FEEINTNMLACR = REC.SCHDFEEINTNMLACR
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- feeintdue
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.FEEINTDUE), 0) FEEINTDUE,
                       NVL(SUM(LS.FEEINTDUE), 0) SCHDFEEINTDUE
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.FEEINTDUE), 0)) - ABS(NVL(SUM(LS.FEEINTDUE), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET FEEINTDUE = REC.SCHDFEEINTDUE
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- feeintnmlovd
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.FEEINTNMLOVD), 0) FEEINTNMLOVD,
                       NVL(SUM(LS.FEEINTNMLOVD), 0) SCHDFEEINTNMLOVD
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.FEEINTNMLOVD), 0)) - ABS(NVL(SUM(LS.FEEINTNMLOVD), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET FEEINTNMLOVD = REC.SCHDFEEINTNMLOVD
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- feeintovdacr
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.FEEINTOVDACR), 0) FEEINTOVDACR,
                       NVL(SUM(LS.FEEINTOVDACR), 0) SCHDFEEINTOVDACR
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'P') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.FEEINTOVDACR), 0)) - ABS(NVL(SUM(LS.FEEINTOVDACR), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET FEEINTOVDACR = REC.SCHDFEEINTOVDACR
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- T0
    -- ointnmlacr
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.OINTNMLACR), 0) INTNMLACR,
                       NVL(SUM(LS.INTNMLACR), 0) SCHDINTNMLACR
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'GP') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.OINTNMLACR), 0)) - ABS(NVL(SUM(LS.INTNMLACR), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET OINTNMLACR = REC.SCHDINTNMLACR
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- ointdue
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.OINTDUE), 0) INTDUE,
                       NVL(SUM(LS.INTDUE), 0) SCHDINTDUE
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'GP') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.OINTDUE), 0)) - ABS(NVL(SUM(LS.INTDUE), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET OINTDUE = REC.SCHDINTDUE
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- ointnmlovd
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.OINTNMLOVD), 0) INTNMLOVD,
                       NVL(SUM(LS.INTOVD), 0) SCHDINTNMLOVD
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'GP') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.OINTNMLOVD), 0)) - ABS(NVL(SUM(LS.INTOVD), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET OINTNMLOVD = REC.SCHDINTNMLOVD
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- ointovdacr
    FOR REC IN (SELECT LN.ACCTNO,
                       LN.TRFACCTNO,
                       NVL(MAX(LN.OINTOVDACR), 0) INTOVDACR,
                       NVL(SUM(LS.INTOVDPRIN), 0) SCHDINTOVDACR
                  FROM LNMAST LN,
                       (SELECT * FROM LNSCHD WHERE REFTYPE = 'GP') LS
                 WHERE LN.ACCTNO = LS.ACCTNO(+)
                   AND LN.FTYPE = 'AF'
                 GROUP BY LN.ACCTNO, LN.TRFACCTNO
                HAVING ABS(ABS(NVL(MAX(LN.OINTOVDACR), 0)) - ABS(NVL(SUM(LS.INTOVDPRIN), 0))) BETWEEN 0.0001 AND 2) LOOP
      UPDATE LNMAST
         SET OINTOVDACR = REC.SCHDINTOVDACR
       WHERE ACCTNO = REC.ACCTNO
         AND TRFACCTNO = REC.TRFACCTNO;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNCleanSchedule');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNCleanSchedule');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNCLEANSCHEDULE;
  ---------------------------------pr_LNAutoPayment------------------------------------------------
  PROCEDURE PR_LNAUTOPAYMENT(P_BCHMDL   VARCHAR,
                             P_DUEPAID  VARCHAR2,
                             P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG        TX.MSG_RECTYPE;
    L_CURRDATE     VARCHAR2(20);
    L_DESC         VARCHAR2(1000);
    L_EN_DESC      VARCHAR2(1000);
    L_ORGDESC      VARCHAR2(1000);
    L_EN_ORGDESC   VARCHAR2(1000);
    L_ERR_PARAM    VARCHAR2(300);
    L_T0PRINDUE    NUMBER(20, 0);
    L_T0PRINNML    NUMBER(20, 0);
    L_T0PRINOVD    NUMBER(20, 0);
    L_AVLAMT       NUMBER(20, 0);
    L_FEEOVD       NUMBER(20, 0);
    L_T0INTNMLOVD  NUMBER(20, 0);
    L_INTNMLOVD    NUMBER(20, 0);
    L_T0INTOVDACR  NUMBER(20, 0);
    L_INTOVDACR    NUMBER(20, 0);
    L_FEEDUE       NUMBER(20, 0);
    L_T0INTDUE     NUMBER(20, 0);
    L_INTDUE       NUMBER(20, 0);
    L_FEENML       NUMBER(20, 0);
    L_T0INTNMLACR  NUMBER(20, 0);
    L_INTNMLACR    NUMBER(20, 0);
    L_PRINOVD      NUMBER(20, 0);
    L_PRINDUE      NUMBER(20, 0);
    L_PRINNML      NUMBER(20, 0);
    L_FEEINTNMLOVD NUMBER(20, 0);
    L_FEEINTNMLACR NUMBER(20, 0);
    L_FEEINTOVDACR NUMBER(20, 0);
    L_FEEINTDUE    NUMBER(20, 0);
    L_ADVPAYFEE    NUMBER(20, 0);

    L_MAXDEBTCF          NUMBER(20, 0);
    L_MINLOANAUTOPAYMENT NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNAutoPayment');
    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = '5567';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5567';

    SELECT  TO_NUMBER(VARVALUE)
      INTO L_MAXDEBTCF
      FROM SYSVAR
     WHERE VARNAME = 'MAXDEBTCF';
      SELECT DECODE (P_DUEPAID,'NML',TO_NUMBER(VARVALUE),'OVD',0)
      INTO L_MINLOANAUTOPAYMENT
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'LOANAUTOPAYAMT';

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (SELECT CI.ACCTNO TRFACCTNO,
                       ROUND(BALANCE + CASE
                               WHEN P_DUEPAID = 'OVD' THEN
                                NVL(AVLADVANCE, 0)
                               ELSE
                                0
                             END,
                             0) AVLBAL
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       ( --select sum(advamt) avladvance,afacctno
                        SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV,
                       V_GETBUYORDERINFO B,
                       V_GETSECMARGININFO SEC
                 WHERE CI.ACCTNO = AF.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND CI.ACCTNO = ADV.AFACCTNO(+)
                   AND CI.ACCTNO = B.AFACCTNO(+)
                   AND CI.ACCTNO = SEC.AFACCTNO(+)
                      --and round(BALANCE + case when p_duepaid='OVD' then nvl(avladvance,0) else 0 end,0) > 0
                      --So tien tra no > so tien tra no toi thieu
                   AND ROUND(BALANCE + (CASE
                               WHEN P_DUEPAID = 'OVD' THEN
                                NVL(AVLADVANCE, 0)
                               ELSE
                                0
                             END),
                             0) > L_MINLOANAUTOPAYMENT
                   AND EXISTS
                 (SELECT 1
                          FROM LNMAST
                         WHERE FTYPE = 'AF'
                           AND TRFACCTNO = CI.ACCTNO
                           AND PRINNML + PRINOVD + INTNMLACR + INTDUE +
                               INTOVDACR + INTNMLOVD + FEEINTNMLACR +
                               FEEINTDUE + FEEINTOVDACR + FEEINTNMLOVD +
                               OPRINNML + OPRINOVD + OINTNMLACR + OINTDUE +
                               OINTOVDACR + OINTNMLOVD > 0)
                 ORDER BY CI.ACCTNO) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.TRFACCTNO);
      IF CSPKS_LNPROC.FN_GEN_PREPAID_PAYMENT(REC.TRFACCTNO,
                                             REC.AVLBAL,
                                             'N',
                                             P_DUEPAID,
                                             P_ERR_CODE) <>
         SYSTEMNUMS.C_SUCCESS THEN
        PLOG.SETENDSECTION(PKGCTX, 'pr_LNAutoPayment');
        RETURN;
      END IF;
      L_DESC := 'CL.' || L_ORGDESC;

      FOR REC2 IN (SELECT LN.TRFACCTNO,
                          LN.ACCTNO,
                          LS.AUTOID LNSCHDID,
                          LP.AUTOID,
                          MAX(CASE
                                WHEN LN.FTYPE = 'AF' THEN
                                 1
                                ELSE
                                 0
                              END) FINANCETYPE,
                          MAX(LN.ADVPAYFEE) ADVPAYFEE,
                          SUM(LP.AMT - LP.PAIDAMT) AVLAMT,

                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) T0INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) T0INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) T0PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) T0INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) T0INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINNML,

                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEOVD
                                ELSE
                                 0
                              END) FEEOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLOVD
                                ELSE
                                 0
                              END) FEEINTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTOVDACR
                                ELSE
                                 0
                              END) FEEINTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEDUE
                                ELSE
                                 0
                              END) FEEDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTDUE
                                ELSE
                                 0
                              END) FEEINTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEE
                                ELSE
                                 0
                              END) FEENML,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLACR
                                ELSE
                                 0
                              END) FEEINTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINNML,
                           SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.ACCRUALSAMT
                                ELSE
                                 0
                              END) ACCRUALSAMT

                     FROM LNMAST LN, LNPAIDALLOC LP, LNSCHD LS
                    WHERE LN.ACCTNO = LP.LNACCTNO
                      AND LP.LNSCHDID = LS.AUTOID
                      AND LN.TRFACCTNO = REC.TRFACCTNO
                      AND INSTR(LS.REFTYPE, 'P') > 0
                      AND LP.AMT > LP.PAIDAMT
                      AND LP.STATUS = 'P'
                    GROUP BY LN.TRFACCTNO, LN.ACCTNO, LS.AUTOID, LP.AUTOID
                    ORDER BY LP.AUTOID) LOOP
        -- rec2
        L_AVLAMT := REC2.AVLAMT;
        --So tien phai tra cho tung khoan
        -- Bao lanh
        --03.T0PRINOVD
        L_T0PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.T0PRINOVD), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINOVD;
        END IF;
        --05.T0PRINDUE
        L_T0PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.T0PRINDUE), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINDUE;
        END IF;

        --01.T0INTNMLOVD
        L_T0INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLOVD := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLOVD), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLOVD;
        END IF;
        --02.T0INTOVDACR
        L_T0INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTOVDACR := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0INTOVDACR), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTOVDACR;
        END IF;
        /* --03.T0PRINOVD
        l_T0PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
        end if;*/
        --04.T0INTDUE
        L_T0INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0INTDUE), 0),0);
          L_AVLAMT   := L_AVLAMT - L_T0INTDUE;
        END IF;
        /* --05.T0PRINDUE
        l_T0PRINDUE := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
        End If;*/
        --06.T0INTNMLACR
        L_T0INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLACR :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLACR), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLACR;
        END IF;

        --07.T0PRINNML
        L_T0PRINNML := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINNML := ROUND(LEAST(L_AVLAMT, REC2.T0PRINNML), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINNML;
        END IF;
        /* --07.T0PRINNML
        l_T0PRINNML := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINNML;
        End If;*/

        -- CL
        -- Goc
        --18.PRINOVD
        L_PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.PRINOVD), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINOVD;
        END IF;
        --19.PRINDUE
        L_PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.PRINDUE), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINDUE;
        END IF;

        -- Phi
        --08.FEEINTNMLOVD
        L_FEEINTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLOVD), 0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLOVD;
        END IF;
        -- Lai

        --11.INTNMLOVD
        L_INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLOVD := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTNMLOVD), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLOVD;
        END IF;
        --12.INTOVDACR
        L_INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTOVDACR := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTOVDACR), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTOVDACR;
        END IF;
        -- Lai Phi
        --22.FEEINTOVDACR
        L_FEEINTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTOVDACR :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEINTOVDACR), 0),0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTOVDACR;
        END IF;

        --15.FEEOVD
        L_FEEOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEOVD := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEOVD), 0),0);
          L_AVLAMT := L_AVLAMT - L_FEEOVD;
        END IF;

        --13.INTDUE
        L_INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_INTDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTDUE), 0),0);
          L_AVLAMT := L_AVLAMT - L_INTDUE;
        END IF;

        --09.FEEINTDUE
        L_FEEINTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.FEEINTDUE), 0),0);
          L_AVLAMT    := L_AVLAMT - L_FEEINTDUE;
        END IF;

        --16.FEEDUE
        L_FEEDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEDUE :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEDUE), 0),0);
          L_AVLAMT := L_AVLAMT - L_FEEDUE;
        END IF;

        --10.FEEINTNMLACR
        L_FEEINTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLACR :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLACR), 0),0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLACR;
        END IF;

        --14.INTNMLACR
        L_INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLACR := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.INTNMLACR), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLACR;
        END IF;

        --17.FEENML
        L_FEENML := 0;
        IF L_AVLAMT > 0 THEN
          L_FEENML := ROUND(LEAST(L_AVLAMT, REC2.FEENML), 0);
          L_AVLAMT := L_AVLAMT - L_FEENML;
        END IF;

        /*-- Goc
        --18.PRINOVD
        l_PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_PRINOVD;
        End If;
        --19.PRINDUE
        l_PRINDUE := 0;
        If l_AvlAmt > 0 Then
           l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
           l_AvlAmt := l_AvlAmt - l_PRINDUE;
        End If;
        --20.PRINNML
        l_PRINNML := 0;
        if rec2.PRINNML > 0 then
            If l_AvlAmt > 0 Then
                 l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                 l_AvlAmt := l_AvlAmt - l_PRINNML;
            End If;
        end if;*/

        --20.PRINNML
        L_PRINNML := 0;
        IF REC2.PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_PRINNML := ROUND(LEAST(REC2.PRINNML,
                                     L_AVLAMT * 1 /
                                     (1 + REC2.ADVPAYFEE / 100)),
                               0);
            L_AVLAMT  := L_AVLAMT - L_PRINNML;
          END IF;
        END IF;
        --21.ADVPAYFEE
        L_ADVPAYFEE := 0;
        IF L_PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_ADVPAYFEE := ROUND(REC2.FINANCETYPE *
                                 ROUND(LEAST(L_AVLAMT,
                                             L_PRINNML * REC2.ADVPAYFEE / 100),
                                       0),
                                 0);
            L_AVLAMT    := L_AVLAMT - L_ADVPAYFEE;
          END IF;
        END IF;

        --set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.TRFACCTNO, 1, 4);

        --Set cac field giao dich
        --01   C   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'C';
        L_TXMSG.TXFIELDS('01').VALUE := REC2.LNSCHDID;

        --03   C   ACCTNO
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC2.ACCTNO;

        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.TRFACCTNO;

        --09   N   T0ODAMT
        L_TXMSG.TXFIELDS('09').DEFNAME := 'T0ODAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := 0;

        --45   N   PRINAMT
        L_TXMSG.TXFIELDS('45').DEFNAME := 'PRINAMT';
        L_TXMSG.TXFIELDS('45').TYPE := 'N';
        L_TXMSG.TXFIELDS('45').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML;
        --46   N   INTAMT
        L_TXMSG.TXFIELDS('46').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('46').TYPE := 'N';
        L_TXMSG.TXFIELDS('46').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;

        --47   N   ADVFEE
        L_TXMSG.TXFIELDS('47').DEFNAME := 'ADVFEE';
        L_TXMSG.TXFIELDS('47').TYPE := 'N';
        L_TXMSG.TXFIELDS('47').VALUE := ROUND(REC2.ADVPAYFEE, 0) *
                                        REC2.FINANCETYPE;

        --60   N   PT0PRINOVD
        L_TXMSG.TXFIELDS('60').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := L_T0PRINOVD;
        --61   N   PT0PRINDUE
        L_TXMSG.TXFIELDS('61').DEFNAME := 'PT0PRINDUE';
        L_TXMSG.TXFIELDS('61').TYPE := 'N';
        L_TXMSG.TXFIELDS('61').VALUE := L_T0PRINDUE;
        --62   N   PT0PRINNML
        L_TXMSG.TXFIELDS('62').DEFNAME := 'PT0PRINNML';
        L_TXMSG.TXFIELDS('62').TYPE := 'N';
        L_TXMSG.TXFIELDS('62').VALUE := L_T0PRINNML;
        --63   N   PPRINOVD
        L_TXMSG.TXFIELDS('63').DEFNAME := 'PPRINOVD';
        L_TXMSG.TXFIELDS('63').TYPE := 'N';
        L_TXMSG.TXFIELDS('63').VALUE := L_PRINOVD;
        --64   N   PPRINDUE
        L_TXMSG.TXFIELDS('64').DEFNAME := 'PPRINDUE';
        L_TXMSG.TXFIELDS('64').TYPE := 'N';
        L_TXMSG.TXFIELDS('64').VALUE := L_PRINDUE;
        --65   N   PPRINNML
        L_TXMSG.TXFIELDS('65').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('65').TYPE := 'N';
        L_TXMSG.TXFIELDS('65').VALUE := L_PRINNML;
        --70   N   PFEEOVD
        L_TXMSG.TXFIELDS('70').DEFNAME := 'PFEEOVD';
        L_TXMSG.TXFIELDS('70').TYPE := 'N';
        L_TXMSG.TXFIELDS('70').VALUE := L_FEEOVD;
        --71   N   PT0INTNMLOVD
        L_TXMSG.TXFIELDS('71').DEFNAME := 'PT0INTNMLOVD';
        L_TXMSG.TXFIELDS('71').TYPE := 'N';
        L_TXMSG.TXFIELDS('71').VALUE := L_T0INTNMLOVD;
        --72   N   PINTNMLOVD
        L_TXMSG.TXFIELDS('72').DEFNAME := 'PINTNMLOVD';
        L_TXMSG.TXFIELDS('72').TYPE := 'N';
        L_TXMSG.TXFIELDS('72').VALUE := L_INTNMLOVD;
        --52   N   PFEEINTNMLOVD
        L_TXMSG.TXFIELDS('52').DEFNAME := 'PFEEINTNMLOVD';
        L_TXMSG.TXFIELDS('52').TYPE := 'N';
        L_TXMSG.TXFIELDS('52').VALUE := L_FEEINTNMLOVD;
        --73   N   PT0INTOVDACR
        L_TXMSG.TXFIELDS('73').DEFNAME := 'PT0INTOVDACR';
        L_TXMSG.TXFIELDS('73').TYPE := 'N';
        L_TXMSG.TXFIELDS('73').VALUE := L_T0INTOVDACR;
        --74   N   PINTOVDACR
        L_TXMSG.TXFIELDS('74').DEFNAME := 'PINTOVDACR';
        L_TXMSG.TXFIELDS('74').TYPE := 'N';
        L_TXMSG.TXFIELDS('74').VALUE := L_INTOVDACR;
        --54   N   PFEEINTOVDACR
        L_TXMSG.TXFIELDS('54').DEFNAME := 'PFEEINTOVDACR';
        L_TXMSG.TXFIELDS('54').TYPE := 'N';
        L_TXMSG.TXFIELDS('54').VALUE := L_FEEINTOVDACR;
        --75   N   PFEEDUE
        L_TXMSG.TXFIELDS('75').DEFNAME := 'PFEEDUE';
        L_TXMSG.TXFIELDS('75').TYPE := 'N';
        L_TXMSG.TXFIELDS('75').VALUE := L_FEEDUE;
        --76   N   PT0INTDUE
        L_TXMSG.TXFIELDS('76').DEFNAME := 'PT0INTDUE';
        L_TXMSG.TXFIELDS('76').TYPE := 'N';
        L_TXMSG.TXFIELDS('76').VALUE := L_T0INTDUE;
        --77   N   PINTDUE
        L_TXMSG.TXFIELDS('77').DEFNAME := 'PINTDUE';
        L_TXMSG.TXFIELDS('77').TYPE := 'N';
        L_TXMSG.TXFIELDS('77').VALUE := L_INTDUE;
        --57   N   PFEEINTDUE
        L_TXMSG.TXFIELDS('57').DEFNAME := 'PFEEINTDUE';
        L_TXMSG.TXFIELDS('57').TYPE := 'N';
        L_TXMSG.TXFIELDS('57').VALUE := L_FEEINTDUE;
        --78   N   PFEE
        L_TXMSG.TXFIELDS('78').DEFNAME := 'PFEE';
        L_TXMSG.TXFIELDS('78').TYPE := 'N';
        L_TXMSG.TXFIELDS('78').VALUE := L_FEENML;
        --79   N   PT0INTNMLACR
        L_TXMSG.TXFIELDS('79').DEFNAME := 'PT0INTNMLACR';
        L_TXMSG.TXFIELDS('79').TYPE := 'N';
        L_TXMSG.TXFIELDS('79').VALUE := L_T0INTNMLACR;
        --80   N   PINTNMLACR
        L_TXMSG.TXFIELDS('80').DEFNAME := 'PINTNMLACR';
        L_TXMSG.TXFIELDS('80').TYPE := 'N';
        L_TXMSG.TXFIELDS('80').VALUE := L_INTNMLACR;
        --50   N   PFEEINTNMLACR
        L_TXMSG.TXFIELDS('50').DEFNAME := 'PFEEINTNMLACR';
        L_TXMSG.TXFIELDS('50').TYPE := 'N';
        L_TXMSG.TXFIELDS('50').VALUE := L_FEEINTNMLACR;
        --81   N   ADVPAYAMT
        L_TXMSG.TXFIELDS('81').DEFNAME := 'ADVPAYAMT';
        L_TXMSG.TXFIELDS('81').TYPE := 'N';
        L_TXMSG.TXFIELDS('81').VALUE := L_PRINNML;
        --82   N   FEEAMT
        L_TXMSG.TXFIELDS('82').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('82').TYPE := 'N';
        L_TXMSG.TXFIELDS('82').VALUE := ROUND(L_ADVPAYFEE, 0); --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
        --83   N   PAYAMT
        L_TXMSG.TXFIELDS('83').DEFNAME := 'PAYAMT';
        L_TXMSG.TXFIELDS('83').TYPE := 'N';
        L_TXMSG.TXFIELDS('83').VALUE := L_ADVPAYFEE + L_T0PRINOVD +
                                        L_T0PRINNML + L_T0PRINDUE +
                                        L_PRINOVD + L_PRINDUE + L_PRINNML +
                                        L_FEEOVD + L_T0INTNMLOVD +
                                        L_INTNMLOVD + L_FEEINTNMLOVD +
                                        L_FEEDUE + L_T0INTDUE + L_INTDUE +
                                        L_FEEINTDUE + L_T0INTOVDACR +
                                        L_INTOVDACR + L_FEEINTOVDACR +
                                        L_FEENML + L_T0INTNMLACR +
                                        L_INTNMLACR + L_FEEINTNMLACR;
        PLOG.DEBUG(PKGCTX,
                   'Balance check:' || L_TXMSG.TXFIELDS('83').VALUE);
        --20    N   FINANCETYPE
        L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := REC2.FINANCETYPE;

              --85    N   ACCRUALSAMT
        L_TXMSG.TXFIELDS('85').DEFNAME := 'ACCRUALSAMT';
        L_TXMSG.TXFIELDS('85').TYPE := 'N';
        L_TXMSG.TXFIELDS('85').VALUE := LEAST( REC2.ACCRUALSAMT,L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR)  ;

              --86    N   NOTACCRUALSAMT
        L_TXMSG.TXFIELDS('86').DEFNAME := 'NOTACCRUALSAMT';
        L_TXMSG.TXFIELDS('86').TYPE := 'N';
        L_TXMSG.TXFIELDS('86').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR - REC2.ACCRUALSAMT;


        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := L_DESC;

        BEGIN
          IF TXPKS_#5567.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 5567: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

        UPDATE LNPAIDALLOC
           SET STATUS = 'C'
         WHERE STATUS = 'P'
           AND AUTOID = REC2.AUTOID;

      END LOOP; -- rec2

    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNAutoPayment');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNAutoPayment');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNAUTOPAYMENT;

  ---------------------------------pr_LNAdvPayment------------------------------------------------
  PROCEDURE PR_LNADVPAYMENT(P_BCHMDL   VARCHAR,
                            P_DUEPAID  VARCHAR2,
                            P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG              TX.MSG_RECTYPE;
    L_CURRDATE           VARCHAR2(20);
    L_DESC               VARCHAR2(1000);
    L_EN_DESC            VARCHAR2(1000);
    L_ORGDESC            VARCHAR2(1000);
    L_EN_ORGDESC         VARCHAR2(1000);
    L_ERR_PARAM          VARCHAR2(300);
    L_T0PRINDUE          NUMBER(20, 0);
    L_T0PRINNML          NUMBER(20, 0);
    L_T0PRINOVD          NUMBER(20, 0);
    L_AVLAMT             NUMBER(20, 0);
    L_FEEOVD             NUMBER(20, 0);
    L_T0INTNMLOVD        NUMBER(20, 0);
    L_INTNMLOVD          NUMBER(20, 0);
    L_T0INTOVDACR        NUMBER(20, 0);
    L_INTOVDACR          NUMBER(20, 0);
    L_FEEDUE             NUMBER(20, 0);
    L_T0INTDUE           NUMBER(20, 0);
    L_INTDUE             NUMBER(20, 0);
    L_FEENML             NUMBER(20, 0);
    L_T0INTNMLACR        NUMBER(20, 0);
    L_INTNMLACR          NUMBER(20, 0);
    L_PRINOVD            NUMBER(20, 0);
    L_PRINDUE            NUMBER(20, 0);
    L_PRINNML            NUMBER(20, 0);
    L_FEEINTNMLOVD       NUMBER(20, 0);
    L_FEEINTNMLACR       NUMBER(20, 0);
    L_FEEINTOVDACR       NUMBER(20, 0);
    L_FEEINTDUE          NUMBER(20, 0);
    L_ADVPAYFEE          NUMBER(20, 0);
    L_SPLITRATE          NUMBER(20, 8);
    L_MAXDEBTCF          NUMBER(20, 0);
    L_MINLOANAUTOPAYMENT NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNAdvPayment');
    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = '5567';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5567';

    SELECT TO_NUMBER(VARVALUE)
      INTO L_MAXDEBTCF
      FROM SYSVAR
     WHERE VARNAME = 'MAXDEBTCF';
    SELECT DECODE (P_DUEPAID,'NML',TO_NUMBER(VARVALUE),'OVD',0)
      INTO L_MINLOANAUTOPAYMENT
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'LOANAUTOPAYAMT';

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT CI.ACCTNO TRFACCTNO,
                       ROUND(BALANCE + CASE
                               WHEN P_DUEPAID = 'OVD' THEN
                                NVL(AVLADVANCE, 0)
                               ELSE
                                0
                             END,
                             0) AVLBAL --Trong han thi khong tra no tren tien cho ve
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       /*( --select sum(advamt) avladvance,afacctno
                        SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV,*/
                         ( select afacctno, SUM (case when autoadv = 'Y' then depoamt-paidamt else least(depoamt-paidamt,0) end)  AVLADVANCE
                         from
                        (
                        select  sts.afacctno,
                            least(
                                greatest(sum(floor((sts.amt - exfeeamt)/(1+(sts.days*least(nvl(adpr.feerate,1000),ADVRATE)/100/360+sts.days*ADVBANKRATE/100/360)))),0),
                                greatest(sum(floor(sts.amt - exfeeamt)) - max (sts.ADVMINFEE) - max(sts.ADVMINFEEBANK),0)
                            ) depoamt,
                            max(case when sy.varvalue='0' then 0 else fn_getdealgrppaid(sts.afacctno) end) paidamt, autoadv
                        from v_advanceSchedule sts,
                            sysvar sy,
                            (select cf.afacctno, min(mst.feerate) feerate
                                from adprmfeecf cf, adprmfeemst mst
                                where cf.promotionid = mst.autoid and cf.status = 'A'
                                    and getcurrdate between cf.valdate and cf.expdate
                                group by cf.afacctno
                            ) adpr
                        where sy.grname = 'SYSTEM' and sy.varname ='HOSTATUS'
                            and sts.afacctno = adpr.afacctno(+)
                        group by sts.afacctno, autoadv)
                        group by afacctno) ADV,
                       V_GETBUYORDERINFO B,
                       V_GETSECMARGININFO SEC
                 WHERE CI.ACCTNO = AF.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND CI.ACCTNO = ADV.AFACCTNO(+)
                   AND CI.ACCTNO = B.AFACCTNO(+)
                   AND CI.ACCTNO = SEC.AFACCTNO(+)
                      --and round(BALANCE + (case when p_duepaid='OVD' then nvl(avladvance,0) else 0 end) ,0) > 0
                      --So tien tra no > so tien tra no toi thieu
                   AND ROUND(BALANCE + (CASE
                               WHEN P_DUEPAID = 'OVD' THEN
                                NVL(AVLADVANCE, 0)
                               ELSE
                                0
                             END),
                             0) > L_MINLOANAUTOPAYMENT
                   AND EXISTS
                 (SELECT 1
                          FROM LNMAST
                         WHERE FTYPE = 'AF'
                           AND TRFACCTNO = CI.ACCTNO
                           AND PRINNML + PRINOVD + INTNMLACR + INTDUE +
                               INTOVDACR + INTNMLOVD + FEEINTNMLACR +
                               FEEINTDUE + FEEINTOVDACR + FEEINTNMLOVD +
                               OPRINNML + OPRINOVD + OINTNMLACR + OINTDUE +
                               OINTOVDACR + OINTNMLOVD > 0)
                 ORDER BY CI.ACCTNO) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.TRFACCTNO);
      IF CSPKS_LNPROC.FN_GEN_PREPAID_PAYMENT(REC.TRFACCTNO,
                                             REC.AVLBAL,
                                             'R',
                                             P_DUEPAID,
                                             P_ERR_CODE) <>
         SYSTEMNUMS.C_SUCCESS THEN
        PLOG.SETENDSECTION(PKGCTX, 'pr_LNAdvPayment');
        RETURN;
      END IF;
      L_DESC := 'CL.' || L_ORGDESC;

      FOR REC2 IN (SELECT LN.TRFACCTNO,
                          LN.ACCTNO,
                          LS.AUTOID LNSCHDID,
                          LP.AUTOID,
                          MAX(CASE
                                WHEN LN.FTYPE = 'AF' THEN
                                 1
                                ELSE
                                 0
                              END) FINANCETYPE,
                          MAX(LN.ADVPAYFEE) ADVPAYFEE,
                          SUM(LP.AMT - LP.PAIDAMT) AVLAMT,

                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) T0INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) T0INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) T0PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) T0INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) T0INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINNML,

                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEOVD
                                ELSE
                                 0
                              END) FEEOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLOVD
                                ELSE
                                 0
                              END) FEEINTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTOVDACR
                                ELSE
                                 0
                              END) FEEINTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEDUE
                                ELSE
                                 0
                              END) FEEDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTDUE
                                ELSE
                                 0
                              END) FEEINTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEE
                                ELSE
                                 0
                              END) FEENML,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLACR
                                ELSE
                                 0
                              END) FEEINTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINNML
                       ,
                           SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.ACCRUALSAMT
                                ELSE
                                 0
                              END) ACCRUALSAMT

                     FROM LNMAST LN, LNPAIDALLOC LP, LNSCHD LS
                    WHERE LN.ACCTNO = LP.LNACCTNO
                      AND LP.LNSCHDID = LS.AUTOID
                      AND LN.TRFACCTNO = REC.TRFACCTNO
                      AND INSTR(LS.REFTYPE, 'P') > 0
                      AND LP.AMT > LP.PAIDAMT
                      AND LP.STATUS = 'P'
                    GROUP BY LN.TRFACCTNO, LN.ACCTNO, LS.AUTOID, LP.AUTOID
                    ORDER BY LP.AUTOID) LOOP
        -- rec2
        L_AVLAMT := REC2.AVLAMT;
        --So tien phai tra cho tung khoan
        -- Bao lanh
        --03.T0PRINOVD
        L_T0PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.T0PRINOVD), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINOVD;
        END IF;
        --05.T0PRINDUE
        L_T0PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.T0PRINDUE), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINDUE;
        END IF;

        --01.T0INTNMLOVD
        L_T0INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLOVD), 0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLOVD;
        END IF;
        --02.T0INTOVDACR
        L_T0INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTOVDACR := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.T0INTOVDACR), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTOVDACR;
        END IF;
        /*  --03.T0PRINOVD
        l_T0PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
        end if;*/
        --04.T0INTDUE
        L_T0INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTDUE :=  GREATEST( ROUND(LEAST(L_AVLAMT, REC2.T0INTDUE), 0),0);
          L_AVLAMT   := L_AVLAMT - L_T0INTDUE;
        END IF;
        /*--05.T0PRINDUE
        l_T0PRINDUE := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
        End If;*/
        --06.T0INTNMLACR
        L_T0INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLACR :=  GREATEST( ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLACR), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLACR;
        END IF;
        --07.T0PRINNML
        L_T0PRINNML := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINNML :=  GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0PRINNML), 0),0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINNML;
        END IF;
        /*  --07.T0PRINNML
                    l_T0PRINNML := 0;
                    If l_AvlAmt > 0 Then
                        l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
                        l_AvlAmt := l_AvlAmt - l_T0PRINNML;
                    End If;
        */
        -- CL
        --PhuongHT move len tren theo yeu cau cua VCBS
        -- Goc
        --18.PRINOVD
        L_PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.PRINOVD), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINOVD;
        END IF;
        --19.PRINDUE
        L_PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.PRINDUE), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINDUE;
        END IF;

        -- end of PhuongHT move
        -- Phi
        --08.FEEINTNMLOVD
        L_FEEINTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLOVD), 0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLOVD;
        END IF;
        --11.INTNMLOVD
        L_INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLOVD :=  GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTNMLOVD), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLOVD;
        END IF;
        --12.INTOVDACR
        L_INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTOVDACR := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.INTOVDACR), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTOVDACR;
        END IF;
        -- Lai Phi
        --22.FEEINTOVDACR
        L_FEEINTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTOVDACR :=  GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEINTOVDACR), 0),0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTOVDACR;
        END IF;

        --15.FEEOVD
        L_FEEOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEOVD), 0);
          L_AVLAMT := L_AVLAMT - L_FEEOVD;
        END IF;

        --13.INTDUE
        L_INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_INTDUE :=  GREATEST( ROUND(LEAST(L_AVLAMT, REC2.INTDUE), 0),0);
          L_AVLAMT := L_AVLAMT - L_INTDUE;
        END IF;
        --09.FEEINTDUE
        L_FEEINTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTDUE := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEINTDUE), 0),0);
          L_AVLAMT    := L_AVLAMT - L_FEEINTDUE;
        END IF;

        --16.FEEDUE
        L_FEEDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEDUE := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEDUE), 0),0);
          L_AVLAMT := L_AVLAMT - L_FEEDUE;
        END IF;

        --10.FEEINTNMLACR
        L_FEEINTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLACR :=  GREATEST(ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLACR), 0),0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLACR;
        END IF;

        -- Lai

        --14.INTNMLACR
        L_INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLACR :=  GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTNMLACR), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLACR;
        END IF;

        --17.FEENML
        L_FEENML := 0;
        IF L_AVLAMT > 0 THEN
          L_FEENML := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEENML), 0),0);
          L_AVLAMT := L_AVLAMT - L_FEENML;
        END IF;
        --PhuongHT move len tren theo yeu cau cua VCBS
        /* -- Goc
        --18.PRINOVD
        l_PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_PRINOVD;
        End If;
        --19.PRINDUE
        l_PRINDUE := 0;
        If l_AvlAmt > 0 Then
           l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
           l_AvlAmt := l_AvlAmt - l_PRINDUE;
        End If;
        --20.PRINNML
        l_PRINNML := 0;
        if rec2.PRINNML > 0 then
            If l_AvlAmt > 0 Then
                 l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                 l_AvlAmt := l_AvlAmt - l_PRINNML;
            End If;
        end if;*/
        -- end of PhuongHT move

        --20.PRINNML
        L_PRINNML := 0;
        IF REC2.PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_PRINNML := ROUND(LEAST(REC2.PRINNML,
                                     L_AVLAMT * 1 /
                                     (1 + REC2.ADVPAYFEE / 100)),
                               0);
            L_AVLAMT  := L_AVLAMT - L_PRINNML;
          END IF;
        END IF;
        --21.ADVPAYFEE
        L_ADVPAYFEE := 0;
        IF L_PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_ADVPAYFEE := ROUND(REC2.FINANCETYPE *
                                 ROUND(LEAST(L_AVLAMT,
                                             L_PRINNML * REC2.ADVPAYFEE / 100),
                                       0),
                                 0);
            L_AVLAMT    := L_AVLAMT - L_ADVPAYFEE;
          END IF;
        END IF;

        --set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.TRFACCTNO, 1, 4);

        --Set cac field giao dich
        --01   C   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'C';
        L_TXMSG.TXFIELDS('01').VALUE := REC2.LNSCHDID;

        --03   C   ACCTNO
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC2.ACCTNO;

        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.TRFACCTNO;

        --09   N   T0ODAMT
        L_TXMSG.TXFIELDS('09').DEFNAME := 'T0ODAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := 0;

        --45   N   PRINAMT
        L_TXMSG.TXFIELDS('45').DEFNAME := 'PRINAMT';
        L_TXMSG.TXFIELDS('45').TYPE := 'N';
        L_TXMSG.TXFIELDS('45').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML;
        --46   N   INTAMT
        L_TXMSG.TXFIELDS('46').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('46').TYPE := 'N';
        L_TXMSG.TXFIELDS('46').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;

        --47   N   ADVFEE
        L_TXMSG.TXFIELDS('47').DEFNAME := 'ADVFEE';
        L_TXMSG.TXFIELDS('47').TYPE := 'N';
        L_TXMSG.TXFIELDS('47').VALUE := ROUND(REC2.ADVPAYFEE, 0) *
                                        REC2.FINANCETYPE;

        --60   N   PT0PRINOVD
        L_TXMSG.TXFIELDS('60').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := L_T0PRINOVD;
        --61   N   PT0PRINDUE
        L_TXMSG.TXFIELDS('61').DEFNAME := 'PT0PRINDUE';
        L_TXMSG.TXFIELDS('61').TYPE := 'N';
        L_TXMSG.TXFIELDS('61').VALUE := L_T0PRINDUE;
        --62   N   PT0PRINNML
        L_TXMSG.TXFIELDS('62').DEFNAME := 'PT0PRINNML';
        L_TXMSG.TXFIELDS('62').TYPE := 'N';
        L_TXMSG.TXFIELDS('62').VALUE := L_T0PRINNML;
        --63   N   PPRINOVD
        L_TXMSG.TXFIELDS('63').DEFNAME := 'PPRINOVD';
        L_TXMSG.TXFIELDS('63').TYPE := 'N';
        L_TXMSG.TXFIELDS('63').VALUE := L_PRINOVD;
        --64   N   PPRINDUE
        L_TXMSG.TXFIELDS('64').DEFNAME := 'PPRINDUE';
        L_TXMSG.TXFIELDS('64').TYPE := 'N';
        L_TXMSG.TXFIELDS('64').VALUE := L_PRINDUE;
        --65   N   PPRINNML
        L_TXMSG.TXFIELDS('65').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('65').TYPE := 'N';
        L_TXMSG.TXFIELDS('65').VALUE := L_PRINNML;
        --70   N   PFEEOVD
        L_TXMSG.TXFIELDS('70').DEFNAME := 'PFEEOVD';
        L_TXMSG.TXFIELDS('70').TYPE := 'N';
        L_TXMSG.TXFIELDS('70').VALUE := L_FEEOVD;
        --71   N   PT0INTNMLOVD
        L_TXMSG.TXFIELDS('71').DEFNAME := 'PT0INTNMLOVD';
        L_TXMSG.TXFIELDS('71').TYPE := 'N';
        L_TXMSG.TXFIELDS('71').VALUE := L_T0INTNMLOVD;
        --72   N   PINTNMLOVD
        L_TXMSG.TXFIELDS('72').DEFNAME := 'PINTNMLOVD';
        L_TXMSG.TXFIELDS('72').TYPE := 'N';
        L_TXMSG.TXFIELDS('72').VALUE := L_INTNMLOVD;
        --52   N   PFEEINTNMLOVD
        L_TXMSG.TXFIELDS('52').DEFNAME := 'PFEEINTNMLOVD';
        L_TXMSG.TXFIELDS('52').TYPE := 'N';
        L_TXMSG.TXFIELDS('52').VALUE := L_FEEINTNMLOVD;
        --73   N   PT0INTOVDACR
        L_TXMSG.TXFIELDS('73').DEFNAME := 'PT0INTOVDACR';
        L_TXMSG.TXFIELDS('73').TYPE := 'N';
        L_TXMSG.TXFIELDS('73').VALUE := L_T0INTOVDACR;
        --74   N   PINTOVDACR
        L_TXMSG.TXFIELDS('74').DEFNAME := 'PINTOVDACR';
        L_TXMSG.TXFIELDS('74').TYPE := 'N';
        L_TXMSG.TXFIELDS('74').VALUE := L_INTOVDACR;
        --54   N   PFEEINTOVDACR
        L_TXMSG.TXFIELDS('54').DEFNAME := 'PFEEINTOVDACR';
        L_TXMSG.TXFIELDS('54').TYPE := 'N';
        L_TXMSG.TXFIELDS('54').VALUE := L_FEEINTOVDACR;
        --75   N   PFEEDUE
        L_TXMSG.TXFIELDS('75').DEFNAME := 'PFEEDUE';
        L_TXMSG.TXFIELDS('75').TYPE := 'N';
        L_TXMSG.TXFIELDS('75').VALUE := L_FEEDUE;
        --76   N   PT0INTDUE
        L_TXMSG.TXFIELDS('76').DEFNAME := 'PT0INTDUE';
        L_TXMSG.TXFIELDS('76').TYPE := 'N';
        L_TXMSG.TXFIELDS('76').VALUE := L_T0INTDUE;
        --77   N   PINTDUE
        L_TXMSG.TXFIELDS('77').DEFNAME := 'PINTDUE';
        L_TXMSG.TXFIELDS('77').TYPE := 'N';
        L_TXMSG.TXFIELDS('77').VALUE := L_INTDUE;
        --57   N   PFEEINTDUE
        L_TXMSG.TXFIELDS('57').DEFNAME := 'PFEEINTDUE';
        L_TXMSG.TXFIELDS('57').TYPE := 'N';
        L_TXMSG.TXFIELDS('57').VALUE := L_FEEINTDUE;
        --78   N   PFEE
        L_TXMSG.TXFIELDS('78').DEFNAME := 'PFEE';
        L_TXMSG.TXFIELDS('78').TYPE := 'N';
        L_TXMSG.TXFIELDS('78').VALUE := L_FEENML;
        --79   N   PT0INTNMLACR
        L_TXMSG.TXFIELDS('79').DEFNAME := 'PT0INTNMLACR';
        L_TXMSG.TXFIELDS('79').TYPE := 'N';
        L_TXMSG.TXFIELDS('79').VALUE := L_T0INTNMLACR;
        --80   N   PINTNMLACR
        L_TXMSG.TXFIELDS('80').DEFNAME := 'PINTNMLACR';
        L_TXMSG.TXFIELDS('80').TYPE := 'N';
        L_TXMSG.TXFIELDS('80').VALUE := L_INTNMLACR;
        --50   N   PFEEINTNMLACR
        L_TXMSG.TXFIELDS('50').DEFNAME := 'PFEEINTNMLACR';
        L_TXMSG.TXFIELDS('50').TYPE := 'N';
        L_TXMSG.TXFIELDS('50').VALUE := L_FEEINTNMLACR;
        --81   N   ADVPAYAMT
        L_TXMSG.TXFIELDS('81').DEFNAME := 'ADVPAYAMT';
        L_TXMSG.TXFIELDS('81').TYPE := 'N';
        L_TXMSG.TXFIELDS('81').VALUE := L_PRINNML;
        --82   N   FEEAMT
        L_TXMSG.TXFIELDS('82').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('82').TYPE := 'N';
        L_TXMSG.TXFIELDS('82').VALUE := ROUND(L_ADVPAYFEE, 0); --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
        --83   N   PAYAMT
        L_TXMSG.TXFIELDS('83').DEFNAME := 'PAYAMT';
        L_TXMSG.TXFIELDS('83').TYPE := 'N';
        L_TXMSG.TXFIELDS('83').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML + L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;
        PLOG.DEBUG(PKGCTX,
                   'Balance check:' || L_TXMSG.TXFIELDS('83').VALUE);
        --20    N   FINANCETYPE
        L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := REC2.FINANCETYPE;

               --85    N   ACCRUALSAMT
        L_TXMSG.TXFIELDS('85').DEFNAME := 'ACCRUALSAMT';
        L_TXMSG.TXFIELDS('85').TYPE := 'N';
        L_TXMSG.TXFIELDS('85').VALUE := LEAST( REC2.ACCRUALSAMT,L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR)  ;

              --86    N   NOTACCRUALSAMT
        L_TXMSG.TXFIELDS('86').DEFNAME := 'NOTACCRUALSAMT';
        L_TXMSG.TXFIELDS('86').TYPE := 'N';
        L_TXMSG.TXFIELDS('86').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR - REC2.ACCRUALSAMT;

        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := L_DESC;

        BEGIN
          IF TXPKS_#5567.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 5567: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

        UPDATE LNPAIDALLOC
           SET STATUS = 'C'
         WHERE STATUS = 'P'
           AND AUTOID = REC2.AUTOID;
      END LOOP; -- rec2

    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNAdvPayment');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNAdvPayment');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNADVPAYMENT;

  ---------------------------------pr_LNPayment4TA0------------------------------------------------
  PROCEDURE pr_LNPayment4TA0(P_BCHMDL   VARCHAR,
                            P_DUEPAID  VARCHAR2,
                            P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG              TX.MSG_RECTYPE;
    L_CURRDATE           VARCHAR2(20);
    L_DESC               VARCHAR2(1000);
    L_EN_DESC            VARCHAR2(1000);
    L_ORGDESC            VARCHAR2(1000);
    L_EN_ORGDESC         VARCHAR2(1000);
    L_ERR_PARAM          VARCHAR2(300);
    L_T0PRINDUE          NUMBER(20, 0);
    L_T0PRINNML          NUMBER(20, 0);
    L_T0PRINOVD          NUMBER(20, 0);
    L_AVLAMT             NUMBER(20, 0);
    L_FEEOVD             NUMBER(20, 0);
    L_T0INTNMLOVD        NUMBER(20, 0);
    L_INTNMLOVD          NUMBER(20, 0);
    L_T0INTOVDACR        NUMBER(20, 0);
    L_INTOVDACR          NUMBER(20, 0);
    L_FEEDUE             NUMBER(20, 0);
    L_T0INTDUE           NUMBER(20, 0);
    L_INTDUE             NUMBER(20, 0);
    L_FEENML             NUMBER(20, 0);
    L_T0INTNMLACR        NUMBER(20, 0);
    L_INTNMLACR          NUMBER(20, 0);
    L_PRINOVD            NUMBER(20, 0);
    L_PRINDUE            NUMBER(20, 0);
    L_PRINNML            NUMBER(20, 0);
    L_FEEINTNMLOVD       NUMBER(20, 0);
    L_FEEINTNMLACR       NUMBER(20, 0);
    L_FEEINTOVDACR       NUMBER(20, 0);
    L_FEEINTDUE          NUMBER(20, 0);
    L_ADVPAYFEE          NUMBER(20, 0);
    L_SPLITRATE          NUMBER(20, 8);
    L_MAXDEBTCF          NUMBER(20, 0);
    L_MINLOANAUTOPAYMENT NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNPayment4TA0');
    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = '5567';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5567';

    SELECT TO_NUMBER(VARVALUE)
      INTO L_MAXDEBTCF
      FROM SYSVAR
     WHERE VARNAME = 'MAXDEBTCF';
    SELECT DECODE (P_DUEPAID,'NML',TO_NUMBER(VARVALUE),'OVD',0)
      INTO L_MINLOANAUTOPAYMENT
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'LOANAUTOPAYAMT';

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (
    SELECT CI.ACCTNO TRFACCTNO,   ROUND(BALANCE+ NVL(AVLADVANCE,0)) AVLBAL
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       ( --select sum(advamt) avladvance,afacctno
                        SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV,
--                       V_GETBUYORDERINFO B,
                       V_GETSECMARGININFO SEC,
                    ( SELECT ROUND( SUM( (LNS.INTNMLACR+LNS.INTDUE+LNS.INTOVD+LNS.INTOVDPRIN+LNS.NML+LNS.OVD )
                        + (NML+OVD)*LNS.RATE2/(100*360))) LNAMT, LN.TRFACCTNO FROM LNMAST LN , LNSCHD LNS
                        WHERE LN.ACCTNO = LNS.ACCTNO
                        GROUP BY LN.TRFACCTNO)ln
                 WHERE CI.ACCTNO = AF.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND CI.ACCTNO = ADV.AFACCTNO(+)
                   AND CI.ACCTNO = LN.TRFACCTNO
                   AND CI.ACCTNO = SEC.AFACCTNO(+)
                   AND SEC.SEASS=0
                   AND LN.LNAMT >0
                  AND LN.LNAMT-  ROUND(BALANCE+ NVL(AVLADVANCE,0))>0
                  AND ROUND(BALANCE + NVL(AVLADVANCE,0))  > L_MINLOANAUTOPAYMENT

             ORDER BY CI.ACCTNO
    ) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.TRFACCTNO);
      IF CSPKS_LNPROC.FN_GEN_PREPAID_PAYMENT(REC.TRFACCTNO,
                                             REC.AVLBAL,
                                             'R',
                                             P_DUEPAID,
                                             P_ERR_CODE) <>
         SYSTEMNUMS.C_SUCCESS THEN
        PLOG.SETENDSECTION(PKGCTX, 'pr_LNPayment4TA0');
        RETURN;
      END IF;
      L_DESC := 'CL.' || L_ORGDESC;

      FOR REC2 IN (SELECT LN.TRFACCTNO,
                          LN.ACCTNO,
                          LS.AUTOID LNSCHDID,
                          LP.AUTOID,
                          MAX(CASE
                                WHEN LN.FTYPE = 'AF' THEN
                                 1
                                ELSE
                                 0
                              END) FINANCETYPE,
                          MAX(LN.ADVPAYFEE) ADVPAYFEE,
                          SUM(LP.AMT - LP.PAIDAMT) AVLAMT,

                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) T0INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) T0INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) T0PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) T0INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) T0INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINNML,

                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEOVD
                                ELSE
                                 0
                              END) FEEOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLOVD
                                ELSE
                                 0
                              END) FEEINTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTOVDACR
                                ELSE
                                 0
                              END) FEEINTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEDUE
                                ELSE
                                 0
                              END) FEEDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTDUE
                                ELSE
                                 0
                              END) FEEINTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEE
                                ELSE
                                 0
                              END) FEENML,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLACR
                                ELSE
                                 0
                              END) FEEINTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINNML,
                           SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.ACCRUALSAMT
                                ELSE
                                 0
                              END) ACCRUALSAMT

                     FROM LNMAST LN, LNPAIDALLOC LP, LNSCHD LS
                    WHERE LN.ACCTNO = LP.LNACCTNO
                      AND LP.LNSCHDID = LS.AUTOID
                      AND LN.TRFACCTNO = REC.TRFACCTNO
                      AND INSTR(LS.REFTYPE, 'P') > 0
                      AND LP.AMT > LP.PAIDAMT
                      AND LP.STATUS = 'P'
                    GROUP BY LN.TRFACCTNO, LN.ACCTNO, LS.AUTOID, LP.AUTOID
                    ORDER BY LP.AUTOID) LOOP
        -- rec2
        L_AVLAMT := REC2.AVLAMT;
        --So tien phai tra cho tung khoan
        -- Bao lanh
        --03.T0PRINOVD
        L_T0PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.T0PRINOVD), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINOVD;
        END IF;
        --05.T0PRINDUE
        L_T0PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.T0PRINDUE), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINDUE;
        END IF;

        --01.T0INTNMLOVD
        L_T0INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLOVD), 0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLOVD;
        END IF;
        --02.T0INTOVDACR
        L_T0INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTOVDACR := ROUND(LEAST(L_AVLAMT, REC2.T0INTOVDACR), 0);
          L_AVLAMT      := L_AVLAMT - L_T0INTOVDACR;
        END IF;
        /*  --03.T0PRINOVD
        l_T0PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
        end if;*/
        --04.T0INTDUE
        L_T0INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTDUE := ROUND(LEAST(L_AVLAMT, REC2.T0INTDUE), 0);
          L_AVLAMT   := L_AVLAMT - L_T0INTDUE;
        END IF;
        /*--05.T0PRINDUE
        l_T0PRINDUE := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
        End If;*/
        --06.T0INTNMLACR
        L_T0INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLACR := ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLACR), 0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLACR;
        END IF;
        --07.T0PRINNML
        L_T0PRINNML := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINNML := ROUND(LEAST(L_AVLAMT, REC2.T0PRINNML), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINNML;
        END IF;
        /*  --07.T0PRINNML
                    l_T0PRINNML := 0;
                    If l_AvlAmt > 0 Then
                        l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
                        l_AvlAmt := l_AvlAmt - l_T0PRINNML;
                    End If;
        */
        -- CL
        --PhuongHT move len tren theo yeu cau cua VCBS
        -- Goc
        --18.PRINOVD
        L_PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.PRINOVD), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINOVD;
        END IF;
        --19.PRINDUE
        L_PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.PRINDUE), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINDUE;
        END IF;

        -- end of PhuongHT move
        -- Phi
        --08.FEEINTNMLOVD
        L_FEEINTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLOVD), 0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLOVD;
        END IF;
        --11.INTNMLOVD
        L_INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.INTNMLOVD), 0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLOVD;
        END IF;
        --12.INTOVDACR
        L_INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTOVDACR := ROUND(LEAST(L_AVLAMT, REC2.INTOVDACR), 0);
          L_AVLAMT    := L_AVLAMT - L_INTOVDACR;
        END IF;
        -- Lai Phi
        --22.FEEINTOVDACR
        L_FEEINTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTOVDACR := ROUND(LEAST(L_AVLAMT, REC2.FEEINTOVDACR), 0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTOVDACR;
        END IF;

        --15.FEEOVD
        L_FEEOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEOVD), 0);
          L_AVLAMT := L_AVLAMT - L_FEEOVD;
        END IF;

        --13.INTDUE
        L_INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_INTDUE := ROUND(LEAST(L_AVLAMT, REC2.INTDUE), 0);
          L_AVLAMT := L_AVLAMT - L_INTDUE;
        END IF;
        --09.FEEINTDUE
        L_FEEINTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTDUE := ROUND(LEAST(L_AVLAMT, REC2.FEEINTDUE), 0);
          L_AVLAMT    := L_AVLAMT - L_FEEINTDUE;
        END IF;

        --16.FEEDUE
        L_FEEDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEDUE := ROUND(LEAST(L_AVLAMT, REC2.FEEDUE), 0);
          L_AVLAMT := L_AVLAMT - L_FEEDUE;
        END IF;

        --10.FEEINTNMLACR
        L_FEEINTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLACR := ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLACR), 0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLACR;
        END IF;

        -- Lai

        --14.INTNMLACR
        L_INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLACR := ROUND(LEAST(L_AVLAMT, REC2.INTNMLACR), 0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLACR;
        END IF;

        --17.FEENML
        L_FEENML := 0;
        IF L_AVLAMT > 0 THEN
          L_FEENML := ROUND(LEAST(L_AVLAMT, REC2.FEENML), 0);
          L_AVLAMT := L_AVLAMT - L_FEENML;
        END IF;
        --PhuongHT move len tren theo yeu cau cua VCBS
        /* -- Goc
        --18.PRINOVD
        l_PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_PRINOVD;
        End If;
        --19.PRINDUE
        l_PRINDUE := 0;
        If l_AvlAmt > 0 Then
           l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
           l_AvlAmt := l_AvlAmt - l_PRINDUE;
        End If;
        --20.PRINNML
        l_PRINNML := 0;
        if rec2.PRINNML > 0 then
            If l_AvlAmt > 0 Then
                 l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                 l_AvlAmt := l_AvlAmt - l_PRINNML;
            End If;
        end if;*/
        -- end of PhuongHT move

        --20.PRINNML
        L_PRINNML := 0;
        IF REC2.PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_PRINNML := ROUND(LEAST(REC2.PRINNML,
                                     L_AVLAMT * 1 /
                                     (1 + REC2.ADVPAYFEE / 100)),
                               0);
            L_AVLAMT  := L_AVLAMT - L_PRINNML;
          END IF;
        END IF;
        --21.ADVPAYFEE
        L_ADVPAYFEE := 0;
        IF L_PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_ADVPAYFEE := ROUND(REC2.FINANCETYPE *
                                 ROUND(LEAST(L_AVLAMT,
                                             L_PRINNML * REC2.ADVPAYFEE / 100),
                                       0),
                                 0);
            L_AVLAMT    := L_AVLAMT - L_ADVPAYFEE;
          END IF;
        END IF;

        --set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.TRFACCTNO, 1, 4);

        --Set cac field giao dich
        --01   C   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'C';
        L_TXMSG.TXFIELDS('01').VALUE := REC2.LNSCHDID;

        --03   C   ACCTNO
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC2.ACCTNO;

        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.TRFACCTNO;

        --09   N   T0ODAMT
        L_TXMSG.TXFIELDS('09').DEFNAME := 'T0ODAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := 0;

        --45   N   PRINAMT
        L_TXMSG.TXFIELDS('45').DEFNAME := 'PRINAMT';
        L_TXMSG.TXFIELDS('45').TYPE := 'N';
        L_TXMSG.TXFIELDS('45').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML;
        --46   N   INTAMT
        L_TXMSG.TXFIELDS('46').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('46').TYPE := 'N';
        L_TXMSG.TXFIELDS('46').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;

        --47   N   ADVFEE
        L_TXMSG.TXFIELDS('47').DEFNAME := 'ADVFEE';
        L_TXMSG.TXFIELDS('47').TYPE := 'N';
        L_TXMSG.TXFIELDS('47').VALUE := ROUND(REC2.ADVPAYFEE, 0) *
                                        REC2.FINANCETYPE;

        --60   N   PT0PRINOVD
        L_TXMSG.TXFIELDS('60').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := L_T0PRINOVD;
        --61   N   PT0PRINDUE
        L_TXMSG.TXFIELDS('61').DEFNAME := 'PT0PRINDUE';
        L_TXMSG.TXFIELDS('61').TYPE := 'N';
        L_TXMSG.TXFIELDS('61').VALUE := L_T0PRINDUE;
        --62   N   PT0PRINNML
        L_TXMSG.TXFIELDS('62').DEFNAME := 'PT0PRINNML';
        L_TXMSG.TXFIELDS('62').TYPE := 'N';
        L_TXMSG.TXFIELDS('62').VALUE := L_T0PRINNML;
        --63   N   PPRINOVD
        L_TXMSG.TXFIELDS('63').DEFNAME := 'PPRINOVD';
        L_TXMSG.TXFIELDS('63').TYPE := 'N';
        L_TXMSG.TXFIELDS('63').VALUE := L_PRINOVD;
        --64   N   PPRINDUE
        L_TXMSG.TXFIELDS('64').DEFNAME := 'PPRINDUE';
        L_TXMSG.TXFIELDS('64').TYPE := 'N';
        L_TXMSG.TXFIELDS('64').VALUE := L_PRINDUE;
        --65   N   PPRINNML
        L_TXMSG.TXFIELDS('65').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('65').TYPE := 'N';
        L_TXMSG.TXFIELDS('65').VALUE := L_PRINNML;
        --70   N   PFEEOVD
        L_TXMSG.TXFIELDS('70').DEFNAME := 'PFEEOVD';
        L_TXMSG.TXFIELDS('70').TYPE := 'N';
        L_TXMSG.TXFIELDS('70').VALUE := L_FEEOVD;
        --71   N   PT0INTNMLOVD
        L_TXMSG.TXFIELDS('71').DEFNAME := 'PT0INTNMLOVD';
        L_TXMSG.TXFIELDS('71').TYPE := 'N';
        L_TXMSG.TXFIELDS('71').VALUE := L_T0INTNMLOVD;
        --72   N   PINTNMLOVD
        L_TXMSG.TXFIELDS('72').DEFNAME := 'PINTNMLOVD';
        L_TXMSG.TXFIELDS('72').TYPE := 'N';
        L_TXMSG.TXFIELDS('72').VALUE := L_INTNMLOVD;
        --52   N   PFEEINTNMLOVD
        L_TXMSG.TXFIELDS('52').DEFNAME := 'PFEEINTNMLOVD';
        L_TXMSG.TXFIELDS('52').TYPE := 'N';
        L_TXMSG.TXFIELDS('52').VALUE := L_FEEINTNMLOVD;
        --73   N   PT0INTOVDACR
        L_TXMSG.TXFIELDS('73').DEFNAME := 'PT0INTOVDACR';
        L_TXMSG.TXFIELDS('73').TYPE := 'N';
        L_TXMSG.TXFIELDS('73').VALUE := L_T0INTOVDACR;
        --74   N   PINTOVDACR
        L_TXMSG.TXFIELDS('74').DEFNAME := 'PINTOVDACR';
        L_TXMSG.TXFIELDS('74').TYPE := 'N';
        L_TXMSG.TXFIELDS('74').VALUE := L_INTOVDACR;
        --54   N   PFEEINTOVDACR
        L_TXMSG.TXFIELDS('54').DEFNAME := 'PFEEINTOVDACR';
        L_TXMSG.TXFIELDS('54').TYPE := 'N';
        L_TXMSG.TXFIELDS('54').VALUE := L_FEEINTOVDACR;
        --75   N   PFEEDUE
        L_TXMSG.TXFIELDS('75').DEFNAME := 'PFEEDUE';
        L_TXMSG.TXFIELDS('75').TYPE := 'N';
        L_TXMSG.TXFIELDS('75').VALUE := L_FEEDUE;
        --76   N   PT0INTDUE
        L_TXMSG.TXFIELDS('76').DEFNAME := 'PT0INTDUE';
        L_TXMSG.TXFIELDS('76').TYPE := 'N';
        L_TXMSG.TXFIELDS('76').VALUE := L_T0INTDUE;
        --77   N   PINTDUE
        L_TXMSG.TXFIELDS('77').DEFNAME := 'PINTDUE';
        L_TXMSG.TXFIELDS('77').TYPE := 'N';
        L_TXMSG.TXFIELDS('77').VALUE := L_INTDUE;
        --57   N   PFEEINTDUE
        L_TXMSG.TXFIELDS('57').DEFNAME := 'PFEEINTDUE';
        L_TXMSG.TXFIELDS('57').TYPE := 'N';
        L_TXMSG.TXFIELDS('57').VALUE := L_FEEINTDUE;
        --78   N   PFEE
        L_TXMSG.TXFIELDS('78').DEFNAME := 'PFEE';
        L_TXMSG.TXFIELDS('78').TYPE := 'N';
        L_TXMSG.TXFIELDS('78').VALUE := L_FEENML;
        --79   N   PT0INTNMLACR
        L_TXMSG.TXFIELDS('79').DEFNAME := 'PT0INTNMLACR';
        L_TXMSG.TXFIELDS('79').TYPE := 'N';
        L_TXMSG.TXFIELDS('79').VALUE := L_T0INTNMLACR;
        --80   N   PINTNMLACR
        L_TXMSG.TXFIELDS('80').DEFNAME := 'PINTNMLACR';
        L_TXMSG.TXFIELDS('80').TYPE := 'N';
        L_TXMSG.TXFIELDS('80').VALUE := L_INTNMLACR;
        --50   N   PFEEINTNMLACR
        L_TXMSG.TXFIELDS('50').DEFNAME := 'PFEEINTNMLACR';
        L_TXMSG.TXFIELDS('50').TYPE := 'N';
        L_TXMSG.TXFIELDS('50').VALUE := L_FEEINTNMLACR;
        --81   N   ADVPAYAMT
        L_TXMSG.TXFIELDS('81').DEFNAME := 'ADVPAYAMT';
        L_TXMSG.TXFIELDS('81').TYPE := 'N';
        L_TXMSG.TXFIELDS('81').VALUE := L_PRINNML;
        --82   N   FEEAMT
        L_TXMSG.TXFIELDS('82').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('82').TYPE := 'N';
        L_TXMSG.TXFIELDS('82').VALUE := ROUND(L_ADVPAYFEE, 0); --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
        --83   N   PAYAMT
        L_TXMSG.TXFIELDS('83').DEFNAME := 'PAYAMT';
        L_TXMSG.TXFIELDS('83').TYPE := 'N';
        L_TXMSG.TXFIELDS('83').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML + L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;
        PLOG.DEBUG(PKGCTX,
                   'Balance check:' || L_TXMSG.TXFIELDS('83').VALUE);
        --20    N   FINANCETYPE
        L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := REC2.FINANCETYPE;

               --85    N   ACCRUALSAMT
        L_TXMSG.TXFIELDS('85').DEFNAME := 'ACCRUALSAMT';
        L_TXMSG.TXFIELDS('85').TYPE := 'N';
        L_TXMSG.TXFIELDS('85').VALUE := LEAST( REC2.ACCRUALSAMT,L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR)  ;

              --86    N   NOTACCRUALSAMT
        L_TXMSG.TXFIELDS('86').DEFNAME := 'NOTACCRUALSAMT';
        L_TXMSG.TXFIELDS('86').TYPE := 'N';
        L_TXMSG.TXFIELDS('86').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR - REC2.ACCRUALSAMT;

        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := L_DESC;

        BEGIN
          IF TXPKS_#5567.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 5567: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

        UPDATE LNPAIDALLOC
           SET STATUS = 'C'
         WHERE STATUS = 'P'
           AND AUTOID = REC2.AUTOID;
      END LOOP; -- rec2

    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNPayment4TA0');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNPayment4TA0');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END pr_LNPayment4TA0;

  /*
  -- Tinh toan so tien giai ngan Margin &GIAI ngan Margin.
  -- Tinh toan so tien giai ngan bao lanh + bao lanh T2 ky quy &GIAI ngan
  */
  ---------------------------------pr_LNAutoDrawndown------------------------------------------------
  PROCEDURE PR_LNAUTODRAWNDOWN(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG             TX.MSG_RECTYPE;
    V_CURRDATE          DATE;
    L_LOGDATE           VARCHAR2(10);
    V_STRDESC           VARCHAR2(1000);
    V_STREN_DESC        VARCHAR2(1000);
    V_DBLMRODAMT        NUMBER(20, 0);
    L_DBLBUYAMT         NUMBER(20, 0);
    L_ERR_PARAM         VARCHAR2(300);
    L_CUSTODYCD_PREFIX  VARCHAR2(3);
    L_LNACCTNO          VARCHAR2(30);
    L_REMAIN_MRAMOUNT   NUMBER(20, 4);
    L_EXEC_MRAMOUNT     NUMBER(20, 4);
    L_EXEC_MRAMOUNT_WDR NUMBER(20, 4);
    L_RRTYPE            VARCHAR2(1);
    L_CUSTBANK          VARCHAR2(30);
    L_CIACCTNO          VARCHAR2(30);
    L_AVLAMT            NUMBER(24, 4);
    L_MRCRLIMITMAX      NUMBER(24, 4);
    L_AFAVLAMT          NUMBER(24, 4);
    L_AFUSEDAMT         NUMBER(24, 4);
    L_CHKSYSCTRL        VARCHAR2(1);
    L_MRIRATIO          NUMBER(10, 4);
    L_MAXDEBT           NUMBER(20, 0);
    L_COUNT             NUMBER;
    L_T0ODAMT           NUMBER(20, 0);
    L_MARGINTYPE        VARCHAR2(1);
    L_MR_MASTER_AMOUNT  NUMBER(20, 4);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNAutoDrawndown');
     PR_EVENTSLOG(L_LOGDATE || ' >> PR_LNAUTODRAWNDOWN ',0,'>>>>> BEGIN' );
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '5566';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT), VARVALUE
      INTO V_CURRDATE, L_LOGDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := V_CURRDATE;
    L_TXMSG.BUSDATE   := V_CURRDATE;
    L_TXMSG.TLTXCD    := '5566';

    SELECT VARVALUE
      INTO L_CUSTODYCD_PREFIX
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'COMPANYCD';
    PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown', 0, '> Begin Loop!');
    FOR REC IN (SELECT CI.ACCTNO      CIACCTNO,
                       CI.BALANCE,
                       CI.T0ODAMT,
                       AFT.LNTYPE,
                       AFT.T0LNTYPE,
                       1              FINANCETYPE,
                       CF.MARGINALLOW
                  FROM CIMAST CI,
                       CFMAST CF,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT
                 WHERE CF.CUSTID = AF.CUSTID
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND CI.STATUS = 'A'
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND CF.CUSTATCOM = 'Y'
                   AND CI.BALANCE < 0
                   AND MRT.MRTYPE IN ('S', 'T') -- Giai ngan tai khoan Margin
                   AND AFT.ISTRFBUY = 'N' -- Chi giai ngan Margin tai khoan ko phai tra cham T3.
                 ORDER BY CI.ACCTNO) LOOP
      -- rec
      /*
      -- Giai ngan Margin:
      */
      V_DBLMRODAMT := GREATEST(-REC.BALANCE, 0);
      PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                   0,
                   '    >> Loop for CIACCTNO:' || REC.CIACCTNO);
      PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                   0,
                   '    >> Gia tri can giai ngan v_dblMRODAMT:' ||
                   V_DBLMRODAMT);

      -- Margin Drawndown
      L_LNACCTNO := '';
      IF ROUND(V_DBLMRODAMT, 0) > 0 THEN
        L_REMAIN_MRAMOUNT   := GREATEST(ROUND(V_DBLMRODAMT, 0), 0);
        L_EXEC_MRAMOUNT     := 0;
        L_EXEC_MRAMOUNT_WDR := 0;
        PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                     0,
                     '        >>> Into rec_ln Loop');
        FOR REC_LN IN (SELECT *
                         FROM (SELECT LNT.*,
                                      NVL(CF.MNEMONIC, CF.SHORTNAME) CFMNEMONIC,
                                      AF.CUSTID CFCUSTID,
                                      999 ODRNUM,
                                      'N' ISSUBRESOURCE
                                 FROM AFMAST AF,
                                      AFTYPE AFT,
                                      LNTYPE LNT,
                                      CFMAST CF
                                WHERE AF.ACTYPE = AFT.ACTYPE
                                  AND LNT.CUSTBANK = CF.CUSTID(+)
                                  AND AF.ACCTNO = REC.CIACCTNO
                                  AND AFT.LNTYPE = LNT.ACTYPE
                                  AND LNT.STATUS <> 'N')
                        ORDER BY CASE
                                   WHEN ISSUBRESOURCE = 'Y' THEN
                                    0
                                   ELSE
                                    1
                                 END,
                                 ODRNUM) LOOP
          -- rec_ln

          SELECT LN.ACCTNO, LN.RRTYPE, LN.CUSTBANK, LN.CIACCTNO
            INTO L_LNACCTNO, L_RRTYPE, L_CUSTBANK, L_CIACCTNO
            FROM LNMAST LN
           WHERE LN.ACTYPE = REC_LN.ACTYPE
             AND LN.TRFACCTNO = REC.CIACCTNO
             AND LN.STATUS NOT IN ('P', 'R', 'C')
             AND LN.FTYPE = 'AF';

          PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                       0,
                       '            >>>> Inside Loop rec_ln.actype: ' ||
                       REC_LN.ACTYPE || '. >> rec_ln.IsSubResource:' ||
                       REC_LN.ISSUBRESOURCE || '. >> Nguon giai ngan:' ||
                       L_RRTYPE);

          L_EXEC_MRAMOUNT := L_REMAIN_MRAMOUNT;

          IF L_RRTYPE = 'B' THEN
            -- Neu nguon cho vay la nguon Ngan Hang: Xet min gioi han cua Toan He Thong va cua tung Khach Hang
            BEGIN
              L_AVLAMT := CSPKS_CFPROC.FN_GETAVLCFLIMIT(L_CUSTBANK,
                                                        REC_LN.CFCUSTID,
                                                        'DFMR');
            EXCEPTION
              WHEN OTHERS THEN
                L_AVLAMT := 0;
            END;

            PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                         0,
                         '                >>>>> Han muc ngan hang:' ||
                         '. >> Ma NH:' || REC_LN.ISSUBRESOURCE ||
                         '. >> Ma KH duoc giai ngan:' || REC_LN.CFCUSTID ||
                         '. >> Han muc:' || L_AVLAMT);

            -- Khong check han muc vay Margin nua.
            --l_exec_MRamount:= least(l_avlamt, l_exec_MRamount, l_mrcrlimitmax);
            L_EXEC_MRAMOUNT := LEAST(L_AVLAMT, L_EXEC_MRAMOUNT);

            PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                         0,
                         '                >>>>> Co the giai ngan voi han muc ngan hang:' ||
                         L_EXEC_MRAMOUNT);

          ELSIF L_RRTYPE = 'O' THEN
            -- Neu nguon cho vay la nguon CI: Tam thoi khong check han muc
            --l_exec_MRamount:= l_exec_MRamount;
            PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                         0,
                         '                >>>>> Co the giai ngan voi han muc CI:' ||
                         L_EXEC_MRAMOUNT);
          ELSIF L_RRTYPE = 'C' THEN
            -- Neu nguon cho vay la nguon Cong Ty: Kiem tra tren han muc vay cua khach hang MRCRLIMITMAX
            -- BSC, khong check han muc khac hang nua. Vi ko giai ngan Bao Lanh
            -- Neu tuan thu. lay min voi maxdebt
            PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                         0,
                         '                >>>>> Co phai loai hinh tuan thu:' ||
                         REC_LN.CHKSYSCTRL);
            IF REC_LN.CHKSYSCTRL = 'Y' THEN
              SELECT NVL(GREATEST(TO_NUMBER(CSPKS_SYSTEM.FN_GET_SYSVAR('MARGIN',
                                                                       'MAXDEBTCF')) -
                                  SUM(CI.DFODAMT) -
                                  SUM(GREATEST(NVL(USEDPRIN, 0), 0)),
                                  0),
                         0)
                INTO L_MRCRLIMITMAX
                FROM AFMAST AF,
                     CIMAST CI,
                     (SELECT TRFACCTNO,
                             SUM(PRINNML + PRINOVD + INTNMLACR + INTDUE +
                                 INTOVDACR + INTNMLOVD + FEEINTNMLACR +
                                 FEEINTDUE + FEEINTOVDACR + FEEINTNMLOVD) USEDPRIN
                        FROM LNMAST LN, LNTYPE LNT
                       WHERE LN.ACTYPE = LNT.ACTYPE
                         AND LN.RRTYPE = 'C'
                         AND LNT.CHKSYSCTRL = 'Y'
                       GROUP BY LN.TRFACCTNO) LCF
               WHERE EXISTS (SELECT 1
                        FROM AFMAST
                       WHERE AFMAST.ACCTNO = REC.CIACCTNO
                         AND AFMAST.ACCTNO = AF.ACCTNO)
                 AND AF.ACCTNO = CI.ACCTNO
                 AND AF.ACCTNO = LCF.TRFACCTNO(+);

              L_EXEC_MRAMOUNT := LEAST(L_MRCRLIMITMAX, L_EXEC_MRAMOUNT);
            END IF;
          END IF;

          L_EXEC_MRAMOUNT := GREATEST(ROUND(L_EXEC_MRAMOUNT, 0), 0);
          PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                       0,
                       '                >>>>> Co the giai ngan:' ||
                       L_EXEC_MRAMOUNT);

          --GianhVG them phan code
          L_EXEC_MRAMOUNT_WDR := 0;
          IF REC_LN.PRINFRQ > 0 THEN
            --Co mien lai x ngay dau thi phai xu ly tach rieng phan phat vay do rut tien tren thang du.
            BEGIN
              SELECT SUM(STS.AMT) + SUM(OD.FEEACR) AMT
                INTO L_DBLBUYAMT
                FROM STSCHD STS, ODMAST OD
               WHERE STS.ORGORDERID = OD.ORDERID
                 AND STS.CLEARDATE = V_CURRDATE
                 AND STS.STATUS = 'C'
                 AND STS.DELTD <> 'Y'
                 AND STS.AFACCTNO = REC.CIACCTNO
                 AND STS.DUETYPE = 'SM'
               GROUP BY STS.AFACCTNO;
            EXCEPTION
              WHEN OTHERS THEN
                L_DBLBUYAMT := 0;
            END;
            L_EXEC_MRAMOUNT_WDR := GREATEST(L_EXEC_MRAMOUNT - L_DBLBUYAMT,
                                            0);
            L_EXEC_MRAMOUNT     := L_EXEC_MRAMOUNT - L_EXEC_MRAMOUNT_WDR;

          END IF;

          --Giai ngan Margin do rut tien
          IF L_EXEC_MRAMOUNT_WDR > 0 THEN
            PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                         0,
                         '                >>>>> Giai ngan ro rut tien:' ||
                         L_EXEC_MRAMOUNT_WDR);
            SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                   LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO L_TXMSG.TXNUM
              FROM DUAL;
            L_TXMSG.BRID := SUBSTR(REC.CIACCTNO, 1, 4);

            SELECT 'Giai ngan rut tien ' ||
                   DECODE(REC_LN.RRTYPE,
                          'C',
                          CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                     'COMPANYSHORTNAME'),
                          'B',
                          NVL(REC_LN.CFMNEMONIC, ''),
                          '') || '/CL/' ||
                   TO_CHAR(V_CURRDATE, 'DD.MM.RRRR') || '/' ||
                   TO_CHAR(L_EXEC_MRAMOUNT_WDR) || ' VND'
              INTO V_STRDESC
              FROM DUAL;
            --Set cac field giao dich
            --03   C   ACCTNO
            L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
            L_TXMSG.TXFIELDS('03').TYPE := 'C';
            L_TXMSG.TXFIELDS('03').VALUE := L_LNACCTNO;

            --05   C   ACCTNO
            L_TXMSG.TXFIELDS('05').DEFNAME := 'ACCTNO';
            L_TXMSG.TXFIELDS('05').TYPE := 'C';
            L_TXMSG.TXFIELDS('05').VALUE := REC.CIACCTNO;

            --10   N   MRODAMT
            L_TXMSG.TXFIELDS('10').DEFNAME := 'MRODAMT';
            L_TXMSG.TXFIELDS('10').TYPE := 'N';
            L_TXMSG.TXFIELDS('10').VALUE := L_EXEC_MRAMOUNT_WDR;
            --11   N   T0ODAMT
            L_TXMSG.TXFIELDS('11').DEFNAME := 'T0ODAMT';
            L_TXMSG.TXFIELDS('11').TYPE := 'N';
            L_TXMSG.TXFIELDS('11').VALUE := 0;
            --20    N   FINANCETYPE
            L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
            L_TXMSG.TXFIELDS('20').TYPE := 'N';
            L_TXMSG.TXFIELDS('20').VALUE := REC.FINANCETYPE;
            --30   C   DESC
            L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
            L_TXMSG.TXFIELDS('30').TYPE := 'C';
            L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
            --90   N   ISCIDRAWNDOWN
            L_TXMSG.TXFIELDS('90').DEFNAME := 'ISCIDRAWNDOWN';
            L_TXMSG.TXFIELDS('90').TYPE := 'N';
            L_TXMSG.TXFIELDS('90').VALUE := CASE
                                              WHEN L_RRTYPE = 'O' THEN
                                               1
                                              ELSE
                                               0
                                            END;
            --91   N   CIACCTNO
            L_TXMSG.TXFIELDS('91').DEFNAME := 'CIACCTNO';
            L_TXMSG.TXFIELDS('91').TYPE := 'N';
            L_TXMSG.TXFIELDS('91').VALUE := CASE
                                              WHEN L_RRTYPE = 'O' THEN
                                               L_CIACCTNO
                                              ELSE
                                               ''
                                            END;

            BEGIN
              IF TXPKS_#5566.FN_BATCHTXPROCESS(L_TXMSG,
                                               P_ERR_CODE,
                                               L_ERR_PARAM) <>
                 SYSTEMNUMS.C_SUCCESS THEN
                PLOG.DEBUG(PKGCTX, 'got error 5566: ' || P_ERR_CODE);
                ROLLBACK;
                RETURN;
              END IF;
            END;
            L_REMAIN_MRAMOUNT := L_REMAIN_MRAMOUNT - L_EXEC_MRAMOUNT_WDR;
            --Cap nhat lai ngay duedate de khong mien lai muc 1 khi giai ngan
            FOR REC_UD IN (SELECT MAX(AUTOID) AUTOID
                             FROM LNSCHD
                            WHERE ACCTNO = L_LNACCTNO
                              AND REFTYPE = 'P'
                              AND RLSDATE = V_CURRDATE --Lay ra dong vua phat vay
                           ) LOOP
              PR_EVENTSLOG(L_LOGDATE || ' >> pr_LNAutoDrawndown',
                           0,
                           '                >>>>> Giai ngan ro rut tien ma giai ngan:' ||
                           REC_UD.AUTOID);
              UPDATE LNSCHD
                 SET DUEDATE = RLSDATE
               WHERE AUTOID = REC_UD.AUTOID;
            END LOOP;
          END IF;
          --End GianhVG Them phan code

          --Giai ngan Margin lenh
          IF L_EXEC_MRAMOUNT > 0 THEN
            SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                   LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO L_TXMSG.TXNUM
              FROM DUAL;
            L_TXMSG.BRID := SUBSTR(REC.CIACCTNO, 1, 4);

            SELECT 'Giai ngan ' || DECODE(REC_LN.RRTYPE,
                                          'C',
                                          CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                                     'COMPANYSHORTNAME'),
                                          'B',
                                          NVL(REC_LN.CFMNEMONIC, ''),
                                          '') || '/CL/' ||
                   TO_CHAR(V_CURRDATE, 'DD.MM.RRRR') || '/' ||
                   TO_CHAR(L_EXEC_MRAMOUNT) || ' VND'
              INTO V_STRDESC
              FROM DUAL;
            --Set cac field giao dich
            --03   C   ACCTNO
            L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
            L_TXMSG.TXFIELDS('03').TYPE := 'C';
            L_TXMSG.TXFIELDS('03').VALUE := L_LNACCTNO;

            --05   C   ACCTNO
            L_TXMSG.TXFIELDS('05').DEFNAME := 'ACCTNO';
            L_TXMSG.TXFIELDS('05').TYPE := 'C';
            L_TXMSG.TXFIELDS('05').VALUE := REC.CIACCTNO;

            --10   N   MRODAMT
            L_TXMSG.TXFIELDS('10').DEFNAME := 'MRODAMT';
            L_TXMSG.TXFIELDS('10').TYPE := 'N';
            L_TXMSG.TXFIELDS('10').VALUE := L_EXEC_MRAMOUNT;
            --11   N   T0ODAMT
            L_TXMSG.TXFIELDS('11').DEFNAME := 'T0ODAMT';
            L_TXMSG.TXFIELDS('11').TYPE := 'N';
            L_TXMSG.TXFIELDS('11').VALUE := 0;
            --20    N   FINANCETYPE
            L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
            L_TXMSG.TXFIELDS('20').TYPE := 'N';
            L_TXMSG.TXFIELDS('20').VALUE := REC.FINANCETYPE;
            --30   C   DESC
            L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
            L_TXMSG.TXFIELDS('30').TYPE := 'C';
            L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
            --90   N   ISCIDRAWNDOWN
            L_TXMSG.TXFIELDS('90').DEFNAME := 'ISCIDRAWNDOWN';
            L_TXMSG.TXFIELDS('90').TYPE := 'N';
            L_TXMSG.TXFIELDS('90').VALUE := CASE
                                              WHEN L_RRTYPE = 'O' THEN
                                               1
                                              ELSE
                                               0
                                            END;
            --91   N   CIACCTNO
            L_TXMSG.TXFIELDS('91').DEFNAME := 'CIACCTNO';
            L_TXMSG.TXFIELDS('91').TYPE := 'N';
            L_TXMSG.TXFIELDS('91').VALUE := CASE
                                              WHEN L_RRTYPE = 'O' THEN
                                               L_CIACCTNO
                                              ELSE
                                               ''
                                            END;

            BEGIN
              IF TXPKS_#5566.FN_BATCHTXPROCESS(L_TXMSG,
                                               P_ERR_CODE,
                                               L_ERR_PARAM) <>
                 SYSTEMNUMS.C_SUCCESS THEN
                PLOG.DEBUG(PKGCTX, 'got error 5566: ' || P_ERR_CODE);
                ROLLBACK;
                RETURN;
              END IF;
            END;
            L_REMAIN_MRAMOUNT := L_REMAIN_MRAMOUNT - L_EXEC_MRAMOUNT;
          END IF;
          EXIT WHEN L_REMAIN_MRAMOUNT <= 0;
        END LOOP; -- rec_ln

      END IF;

    END LOOP;

    /*
    -- Giai ngan T0
    */

    TXPKS_BATCH.PR_T0OVERDRAFTCALCULATE(P_ERR_CODE);

    IF P_ERR_CODE <> SYSTEMNUMS.C_SUCCESS THEN
      RETURN;
    END IF;

    FOR REC IN (SELECT CI.ACCTNO    CIACCTNO,
                       CI.BALANCE,
                       CI.T0ODAMT,
                       AFT.LNTYPE,
                       AFT.T0LNTYPE,
                       1            FINANCETYPE
                  FROM CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT
                 WHERE CF.CUSTID = AF.CUSTID
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND CI.STATUS = 'A'
                   AND CF.CUSTATCOM = 'Y'
                   AND CI.T0ODAMT > 0
                 ORDER BY CI.ACCTNO) LOOP
      -- rec

      SELECT T0ODAMT
        INTO L_T0ODAMT
        FROM CIMAST
       WHERE ACCTNO = REC.CIACCTNO;
      --1. T0 Drawndown
      L_LNACCTNO := '';
      IF ROUND(L_T0ODAMT, 0) > 0 THEN
        SELECT LN.ACCTNO, LN.RRTYPE, LN.CUSTBANK, LN.CIACCTNO
          INTO L_LNACCTNO, L_RRTYPE, L_CUSTBANK, L_CIACCTNO
          FROM LNMAST LN
         WHERE LN.ACTYPE = REC.T0LNTYPE
           AND LN.TRFACCTNO = REC.CIACCTNO
           AND LN.STATUS NOT IN ('P', 'R', 'C')
           AND LN.FTYPE = 'AF';

        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.CIACCTNO, 1, 4);

        V_STRDESC := 'Giai ngan ' ||
                     CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                'COMPANYSHORTNAME') ||
                     '/BL/' || TO_CHAR(V_CURRDATE, 'DD.MM.RRRR') || '/' ||
                     TO_CHAR(L_T0ODAMT) || ' VND';

        --Set cac field giao dich
        --03   C   ACCTNO
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := L_LNACCTNO;

        --05   C   ACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.CIACCTNO;

        --10   N   MRODAMT
        L_TXMSG.TXFIELDS('10').DEFNAME := 'MRODAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := 0;
        --11   N   T0ODAMT
        L_TXMSG.TXFIELDS('11').DEFNAME := 'T0ODAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := ROUND(L_T0ODAMT, 0);
        --20    N   FINANCETYPE
        L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := REC.FINANCETYPE;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
        --90   N   ISCIDRAWNDOWN
        L_TXMSG.TXFIELDS('90').DEFNAME := 'ISCIDRAWNDOWN';
        L_TXMSG.TXFIELDS('90').TYPE := 'N';
        L_TXMSG.TXFIELDS('90').VALUE := CASE
                                          WHEN L_RRTYPE = 'O' THEN
                                           1
                                          ELSE
                                           0
                                        END;
        --91   N   CIACCTNO
        L_TXMSG.TXFIELDS('91').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('91').TYPE := 'N';
        L_TXMSG.TXFIELDS('91').VALUE := CASE
                                          WHEN L_RRTYPE = 'O' THEN
                                           L_CIACCTNO
                                          ELSE
                                           ''
                                        END;

        BEGIN
          IF TXPKS_#5566.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 5566: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;

    END LOOP; -- rec


    --Luu lai thong tin xuat bao cao giai ngan
    IF NOT FN_GEN_CL_DRAWNDOWN_REPORT THEN
      P_ERR_CODE := '-540229';
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNAutoDrawndown');
      RETURN;
    END IF;

    -- update cimast set odamt
    --Reset CIMAST.ODAMT = 0;
    UPDATE CIMAST SET ODAMT = 0;


    FOR REC_AF IN (SELECT TRFACCTNO,
                          ROUND(SUM(PRINNML + PRINOVD + INTNMLACR +
                                    INTOVDACR + INTNMLOVD + INTDUE +
                                    INTPREPAID + OPRINNML + OPRINOVD +
                                    OINTNMLACR + OINTOVDACR + OINTNMLOVD +
                                    OINTDUE + OINTPREPAID + FEE + FEEDUE +
                                    FEEOVD + FEEINTNMLACR + FEEINTOVDACR +
                                    FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID)) ODAMT
                     FROM LNMAST
                    WHERE FTYPE = 'AF'
                    GROUP BY TRFACCTNO
                    ORDER BY TRFACCTNO) LOOP
      -- rec_af
      UPDATE CIMAST
         SET ODAMT = REC_AF.ODAMT
       WHERE ACCTNO = REC_AF.TRFACCTNO;
    END LOOP; -- rec_af



    UPDATE CIMAST SET DUEAMT = 0;
    FOR REC IN (SELECT M.TRFACCTNO, SUM(NML + INTDUE + FEEINTDUE) NML
                  FROM (SELECT ACCTNO, SUM(NML) NML
                          FROM LNSCHD
                         WHERE OVERDUEDATE =
                               TO_DATE(CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                                  'CURRDATE'),
                                       'DD/MM/YYYY')
                           AND NML + INTDUE + FEEINTDUE > 0
                           AND REFTYPE IN ('P')
                         GROUP BY ACCTNO) S,
                       LNMAST M
                 WHERE S.ACCTNO = M.ACCTNO
                   AND M.STATUS NOT IN ('P', 'R', 'C')
                   AND M.FTYPE <> 'DF'
                 GROUP BY M.TRFACCTNO
                 ORDER BY TRFACCTNO) LOOP
      UPDATE CIMAST
         SET DUEAMT = ROUND(DUEAMT + REC.NML, 0)
       WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- update cimast set ovamt
    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    FOR REC_AF IN (SELECT TRFACCTNO,
                          ROUND(SUM(PRINOVD + INTOVDACR + INTNMLOVD +
                                    INTPREPAID + OPRINNML + OPRINOVD +
                                    OINTNMLACR + OINTOVDACR + OINTNMLOVD +
                                    OINTDUE + OINTPREPAID + FEE + FEEDUE +
                                    FEEOVD + FEEINTOVDACR + FEEINTNMLOVD +
                                    FEEINTPREPAID)) OVAMT
                     FROM LNMAST
                    WHERE FTYPE = 'AF'
                    GROUP BY TRFACCTNO
                    ORDER BY TRFACCTNO) LOOP
      -- rec_af
      UPDATE CIMAST
         SET OVAMT = REC_AF.OVAMT
       WHERE ACCTNO = REC_AF.TRFACCTNO;
    END LOOP; -- rec_af
    --- cap nhat lai trang thai call va trigger truoc khi tinh lai gia MR (DungNH 27/08/2015)
    update afmast
    set callday = 0
    where exists (select 1 from v_getsecmarginratio v where v.marginrate >= V.MRCRATE and afmast.acctno = v.afacctno);

    update afmast
        set triggerdate = null
        where triggerdate is not null AND (afmast.CALLDAY < afmast.K1DAYS or afmast.CALLDAY=0) AND
            exists (select 1 from v_getsecmarginratio v
                        where v.marginrate >= v.mrlrate and v.ovamt < 1 and afmast.acctno = v.afacctno)
         ;
      --- END DungNH 27/08/2015

    -- Cap nhat gia tinh tai san sau giai ngan.
    -- Ducnv FF Gateway
UPDATE SECURITIES_INFO
       SET DFREFPRICE         = AVGPRICE,
           MARGINCALLPRICE    = AVGPRICE,
           MARGINREFCALLPRICE = AVGPRICE
     WHERE NVL(AVGPRICE, 0) > 0;



    -- HaiLT backup
    INSERT INTO ODMAPEXTHIST
      SELECT * FROM ODMAPEXT;
    DELETE FROM ODMAPEXT;
    --GianhVG Log Report MR3008

    CSPKS_LOGPROC.PR_LOG_MR3008('AF-MID');



    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNAutoDrawndown');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, 'rows:' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNAutoDrawndown');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNAUTODRAWNDOWN;

  ---------------------------------pr_AutoBlockadeAccount------------------------------------------------
  PROCEDURE PR_AUTOBLOCKADEACCOUNT(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG       TX.MSG_RECTYPE;
    V_STRCURRDATE VARCHAR2(20);
    V_STRDESC     VARCHAR2(1000);
    V_STREN_DESC  VARCHAR2(1000);
    L_ERR_PARAM   VARCHAR2(300);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_AutoBlockadeAccount');
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '0045';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '0039';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (SELECT SUM(OPRINNML + OPRINOVD),
                       AF.ACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.IDCODE,
                       CF.IDDATE,
                       CF.IDPLACE
                  FROM LNMAST LN, AFMAST AF, CFMAST CF
                 WHERE LN.TRFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.STATUS <> 'B'
                 GROUP BY AF.ACCTNO,
                          CF.CUSTODYCD,
                          CF.FULLNAME,
                          CF.IDCODE,
                          CF.IDDATE,
                          CF.IDPLACE
                HAVING SUM(OPRINNML + OPRINOVD) > 0) LOOP
      --Set txnum
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.ACCTNO);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

      /*88  0045    CUSTODYCD
      03  0045    ACCTNO
      04  0045    FULLNAME
      05  0045    IDCODE
      06  0045    IDDATE
      07  0045    IDPLACE
      30  0045    DESC    */
      --Set cac field giao dich
      --88   CUSTODYCD       C
      L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('88').TYPE := 'C';
      L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;

      --03   ACCTNO       C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --04   FULLNAME   C
      L_TXMSG.TXFIELDS('04').DEFNAME := 'FULLNAME';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.FULLNAME;

      --05   IDCODE    C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'IDCODE';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.IDCODE;

      --06   ISDEBTT0    C
      L_TXMSG.TXFIELDS('06').DEFNAME := 'ISDEBTT0';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := 'Y';

      --07   STATUS   C
      L_TXMSG.TXFIELDS('07').DEFNAME := 'STATUS';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := 'B';

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#0039.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 0039: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_AutoBlockadeAccount');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_AutoBlockadeAccount');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_AUTOBLOCKADEACCOUNT;

  ---------------------------------pr_LNMovePrinToOverdue------------------------------------------------
  PROCEDURE PR_LNMOVEPRINTOOVERDUE(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG       TX.MSG_RECTYPE;
    V_STRCURRDATE VARCHAR2(20);
    V_STRDESC     VARCHAR2(1000);
    V_STREN_DESC  VARCHAR2(1000);
    L_ERR_PARAM   VARCHAR2(300);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNMovePrinToOverdue');
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '5564';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5564';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (SELECT ROWNUM INDEXROW,
                       LNMAST.ACCTNO,
                       LNMAST.TRFACCTNO,
                       SCHD.AUTOID,
                       SCHD.DUESTS,
                       SCHD.NML,
                       SCHD.REFTYPE,
                       (CASE
                         WHEN LNMAST.FTYPE = 'AF' THEN
                          1
                         ELSE
                          0
                       END) FINANCETYPE,
                       (CASE
                         WHEN SCHD.OVERDUEDATE > SCHD.RLSDATE THEN
                          1
                         ELSE
                          0
                       END) ISFROMINDUE
                  FROM LNMAST, LNSCHD SCHD
                 WHERE LNMAST.ACCTNO = SCHD.ACCTNO
                   AND LNMAST.STATUS NOT IN ('P', 'R', 'C')
                   AND SCHD.NML > 0
                   AND SCHD.OVERDUEDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND SCHD.REFTYPE IN ('P', 'GP')
                 ORDER BY ACCTNO) LOOP
      --Set txnum
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.ACCTNO);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

      --Set cac field giao dich
      --03   ACCTNO       C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --02   CIACCTNO       C
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TRFACCTNO;

      --05   AUTOID   N
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('05').TYPE := 'N';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AUTOID;

      --06   C   DUESTS
      L_TXMSG.TXFIELDS('06').DEFNAME := 'DUESTS';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := 'O';

      --07   C   OLDDUESTS
      L_TXMSG.TXFIELDS('07').DEFNAME := 'OLDDUESTS';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DUESTS;

      --10   N   NML
      L_TXMSG.TXFIELDS('10').DEFNAME := 'NML';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND((CASE
                                              WHEN REC.REFTYPE = 'P' THEN
                                               REC.NML
                                              ELSE
                                               0
                                            END),
                                            0);
      --11   N   ONML
      L_TXMSG.TXFIELDS('11').DEFNAME := 'ONML';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND((CASE
                                              WHEN REC.REFTYPE = 'GP' THEN
                                               REC.NML
                                              ELSE
                                               0
                                            END),
                                            0);
      --20    N   FINANCETYPE
      L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := REC.FINANCETYPE;
      --21    N   ISFROMINDUE
      L_TXMSG.TXFIELDS('21').DEFNAME := 'ISFROMINDUE';
      L_TXMSG.TXFIELDS('21').TYPE := 'N';
      L_TXMSG.TXFIELDS('21').VALUE := REC.ISFROMINDUE;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#5564.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 5564: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNMovePrinToOverdue');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNMovePrinToOverdue');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNMOVEPRINTOOVERDUE;
  ---------------------------------pr_LNMoveIntToOverdue------------------------------------------------
  PROCEDURE PR_LNMOVEINTTOOVERDUE(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG       TX.MSG_RECTYPE;
    V_STRCURRDATE VARCHAR2(20);
    V_STRDESC     VARCHAR2(1000);
    V_STREN_DESC  VARCHAR2(1000);
    L_ERR_PARAM   VARCHAR2(300);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNMoveIntToOverdue');
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '5565';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5565';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (SELECT LNMAST.ACCTNO,
                       LNMAST.TRFACCTNO,
                       SCHD.AUTOID,
                       SCHD.REFTYPE,
                       SCHD.DUESTS,
                       SCHD.NML,
                       SCHD.OVD,
                       SCHD.NMLFEEINT,
                       (CASE
                         WHEN LNMAST.FTYPE = 'AF' THEN
                          1
                         ELSE
                          0
                       END) FINANCETYPE
                  FROM LNMAST, LNSCHD SCHD
                 WHERE LNMAST.ACCTNO = SCHD.ACCTNO
                   AND LNMAST.STATUS NOT IN ('P', 'R', 'C')
                   AND SCHD.NML > 0
                   AND SCHD.OVERDUEDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND SCHD.REFTYPE IN ('I', 'GI', 'F')
                 ORDER BY ACCTNO) LOOP
      IF REC.REFTYPE = 'I' THEN
        INSERT INTO LNSCHDLOG
          (AUTOID,
           TXNUM,
           TXDATE,
           NML,
           OVD,
           PAID,
           INTNMLACR,
           FEE,
           INTDUE,
           INTOVD,
           INTOVDPRIN,
           FEEDUE,
           FEEOVD,
           INTPAID,
           FEEPAID,
           FEEINTDUE,
           FEEINTOVD)
          SELECT AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 0,
                 0,
                 0,
                 0,
                 0,
                 - (INTDUE),
                 INTDUE,
                 0,
                 0,
                 0,
                 0,
                 0,
                 - (FEEINTDUE),
                 FEEINTDUE
            FROM LNSCHD
           WHERE ACCTNO = REC.ACCTNO
             AND INTOVDDUEDATE <=
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
             AND (INTDUE > 0 OR FEEINTDUE > 0)
             AND REFTYPE = 'P';
        UPDATE LNSCHD
           SET INTOVD       = ROUND(INTOVD + INTDUE, 0),
               INTDUE       = 0,
               FEEINTNMLOVD = ROUND(FEEINTNMLOVD + FEEINTDUE, 0),
               FEEINTDUE    = 0
         WHERE ACCTNO = REC.ACCTNO
           AND INTOVDDUEDATE <=
               TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
           AND (INTDUE > 0 OR FEEINTDUE > 0)
           AND REFTYPE = 'P';
      ELSIF REC.REFTYPE = 'GI' THEN
        INSERT INTO LNSCHDLOG
          (AUTOID,
           TXNUM,
           TXDATE,
           NML,
           OVD,
           PAID,
           INTNMLACR,
           FEE,
           INTDUE,
           INTOVD,
           INTOVDPRIN,
           FEEDUE,
           FEEOVD,
           INTPAID,
           FEEPAID)
          SELECT AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 0,
                 0,
                 0,
                 0,
                 0,
                 -INTDUE,
                 INTDUE,
                 0,
                 0,
                 0,
                 0,
                 0
            FROM LNSCHD
           WHERE ACCTNO = REC.ACCTNO
             AND INTOVDDUEDATE <=
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
             AND INTDUE > 0
             AND REFTYPE = 'GP';
        UPDATE LNSCHD
           SET INTOVD = ROUND(INTOVD + INTDUE, 0), INTDUE = 0
         WHERE ACCTNO = REC.ACCTNO
           AND INTOVDDUEDATE <=
               TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
           AND INTDUE > 0
           AND REFTYPE = 'GP';
      ELSIF REC.REFTYPE = 'F' THEN
        INSERT INTO LNSCHDLOG
          (AUTOID,
           TXNUM,
           TXDATE,
           NML,
           OVD,
           PAID,
           INTNMLACR,
           FEE,
           INTDUE,
           INTOVD,
           INTOVDPRIN,
           FEEDUE,
           FEEOVD,
           INTPAID,
           FEEPAID)
          SELECT AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 -FEEDUE,
                 FEEDUE,
                 0,
                 0
            FROM LNSCHD
           WHERE ACCTNO = REC.ACCTNO
             AND INTOVDDUEDATE <=
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
             AND INTDUE > 0
             AND REFTYPE = 'P';
        UPDATE LNSCHD
           SET FEEOVD = ROUND(FEEOVD + FEEDUE, 0), FEEDUE = 0
         WHERE ACCTNO = REC.ACCTNO
           AND INTOVDDUEDATE <=
               TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
           AND FEEDUE > 0
           AND REFTYPE = 'P';
      END IF;

      --Set txnum
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.ACCTNO);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

      --Set cac field giao dich
      --03   ACCTNO       C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --04   CIACCTNO       C
      L_TXMSG.TXFIELDS('04').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.TRFACCTNO;

      --05   AUTOID   N
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('05').TYPE := 'N';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AUTOID;

      --06   C   DUESTS
      L_TXMSG.TXFIELDS('06').DEFNAME := 'DUESTS';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := 'O';

      --07   C   OLDDUESTS
      L_TXMSG.TXFIELDS('07').DEFNAME := 'OLDDUESTS';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DUESTS;

      --10   N   NML
      L_TXMSG.TXFIELDS('10').DEFNAME := 'NML';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND((CASE
                                              WHEN REC.REFTYPE = 'I' THEN
                                               REC.NML
                                              ELSE
                                               0
                                            END),
                                            0);
      --09   N   FEENML
      L_TXMSG.TXFIELDS('09').DEFNAME := 'FEENML';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := ROUND((CASE
                                              WHEN REC.REFTYPE = 'I' THEN
                                               REC.NMLFEEINT
                                              ELSE
                                               0
                                            END),
                                            0);
      --11   N   FEE
      L_TXMSG.TXFIELDS('11').DEFNAME := 'FEE';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND((CASE
                                              WHEN REC.REFTYPE = 'F' THEN
                                               REC.NML
                                              ELSE
                                               0
                                            END),
                                            0);
      --12   N   ONML
      L_TXMSG.TXFIELDS('12').DEFNAME := 'ONML';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := ROUND((CASE
                                              WHEN REC.REFTYPE = 'GI' THEN
                                               REC.NML
                                              ELSE
                                               0
                                            END),
                                            0);
      --20    N   FINANCETYPE
      L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := REC.FINANCETYPE;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#5565.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 5565: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;

    /*--Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af*/

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNMoveIntToOverdue');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNMoveIntToOverdue');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNMOVEINTTOOVERDUE;

  ---------------------------------pr_LNCalMaturityPrincipal------------------------------------------------
  PROCEDURE PR_LNCALMATURITYPRINCIPAL(P_ERR_CODE OUT VARCHAR2) IS
    V_INDATE VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNCalMaturityPrincipal');
    V_INDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');

    UPDATE CIMAST SET DUEAMT = 0;
    FOR REC IN (SELECT M.TRFACCTNO, SUM(NML + FEEINTDUE) NML
                  FROM (SELECT ACCTNO, SUM(NML) NML
                          FROM LNSCHD
                         WHERE OVERDUEDATE = TO_DATE(V_INDATE, 'DD/MM/YYYY')
                           AND NML > 0
                           AND REFTYPE IN ('P')
                         GROUP BY ACCTNO) S,
                       LNMAST M
                 WHERE S.ACCTNO = M.ACCTNO
                   AND M.STATUS NOT IN ('P', 'R', 'C')
                   AND M.FTYPE <> 'DF'
                 GROUP BY M.TRFACCTNO
                 ORDER BY TRFACCTNO) LOOP
      UPDATE CIMAST
         SET DUEAMT = ROUND(DUEAMT + REC.NML, 0)
       WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNCalMaturityPrincipal');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNCalMaturityPrincipal');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNCALMATURITYPRINCIPAL;

  ---------------------------------pr_LNAccrueInterest------------------------------------------------
  PROCEDURE PR_LNACCRUEINTEREST(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG          TX.MSG_RECTYPE;
    V_STRNEXTDATE    VARCHAR2(100);
    V_STRCURRDATE    VARCHAR2(100);
    V_STRDESC        VARCHAR2(1000);
    V_STRENDESC      VARCHAR2(1000);
    V_INTDUENO       NUMBER(20, 0);
    V_INTNEXTDAY     NUMBER(20, 0);
    V_INTCURDAY      NUMBER(20, 0);
    V_INTINTDAY      NUMBER(20, 0);
    V_INTOINTDAY     NUMBER(20, 0);
    V_INTDAYSINMONTH NUMBER(20, 0);
    V_DBLMRINTAMT    NUMBER(20, 4);
    V_DBLMRFEEAMT    NUMBER(20, 4);
    V_DBLMRFEEINTAMT NUMBER(20, 4);
    V_DBLT0ODAMT     NUMBER(20, 4);
    V_BLNDUE         BOOLEAN;
    L_ERR_PARAM      VARCHAR2(300);
    V_INDATE         VARCHAR2(100);
    V_LNSCHD_AUTOID  NUMBER(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNAccrueInterest');
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STRENDESC
      FROM TLTX
     WHERE TLTXCD = '5562';
    V_STRNEXTDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    V_STRCURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid:' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5562';

    FOR REC IN (SELECT MST.*
                  FROM (SELECT ROWNUM INDEXROW,
                               LNMAST.ACCTNO,
                               LNMAST.TRFACCTNO,
                               LNMAST.INTFRGCD,
                               LNMAST.INTPERIOD,
                               LNMAST.INTDAY,
                               LNMAST.INTNMLACR,
                               LNMAST.FEEINTNMLACR,
                               LNMAST.OINTNMLACR,
                               LNMAST.FEE,
                               LNMAST.OINTDAY,
                               LNMAST.OINTFRQCD,
                               (CASE
                                 WHEN LNMAST.FTYPE = 'AF' THEN
                                  1
                                 ELSE
                                  0
                               END) FINANCETYPE
                          FROM LNMAST
                         WHERE LNMAST.STATUS NOT IN ('P', 'R', 'C')
                           AND ROUND(LNMAST.INTNMLACR + LNMAST.OINTNMLACR +
                                     LNMAST.FEE,
                                     0) > 0
                         ORDER BY ACCTNO) MST) LOOP
      PLOG.DEBUG(PKGCTX, 'Loop for :' || REC.ACCTNO);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      V_DBLMRINTAMT    := 0;
      V_DBLMRFEEAMT    := 0;
      V_DBLT0ODAMT     := 0;
      V_INTDUENO       := 0;
      V_DBLMRFEEINTAMT := 0;
      V_INTINTDAY      := REC.INTDAY;
      --Chuyen lai den han voi vay margin
      SELECT NVL(MAX(DUENO), 0) DUENO
        INTO V_INTDUENO
        FROM LNSCHD
       WHERE ACCTNO = REC.ACCTNO
         AND REFTYPE = 'I';
      PLOG.DEBUG(PKGCTX, 'INTFRGCD:' || REC.INTFRGCD);
      IF REC.INTFRGCD = 'L' AND
         (REC.INTNMLACR > 0 OR REC.FEEINTNMLACR > 0 OR REC.FEE > 0) THEN
        FOR RECSCHD IN (SELECT AUTOID,
                               INTNMLACR,
                               FEE,
                               FEEINTNMLACR,
                               RATE1,
                               RATE2,
                               RATE3,
                               CFRATE1,
                               CFRATE2,
                               CFRATE3
                          FROM LNSCHD
                         WHERE ACCTNO = REC.ACCTNO
                           AND REFTYPE = 'P'
                           AND (INTNMLACR > 0 OR FEE > 0 OR FEEINTNMLACR > 0)
                           AND DUE = 'N'
                           AND OVERDUEDATE =
                               TO_DATE(V_STRNEXTDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)) LOOP
          PLOG.DEBUG(PKGCTX, 'loop 2 for:' || RECSCHD.AUTOID);
          V_DBLMRINTAMT    := ROUND(V_DBLMRINTAMT + RECSCHD.INTNMLACR, 0);
          V_DBLMRFEEINTAMT := ROUND(V_DBLMRFEEINTAMT + RECSCHD.FEEINTNMLACR,
                                    0);
          V_DBLMRFEEAMT    := ROUND(V_DBLMRFEEAMT + RECSCHD.FEE, 0);
          UPDATE LNSCHD
             SET INTNMLACR     = 0,
                 FEEINTNMLACR  = 0,
                 FEE           = 0,
                 DUE           = 'Y',
                 INTDUE        = ROUND(INTDUE + RECSCHD.INTNMLACR, 0),
                 FEEINTDUE     = ROUND(FEEINTDUE + RECSCHD.FEEINTNMLACR, 0),
                 FEEDUE        = ROUND(FEEDUE + RECSCHD.FEE, 0),
                 INTOVDDUEDATE = TO_DATE(V_STRNEXTDATE,
                                         SYSTEMNUMS.C_DATE_FORMAT)
           WHERE AUTOID = RECSCHD.AUTOID;
          IF RECSCHD.INTNMLACR > 0 THEN
            INSERT INTO LNSCHD
              (AUTOID,
               ACCTNO,
               DUENO,
               RLSDATE,
               DUEDATE,
               OVERDUEDATE,
               ACRDATE,
               OVDACRDATE,
               REFTYPE,
               NML,
               OVD,
               PAID,
               DUESTS,
               PDUESTS,
               INTNMLACR,
               DUE,
               RATE1,
               RATE2,
               RATE3,
               CFRATE1,
               CFRATE2,
               CFRATE3,
               NMLFEEINT,
               REFAUTOID)
            VALUES
              (SEQ_LNSCHD.NEXTVAL,
               REC.ACCTNO,
               V_INTDUENO,
               NULL,
               TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
               TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
               NULL,
               NULL,
               'I',
               ROUND(RECSCHD.INTNMLACR, 0),
               0,
               0,
               'N',
               NULL,
               0,
               'N',
               RECSCHD.RATE1,
               RECSCHD.RATE2,
               RECSCHD.RATE3,
               RECSCHD.CFRATE1,
               RECSCHD.CFRATE2,
               RECSCHD.CFRATE3,
               ROUND(RECSCHD.FEEINTNMLACR, 0),
               RECSCHD.AUTOID);
          END IF;
          /* If recSCHD.FEEINTNMLACR > 0 Then
                INSERT INTO LNSCHD(AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                            ACRDATE, OVDACRDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS, FEEINTNMLACR, DUE,
                            Rate1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3)
                       VALUES (SEQ_LNSCHD.NEXTVAL, rec.ACCTNO ,v_intDueNo,NULL,TO_DATE(v_strNEXTDATE,systemnums.c_date_format),TO_DATE(v_strNEXTDATE,systemnums.c_date_format),
                              NULL,NULL,'I',ROUND(recSCHD.FEEINTNMLACR,0),0,0,'N',NULL,0,'N',
                              RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3);
          end if; */
          IF RECSCHD.FEE > 0 THEN
            INSERT INTO LNSCHD
              (AUTOID,
               ACCTNO,
               DUENO,
               RLSDATE,
               DUEDATE,
               OVERDUEDATE,
               ACRDATE,
               OVDACRDATE,
               PAIDDATE,
               REFTYPE,
               NML,
               OVD,
               PAID,
               DUESTS,
               PDUESTS,
               INTNMLACR,
               DUE,
               RATE1,
               RATE2,
               RATE3,
               CFRATE1,
               CFRATE2,
               CFRATE3,
               REFAUTOID)
            VALUES
              (SEQ_LNSCHD.NEXTVAL,
               REC.ACCTNO,
               V_INTDUENO,
               NULL,
               TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
               TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
               NULL,
               NULL,
               NULL,
               'F',
               ROUND(RECSCHD.FEE, 0),
               0,
               0,
               'N',
               NULL,
               0,
               'N',
               RECSCHD.RATE1,
               RECSCHD.RATE2,
               RECSCHD.RATE3,
               RECSCHD.CFRATE1,
               RECSCHD.CFRATE2,
               RECSCHD.CFRATE3,
               RECSCHD.AUTOID);
          END IF;
          IF RECSCHD.INTNMLACR > 0 OR RECSCHD.FEE > 0 OR
             RECSCHD.FEEINTNMLACR > 0 THEN
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID,
               FEEINTNMLACR,
               FEEINTDUE)
            VALUES
              (RECSCHD.AUTOID,
               L_TXMSG.TXNUM,
               TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
               0,
               0,
               0,
               - (ROUND(RECSCHD.INTNMLACR, 0)),
               - (ROUND(RECSCHD.FEE, 0)),
               ROUND(RECSCHD.INTNMLACR, 0),
               0,
               0,
               ROUND(RECSCHD.FEE, 0),
               0,
               0,
               0,
               - (ROUND(RECSCHD.FEEINTNMLACR, 0)),
               ROUND(RECSCHD.FEEINTNMLACR, 0));
          END IF;
        END LOOP;
      ELSIF REC.INTFRGCD = 'M' AND
            (REC.INTNMLACR > 0 OR REC.FEE > 0 OR REC.FEEINTNMLACR > 0) THEN
        V_INTNEXTDAY := SUBSTR(V_STRNEXTDATE, 1, 2);
        V_INTCURDAY  := SUBSTR(V_STRCURRDATE, 1, 2);
        IF V_INTNEXTDAY = V_INTINTDAY THEN
          V_BLNDUE := TRUE;
        ELSIF V_INTNEXTDAY > V_INTINTDAY AND V_INTCURDAY < V_INTINTDAY THEN
          IF V_INTCURDAY < V_INTINTDAY THEN
            --Ngay tra la ngay nghi
            V_BLNDUE := TRUE;
          END IF;
        ELSIF V_INTNEXTDAY < V_INTINTDAY THEN
          V_INTDAYSINMONTH := TO_CHAR(LAST_DAY(TO_DATE(V_STRCURRDATE,
                                                       SYSTEMNUMS.C_DATE_FORMAT)),
                                      'DD');
          IF V_INTINTDAY > V_INTDAYSINMONTH AND
             V_INTNEXTDAY = V_INTDAYSINMONTH THEN
            --Ngay tra la ngay cuoi thang
            V_BLNDUE := TRUE;
          ELSE
            IF TO_CHAR(TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                       'MM') <>
               TO_CHAR(TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                       'MM') AND V_INTCURDAY < V_INTINTDAY THEN
              --Ngay tra la ngay cuoi thang, nhung roi vao ngay nghi
              V_BLNDUE := TRUE;
            END IF;
          END IF;
        END IF;
        IF V_BLNDUE THEN
          V_INTDUENO := V_INTDUENO + 1;
          FOR RECSCHD IN (SELECT AUTOID,
                                 INTNMLACR,
                                 FEE,
                                 FEEINTNMLACR,
                                 RATE1,
                                 RATE2,
                                 RATE3,
                                 CFRATE1,
                                 CFRATE2,
                                 CFRATE3
                            FROM LNSCHD
                           WHERE ACCTNO = REC.ACCTNO
                             AND REFTYPE = 'P'
                             AND (INTNMLACR > 0 OR FEE > 0 OR
                                 FEEINTNMLACR > 0)
                             AND DUE = 'N') LOOP
            V_DBLMRINTAMT    := ROUND(V_DBLMRINTAMT + RECSCHD.INTNMLACR, 0);
            V_DBLMRFEEINTAMT := ROUND(V_DBLMRFEEINTAMT +
                                      RECSCHD.FEEINTNMLACR,
                                      0);
            V_DBLMRFEEAMT    := ROUND(V_DBLMRFEEAMT + RECSCHD.FEE, 0);
            IF RECSCHD.INTNMLACR > 0 OR RECSCHD.FEE > 0 OR
               RECSCHD.FEEINTNMLACR > 0 THEN
              UPDATE LNSCHD
                 SET INTNMLACR     = 0,
                     FEE           = 0,
                     DUE           = 'Y',
                     FEEINTNMLACR  = 0,
                     INTDUE        = ROUND(INTDUE + RECSCHD.INTNMLACR, 0),
                     FEEINTDUE     = ROUND(FEEINTDUE + RECSCHD.FEEINTNMLACR,
                                           0),
                     FEEDUE        = ROUND(FEEDUE + RECSCHD.FEE, 0),
                     INTOVDDUEDATE = TO_DATE(V_STRNEXTDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
               WHERE AUTOID = RECSCHD.AUTOID;

              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID,
                 FEEINTNMLACR,
                 FEEINTDUE)
              VALUES
                (RECSCHD.AUTOID,
                 L_TXMSG.TXNUM,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 0,
                 0,
                 0,
                 - (ROUND(RECSCHD.INTNMLACR, 0)),
                 - (ROUND(RECSCHD.FEE, 0)),
                 ROUND(RECSCHD.INTNMLACR, 0),
                 0,
                 0,
                 ROUND(RECSCHD.FEE, 0),
                 0,
                 0,
                 0,
                 - (ROUND(RECSCHD.FEEINTNMLACR, 0)),
                 ROUND(RECSCHD.FEEINTNMLACR, 0));
            END IF;
            -- PhuongHT move vao trong vong loop
            IF V_DBLMRINTAMT > 0 THEN
              V_LNSCHD_AUTOID := SEQ_LNSCHD.NEXTVAL;
              INSERT INTO LNSCHD
                (AUTOID,
                 ACCTNO,
                 DUENO,
                 RLSDATE,
                 DUEDATE,
                 OVERDUEDATE,
                 ACRDATE,
                 OVDACRDATE,
                 PAIDDATE,
                 REFTYPE,
                 NML,
                 OVD,
                 PAID,
                 DUESTS,
                 PDUESTS,
                 INTNMLACR,
                 DUE,
                 RATE1,
                 RATE2,
                 RATE3,
                 CFRATE1,
                 CFRATE2,
                 CFRATE3,
                 NMLFEEINT,
                 REFAUTOID)
              VALUES
                (V_LNSCHD_AUTOID,
                 REC.ACCTNO,
                 V_INTDUENO + 1,
                 NULL,
                 TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 NULL,
                 NULL,
                 NULL,
                 'I',
                 V_DBLMRINTAMT,
                 0,
                 0,
                 'N',
                 NULL,
                 0,
                 'N',
                 RECSCHD.RATE1,
                 RECSCHD.RATE2,
                 RECSCHD.RATE3,
                 RECSCHD.CFRATE1,
                 RECSCHD.CFRATE2,
                 RECSCHD.CFRATE3,
                 V_DBLMRFEEINTAMT,
                 RECSCHD.AUTOID);

              INSERT INTO LNSCHDLOG
                (AUTOID, TXNUM, TXDATE, NML, NMLFEEINT)
              VALUES
                (V_LNSCHD_AUTOID,
                 L_TXMSG.TXNUM,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 V_DBLMRINTAMT,
                 V_DBLMRFEEINTAMT);
            END IF;
            /* If v_dblMRFEEINTAMT > 0 Then
                INSERT INTO LNSCHD
                  (AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                   ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD,
                   PAID, DUESTS, PDUESTS, INTNMLACR, DUE,
                   RATE1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3)
                VALUES
                  (SEQ_LNSCHD.NEXTVAL, rec.ACCTNO, v_intDueNo + 1, NULL,
                   to_date(v_strNEXTDATE, systemnums.c_date_format),
                   to_date(v_strNEXTDATE, systemnums.c_date_format),
                   NULL, NULL, NULL, 'I', v_dblMRFEEINTAMT, 0, 0, 'N',
                   NULL, 0, 'N',
                 RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3);
            End If;  */
            IF V_DBLMRFEEAMT > 0 THEN
              V_LNSCHD_AUTOID := SEQ_LNSCHD.NEXTVAL;
              INSERT INTO LNSCHD
                (AUTOID,
                 ACCTNO,
                 DUENO,
                 RLSDATE,
                 DUEDATE,
                 OVERDUEDATE,
                 ACRDATE,
                 OVDACRDATE,
                 PAIDDATE,
                 REFTYPE,
                 NML,
                 OVD,
                 PAID,
                 DUESTS,
                 PDUESTS,
                 INTNMLACR,
                 DUE,
                 RATE1,
                 RATE2,
                 RATE3,
                 CFRATE1,
                 CFRATE2,
                 CFRATE3,
                 REFAUTOID)
              VALUES
                (V_LNSCHD_AUTOID,
                 REC.ACCTNO,
                 V_INTDUENO + 1,
                 NULL,
                 TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 NULL,
                 NULL,
                 NULL,
                 'F',
                 V_DBLMRFEEAMT,
                 0,
                 0,
                 'N',
                 NULL,
                 0,
                 'N',
                 RECSCHD.RATE1,
                 RECSCHD.RATE2,
                 RECSCHD.RATE3,
                 RECSCHD.CFRATE1,
                 RECSCHD.CFRATE2,
                 RECSCHD.CFRATE3,
                 RECSCHD.AUTOID);

              INSERT INTO LNSCHDLOG
                (AUTOID, TXNUM, TXDATE, NML)
              VALUES
                (V_LNSCHD_AUTOID,
                 L_TXMSG.TXNUM,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 V_DBLMRFEEAMT);
            END IF;
            --- end of PhuongHT move vao trong vong loop
          END LOOP;

        END IF;
      END IF;
      --Chuyen lai den han voi vay T0
      V_INTDUENO := 0;
      SELECT NVL(MAX(DUENO), 0) DUENO
        INTO V_INTDUENO
        FROM LNSCHD
       WHERE ACCTNO = REC.ACCTNO
         AND REFTYPE = 'GI';
      IF REC.OINTFRQCD = 'L' AND REC.OINTNMLACR > 0 THEN
        FOR RECSCHD IN (SELECT AUTOID, INTNMLACR
                          FROM LNSCHD
                         WHERE ACCTNO = REC.ACCTNO
                           AND REFTYPE = 'GP'
                           AND (INTNMLACR > 0)
                           AND DUE = 'N'
                           AND OVERDUEDATE =
                               TO_DATE(V_STRNEXTDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)) LOOP
          V_DBLT0ODAMT := V_DBLT0ODAMT + RECSCHD.INTNMLACR;
          UPDATE LNSCHD
             SET INTNMLACR     = 0,
                 DUE           = 'Y',
                 INTDUE        = ROUND(INTDUE + RECSCHD.INTNMLACR, 0),
                 INTOVDDUEDATE = TO_DATE(V_STRNEXTDATE,
                                         SYSTEMNUMS.C_DATE_FORMAT)
           WHERE AUTOID = RECSCHD.AUTOID;
          V_LNSCHD_AUTOID := SEQ_LNSCHD.NEXTVAL;
          INSERT INTO LNSCHD
            (AUTOID,
             ACCTNO,
             DUENO,
             RLSDATE,
             DUEDATE,
             OVERDUEDATE,
             ACRDATE,
             OVDACRDATE,
             PAIDDATE,
             REFTYPE,
             NML,
             OVD,
             PAID,
             DUESTS,
             PDUESTS,
             INTNMLACR,
             DUE,
             REFAUTOID)
          VALUES
            (V_LNSCHD_AUTOID,
             REC.ACCTNO,
             V_INTDUENO,
             NULL,
             TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
             TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
             NULL,
             NULL,
             NULL,
             'GI',
             ROUND(RECSCHD.INTNMLACR, 0),
             0,
             0,
             'N',
             NULL,
             0,
             'N',
             RECSCHD.AUTOID);
          -- insert vao log cho dong GI
          INSERT INTO LNSCHDLOG
            (AUTOID, TXNUM, TXDATE, NML)
          VALUES
            (V_LNSCHD_AUTOID,
             L_TXMSG.TXNUM,
             TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
             ROUND(RECSCHD.INTNMLACR, 0));

          IF RECSCHD.INTNMLACR > 0 THEN
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID)
            VALUES
              (RECSCHD.AUTOID,
               L_TXMSG.TXNUM,
               TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
               0,
               0,
               0,
               - (ROUND(RECSCHD.INTNMLACR, 0)),
               0,
               ROUND(RECSCHD.INTNMLACR, 0),
               0,
               0,
               0,
               0,
               0,
               0);
          END IF;
        END LOOP;
      ELSIF REC.OINTFRQCD = 'M' AND REC.OINTNMLACR > 0 THEN
        V_INTNEXTDAY := SUBSTR(V_STRNEXTDATE, 1, 2);
        V_INTCURDAY  := SUBSTR(V_STRCURRDATE, 1, 2);
        IF V_INTNEXTDAY = V_INTOINTDAY THEN
          V_BLNDUE := TRUE;
        ELSIF V_INTNEXTDAY > V_INTOINTDAY AND V_INTCURDAY < V_INTOINTDAY THEN
          IF V_INTCURDAY < V_INTOINTDAY THEN
            --Ngay tra la ngay nghi
            V_BLNDUE := TRUE;
          END IF;
        ELSIF V_INTNEXTDAY < V_INTOINTDAY THEN
          V_INTDAYSINMONTH := TO_CHAR(LAST_DAY(TO_DATE(V_STRCURRDATE,
                                                       SYSTEMNUMS.C_DATE_FORMAT)),
                                      'DD');
          IF V_INTOINTDAY > V_INTDAYSINMONTH AND
             V_INTNEXTDAY = V_INTDAYSINMONTH THEN
            --Ngay tra la ngay cuoi thang
            V_BLNDUE := TRUE;
          ELSE
            IF TO_CHAR(TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                       'MM') <>
               TO_CHAR(TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                       'MM') AND V_INTCURDAY < V_INTINTDAY THEN
              --Ngay tra la ngay cuoi thang, nhung roi vao ngay nghi
              V_BLNDUE := TRUE;
            END IF;
          END IF;
        END IF;
        IF V_BLNDUE THEN
          V_INTDUENO := V_INTDUENO + 1;
          FOR RECSCHD IN (SELECT AUTOID, INTNMLACR
                            FROM LNSCHD
                           WHERE ACCTNO = REC.ACCTNO
                             AND REFTYPE = 'GP'
                             AND INTNMLACR > 0
                             AND DUE = 'N') LOOP
            V_DBLT0ODAMT := ROUND(V_DBLT0ODAMT + RECSCHD.INTNMLACR, 0);
            UPDATE LNSCHD
               SET INTNMLACR     = 0,
                   DUE           = 'Y',
                   INTDUE        = ROUND(INTDUE + RECSCHD.INTNMLACR, 0),
                   INTOVDDUEDATE = TO_DATE(V_STRNEXTDATE,
                                           SYSTEMNUMS.C_DATE_FORMAT)
             WHERE AUTOID = RECSCHD.AUTOID;
            IF RECSCHD.INTNMLACR > 0 THEN
              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID)
              VALUES
                (RECSCHD.AUTOID,
                 L_TXMSG.TXNUM,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 0,
                 0,
                 0,
                 - (ROUND(RECSCHD.INTNMLACR, 0)),
                 0,
                 ROUND(RECSCHD.INTNMLACR, 0),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0);
            END IF;
            IF V_DBLT0ODAMT > 0 THEN
              V_LNSCHD_AUTOID := SEQ_LNSCHD.NEXTVAL;
              INSERT INTO LNSCHD
                (AUTOID,
                 ACCTNO,
                 DUENO,
                 RLSDATE,
                 DUEDATE,
                 OVERDUEDATE,
                 ACRDATE,
                 OVDACRDATE,
                 PAIDDATE,
                 REFTYPE,
                 NML,
                 OVD,
                 PAID,
                 DUESTS,
                 PDUESTS,
                 INTNMLACR,
                 DUE,
                 REFAUTOID)
              VALUES
                (V_LNSCHD_AUTOID,
                 REC.ACCTNO,
                 V_INTDUENO + 1,
                 NULL,
                 TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 TO_DATE(V_STRNEXTDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 NULL,
                 NULL,
                 NULL,
                 'GI',
                 V_DBLT0ODAMT,
                 0,
                 0,
                 'N',
                 NULL,
                 0,
                 'N',
                 RECSCHD.AUTOID);
              -- insert vao log cho dong GI
              INSERT INTO LNSCHDLOG
                (AUTOID, TXNUM, TXDATE, NML)
              VALUES
                (V_LNSCHD_AUTOID,
                 L_TXMSG.TXNUM,
                 TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
                 V_DBLT0ODAMT);
            END IF;

          END LOOP;
        END IF;
      END IF;
      IF V_DBLMRINTAMT + V_DBLMRFEEAMT + V_DBLT0ODAMT + V_DBLMRFEEINTAMT > 0 THEN

        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);
        --Set cac field giao dich
        --03   ACCTNO       C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        PLOG.DEBUG(PKGCTX, 'ACCTNO :' || REC.ACCTNO);
        --05   ORGORDERID   C
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.TRFACCTNO;
        PLOG.DEBUG(PKGCTX, 'CIACCTNO: ' || REC.TRFACCTNO);

        --09   PAIDAMT      N
        L_TXMSG.TXFIELDS('09').DEFNAME := 'MRFEEINTAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := ROUND(V_DBLMRFEEINTAMT, 0);

        --10   PAIDAMT      N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'MRINTAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := ROUND(V_DBLMRINTAMT, 0);

        --11   PAIDFEEAMT   N
        L_TXMSG.TXFIELDS('11').DEFNAME := 'MRFEEAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := ROUND(V_DBLMRFEEAMT, 0);
        --12   N   FEEAMT
        L_TXMSG.TXFIELDS('12').DEFNAME := 'T0AMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(V_DBLT0ODAMT, 0);
        --20    N   FINANCETYPE
        L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := REC.FINANCETYPE;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

        BEGIN
          IF TXPKS_#5562.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error /*5562*/: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;

    -- update cimast set odamt
    --Reset CIMAST.ODAMT = 0;
    UPDATE CIMAST SET ODAMT = 0;
    FOR REC_AF IN (SELECT TRFACCTNO,
                          ROUND(SUM(PRINNML + PRINOVD + INTNMLACR +
                                    INTOVDACR + INTNMLOVD + INTDUE +
                                    INTPREPAID + OPRINNML + OPRINOVD +
                                    OINTNMLACR + OINTOVDACR + OINTNMLOVD +
                                    OINTDUE + OINTPREPAID + FEE + FEEDUE +
                                    FEEOVD + FEEINTNMLACR + FEEINTOVDACR +
                                    FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID)) ODAMT
                     FROM LNMAST
                    WHERE FTYPE = 'AF'
                    GROUP BY TRFACCTNO
                    ORDER BY TRFACCTNO) LOOP
      -- rec_af
      UPDATE CIMAST
         SET ODAMT = REC_AF.ODAMT
       WHERE ACCTNO = REC_AF.TRFACCTNO;
    END LOOP; -- rec_af

    -- update cimast set dueamt
    V_INDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');

    UPDATE CIMAST SET DUEAMT = 0;
    FOR REC IN (SELECT M.TRFACCTNO, SUM(NML + INTDUE + FEEINTDUE) NML
                  FROM (SELECT ACCTNO, SUM(NML) NML
                          FROM LNSCHD
                         WHERE OVERDUEDATE = TO_DATE(V_INDATE, 'DD/MM/YYYY')
                           AND NML + INTDUE + FEEINTDUE > 0
                           AND REFTYPE IN ('P')
                         GROUP BY ACCTNO) S,
                       LNMAST M
                 WHERE S.ACCTNO = M.ACCTNO
                   AND M.STATUS NOT IN ('P', 'R', 'C')
                   AND M.FTYPE <> 'DF'
                 GROUP BY M.TRFACCTNO
                 ORDER BY TRFACCTNO) LOOP
      UPDATE CIMAST
         SET DUEAMT = ROUND(DUEAMT + REC.NML, 0)
       WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- update cimast set ovamt
    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    FOR REC_AF IN (SELECT TRFACCTNO,
                          ROUND(SUM(PRINOVD + INTOVDACR + INTNMLOVD +
                                    INTPREPAID + OPRINNML + OPRINOVD +
                                    OINTNMLACR + OINTOVDACR + OINTNMLOVD +
                                    OINTDUE + OINTPREPAID + FEE + FEEDUE +
                                    FEEOVD + FEEINTOVDACR + FEEINTNMLOVD +
                                    FEEINTPREPAID)) OVAMT
                     FROM LNMAST
                    WHERE FTYPE = 'AF'
                    GROUP BY TRFACCTNO
                    ORDER BY TRFACCTNO) LOOP
      -- rec_af
      UPDATE CIMAST
         SET OVAMT = REC_AF.OVAMT
       WHERE ACCTNO = REC_AF.TRFACCTNO;
    END LOOP; -- rec_af

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNAccrueInterest');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNAccrueInterest');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNACCRUEINTEREST;
  ---------------------------------pr_LNNormalInterestAccrue------------------------------------------------
  PROCEDURE PR_LNNORMALINTERESTACCRUE(P_ERR_CODE OUT VARCHAR2) IS
    V_INDATE           VARCHAR2(10);
    V_STRYEAR          VARCHAR2(4);
    V_DBLINTNMLACR     NUMBER(20, 4);
    V_DBLINTOVDACR     NUMBER(20, 4);
    V_DBLFEEINTNMLACR  NUMBER(20, 4);
    V_DBLFEEINTOVDACR  NUMBER(20, 4);
    V_DBLOINTNMLACR    NUMBER(20, 4);
    V_DBLOINTOVDACR    NUMBER(20, 4);
    V_INTDAYS          NUMBER(20);
    V_DBLAMT           NUMBER(20, 4);
    V_DBLDRATE         NUMBER(10);
    V_DBLFEEAMT        NUMBER(20, 4);
    L_FEE_INTOVD       NUMBER(20, 4);
    L_FEE_FEEINTOVDACR NUMBER(20, 4);
    L_FEE_OVD          NUMBER(20, 4);
    V_STRCURRDATE      VARCHAR2(100);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNNormalInterestAccrue');
    V_INDATE      := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    V_STRCURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');

      -- reset uu dai magin

    BEGIN
    FOR REC IN (
     SELECT  lns.autoid,  MIN( lns.rate1) rate1 , MIN( lns.rate2) rate2, MIN(lns.rate3) rate3
     ,MIN( LEAST (lns.rate1,LNPRM.rate1)) newrate1
    , MIN(LEAST (lns.rate2,LNPRM.rate2)) newrate2,MIN(LEAST (lns.rate3,LNPRM.rate3)) newrate3
    FROM LNPRMINTCF LN, lnprminmast LNPRM, lnmast LNM, LNSCHD LNS, AFMAST af
    WHERE LN.refid = LNPRM. autoid
    AND ln.afacctno = af.acctno
    AND af.acctno = lnm.trfacctno
    AND lnm.acctno = lns.acctno
    AND (lns.rate1<>LEAST (lns.rate1,LNPRM.rate1) OR lns.rate2<>LEAST (lns.rate2,LNPRM.rate2) OR  lns.rate3<>LEAST (lns.rate3,LNPRM.rate3))
    AND LN.status ='A'
  --  AND getcurrdate BETWEEN  LN.valdate AND LN.expdate
    and LNS.rlsdate= to_date ( V_STRCURRDATE,'dd/mm/yyyy')
    AND LNS.rlsdate BETWEEN  LN.valdate AND LN.expdate
    GROUP BY lns.autoid
        )
    LOOP
    UPDATE lnschd SET rate1= rec.newrate1, rate2= rec.newrate2,rate3= rec.newrate3 WHERE autoid = rec.autoid ;

    END LOOP;
    END;



    FOR REC IN (SELECT ACCTNO,
                       DRATE,
                       TRFACCTNO,
                       RATE1,
                       RATE2,
                       RATE3,
                       ORATE1,
                       ORATE2,
                       ORATE3,
                       CFRATE1,
                       CFRATE2,
                       CFRATE3,
                       (PRINNML + PRINOVD + INTNMLACR + INTOVDACR +
                       INTNMLOVD + INTDUE - INTPREPAID + OPRINNML +
                       OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD +
                       OINTDUE - OINTPREPAID + FEE + FEEDUE + FEEOVD +
                       FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD +
                       FEEINTDUE - FEEINTPREPAID) ODAMT,
                       PRINNML,
                       PRINOVD,
                       OPRINNML,
                       OPRINOVD,
                       FTYPE,
                       INTNMLACR,
                       INTOVDACR,
                       INTNMLOVD,
                       INTDUE,
                       INTPREPAID,
                       FEEINTNMLACR,
                       FEEINTOVDACR,
                       FEEINTNMLOVD,
                       FEEINTDUE,
                       FEEINTPREPAID,
                       OINTNMLACR,
                       OINTOVDACR,
                       OINTNMLOVD,
                       OINTDUE,
                       OINTPREPAID,
                       FEE,
                       FEEDUE,
                       FEEOVD,
                       INTOVDCD
                  FROM LNMAST
                 WHERE STATUS NOT IN ('P', 'R', 'C')
                   AND PRINNML + OPRINNML + PRINOVD + OPRINOVD > 0
                 ORDER BY ACCTNO) LOOP
      V_DBLINTNMLACR    := 0;
      V_DBLINTOVDACR    := 0;
      V_DBLFEEINTNMLACR := 0;
      V_DBLFEEINTOVDACR := 0;
      V_DBLOINTNMLACR   := 0;
      V_DBLOINTOVDACR   := 0;
      CASE
        WHEN REC.DRATE = 'D1' THEN
          V_DBLDRATE := 30;
        WHEN REC.DRATE = 'D2' THEN
          V_DBLDRATE := TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(V_INDATE,
                                                           'dd/mm/rrrr')),
                                          'dd'));
        WHEN REC.DRATE = 'Y1' THEN
          V_DBLDRATE := 360;
        WHEN REC.DRATE = 'Y2' THEN
          V_STRYEAR  := SUBSTR(V_INDATE, 7);
          V_DBLDRATE := TO_DATE(CONCAT('31/12/', V_STRYEAR), 'dd/mm/rrrr') -
                        TO_DATE(CONCAT('01/01/', V_STRYEAR), 'dd/mm/rrrr') + 1;
        WHEN REC.DRATE = 'Y3' THEN
          V_DBLDRATE := 365;
      END CASE;

      -- Lai tren goc trong han
      -- Lai vay margin
      IF REC.PRINNML > 0 THEN
        FOR REC1 IN (SELECT AUTOID, NML, ACRDATE, REFTYPE, RATE1, CFRATE1
                       FROM LNSCHD
                      WHERE ACCTNO = REC.ACCTNO
                        AND NML > 0
                        AND DUEDATE >= TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND REFTYPE = 'P') LOOP
          V_INTDAYS      := TO_DATE(V_INDATE, 'dd/mm/yyyy') - REC1.ACRDATE;
          V_DBLAMT       := ROUND(REC1.NML * REC1.RATE1 / 100 * V_INTDAYS /
                                  V_DBLDRATE,
                                  4);
          V_DBLINTNMLACR := V_DBLINTNMLACR + V_DBLAMT;
          --
          V_DBLFEEAMT       := ROUND(REC1.NML * REC1.CFRATE1 / 100 *
                                     V_INTDAYS / V_DBLDRATE,
                                     4);
          V_DBLFEEINTNMLACR := V_DBLFEEINTNMLACR + V_DBLFEEAMT;
          --
          IF (V_DBLAMT > 0 OR V_DBLFEEAMT > 0) THEN
            INSERT INTO LNINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT,
               CFIRRATE,
               FEEINTAMT,
               LNSCHDID,
               ACCRUALSAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               'I',
               REC1.ACRDATE,
               TO_DATE(V_INDATE, 'dd/mm/yyyy'),
               'S',
               REC1.RATE1,
               REC1.NML,
               V_DBLAMT,
               REC1.CFRATE1,
               V_DBLFEEAMT,
               REC1.AUTOID,
               trunc(V_DBLAMT)+trunc(V_DBLFEEAMT));
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID,
               FEEINTNMLACR,
               ACCRUALSAMT)
            VALUES
              (REC1.AUTOID,
               NULL,
               TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
               0,
               0,
               0,
               V_DBLAMT,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               V_DBLFEEAMT,
               trunc(V_DBLAMT)+trunc(V_DBLFEEAMT)
               );
          END IF;

          UPDATE LNSCHD
             SET ACRDATE      = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 INTNMLACR    = INTNMLACR + V_DBLAMT,
                 FEEINTNMLACR = FEEINTNMLACR + V_DBLFEEAMT,
                 ACCRUALSAMT  = ACCRUALSAMT +trunc(V_DBLAMT)+trunc(V_DBLFEEAMT),
                 DUE          = 'N'
           WHERE AUTOID = REC1.AUTOID;
        END LOOP;

        FOR REC2 IN (SELECT AUTOID, NML, ACRDATE, REFTYPE, RATE2, CFRATE2
                       FROM LNSCHD
                      WHERE ACCTNO = REC.ACCTNO
                        AND NML > 0
                        AND DUEDATE < TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND OVERDUEDATE >= TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND REFTYPE = 'P') LOOP
          V_INTDAYS      := TO_DATE(V_INDATE, 'dd/mm/yyyy') - REC2.ACRDATE;
          V_DBLAMT       := ROUND(REC2.NML * REC2.RATE2 / 100 * V_INTDAYS /
                                  V_DBLDRATE,
                                  4);
          V_DBLINTNMLACR := V_DBLINTNMLACR + V_DBLAMT;
          --
          V_DBLFEEAMT       := ROUND(REC2.NML * REC2.CFRATE2 / 100 *
                                     V_INTDAYS / V_DBLDRATE,
                                     4);
          V_DBLFEEINTNMLACR := V_DBLFEEINTNMLACR + V_DBLFEEAMT;
          --
          IF (V_DBLAMT > 0 OR V_DBLFEEAMT > 0) THEN
            INSERT INTO LNINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT,
               CFIRRATE,
               FEEINTAMT,
               LNSCHDID,
               ACCRUALSAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               'I',
               REC2.ACRDATE,
               TO_DATE(V_INDATE, 'dd/mm/yyyy'),
               'S',
               REC2.RATE2,
               REC2.NML,
               V_DBLAMT,
               REC2.CFRATE2,
               V_DBLFEEAMT,
               REC2.AUTOID,
               trunc(V_DBLAMT)+trunc(V_DBLFEEAMT));
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID,
               FEEINTNMLACR,
               ACCRUALSAMT
               )
            VALUES
              (REC2.AUTOID,
               NULL,
               TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
               0,
               0,
               0,
               V_DBLAMT,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               V_DBLFEEAMT,
               trunc(V_DBLAMT)+trunc(V_DBLFEEAMT));
          END IF;

          UPDATE LNSCHD
             SET ACRDATE      = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 INTNMLACR    = INTNMLACR + V_DBLAMT,
                 FEEINTNMLACR = FEEINTNMLACR + V_DBLFEEAMT,
                 DUE          = 'N',
                 ACCRUALSAMT  = ACCRUALSAMT +trunc(V_DBLAMT)+trunc(V_DBLFEEAMT)
           WHERE AUTOID = REC2.AUTOID;
        END LOOP;
      END IF;

      -- Tinh lai vay T0
      IF REC.OPRINNML > 0 THEN
        FOR REC3 IN (SELECT AUTOID, NML, ACRDATE, REFTYPE
                       FROM LNSCHD
                      WHERE ACCTNO = REC.ACCTNO
                        AND NML > 0
                        AND DUEDATE >= TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND REFTYPE = 'GP') LOOP
          V_INTDAYS       := TO_DATE(V_INDATE, 'dd/mm/yyyy') - REC3.ACRDATE;
          V_DBLAMT        := ROUND(REC3.NML * REC.ORATE1 / 100 * V_INTDAYS /
                                   V_DBLDRATE,
                                   4);
          V_DBLOINTNMLACR := V_DBLOINTNMLACR + V_DBLAMT;
          IF V_DBLAMT > 0 THEN
            INSERT INTO LNINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT,
               LNSCHDID,
               ACCRUALSAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               'GI',
               REC3.ACRDATE,
               TO_DATE(V_INDATE, 'dd/mm/yyyy'),
               'S',
               REC.ORATE1,
               REC3.NML,
               V_DBLAMT,
               REC3.AUTOID,
               trunc(V_DBLAMT)
               );
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID,
               ACCRUALSAMT
               )
            VALUES
              (REC3.AUTOID,
               NULL,
               TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
               0,
               0,
               0,
               V_DBLAMT,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
             trunc( V_DBLAMT)
             );
          END IF;
          UPDATE LNSCHD
             SET ACRDATE   = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 INTNMLACR = INTNMLACR + V_DBLAMT,
                 DUE       = 'N',
                 ACCRUALSAMT =ACCRUALSAMT+ trunc(V_DBLAMT)
           WHERE AUTOID = REC3.AUTOID;
        END LOOP;

        FOR REC4 IN (SELECT AUTOID, NML, ACRDATE, REFTYPE
                       FROM LNSCHD
                      WHERE ACCTNO = REC.ACCTNO
                        AND NML > 0
                        AND DUEDATE < TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND OVERDUEDATE >= TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND REFTYPE = 'GP') LOOP
          V_INTDAYS       := TO_DATE(V_INDATE, 'dd/mm/yyyy') - REC4.ACRDATE;
          V_DBLAMT        := ROUND(REC4.NML * REC.ORATE2 / 100 * V_INTDAYS /
                                   V_DBLDRATE,
                                   4);
          V_DBLOINTNMLACR := V_DBLOINTNMLACR + V_DBLAMT;
          IF V_DBLAMT > 0 THEN
            INSERT INTO LNINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT,
               LNSCHDID,
               ACCRUALSAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               'GI',
               REC4.ACRDATE,
               TO_DATE(V_INDATE, 'dd/mm/yyyy'),
               'S',
               REC.ORATE2,
               REC4.NML,
               V_DBLAMT,
               REC4.AUTOID,
               trunc(V_DBLAMT));
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID,
               ACCRUALSAMT)
            VALUES
              (REC4.AUTOID,
               NULL,
               TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
               0,
               0,
               0,
               V_DBLAMT,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               trunc(V_DBLAMT));
          END IF;
          UPDATE LNSCHD
             SET ACRDATE   = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 INTNMLACR = INTNMLACR + V_DBLAMT,
                 DUE       = 'N',
                 ACCRUALSAMT =ACCRUALSAMT+ trunc(V_DBLAMT)
           WHERE AUTOID = REC4.AUTOID;
        END LOOP;
      END IF;

      -- Lai tren goc qua han
      -- Lai margin
      IF REC.PRINOVD > 0 THEN
        FOR REC5 IN (SELECT AUTOID,
                            OVD,
                            OVDACRDATE,
                            REFTYPE,
                            RATE3,
                            CFRATE3,
                            RATE2,
                            CFRATE2,
                            FEEINTNMLOVD,
                            INTOVD
                       FROM LNSCHD
                      WHERE ACCTNO = REC.ACCTNO
                        AND OVD > 0
                        AND OVERDUEDATE < TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND REFTYPE = 'P') LOOP
          -- Phi quan ly lai QH Phi tren lai QH Phi tren phi QH:
          IF REC.INTOVDCD = 'Y' THEN

            V_INTDAYS      := TO_DATE(V_INDATE, 'dd/mm/yyyy') -
                              REC5.OVDACRDATE;
            V_DBLAMT       := ROUND(REC5.OVD * REC5.RATE3 / 100 * V_INTDAYS /
                                    V_DBLDRATE,
                                    4);
            V_DBLINTOVDACR := V_DBLINTOVDACR + 0;

            L_FEE_OVD          := ROUND((REC5.OVD + REC5.INTOVD +
                                        REC5.FEEINTNMLOVD) * REC5.CFRATE3 / 100 *
                                        V_INTDAYS / V_DBLDRATE,
                                        4);
            L_FEE_INTOVD       := ROUND(REC5.INTOVD * REC5.RATE2 / 100 *
                                        V_INTDAYS / V_DBLDRATE,
                                        4);
            L_FEE_FEEINTOVDACR := ROUND(REC5.FEEINTNMLOVD * REC5.RATE2 / 100 *
                                        V_INTDAYS / V_DBLDRATE,
                                        4);

            --
            IF (L_FEE_OVD > 0 OR L_FEE_INTOVD > 0 OR L_FEE_FEEINTOVDACR > 0 OR
               V_DBLAMT > 0) THEN
              -- l_fee_ovd: Phi quan ly qua han
              INSERT INTO LNINTTRAN
                (AUTOID,
                 ACCTNO,
                 INTTYPE,
                 FRDATE,
                 TODATE,
                 ICRULE,
                 IRRATE,
                 INTBAL,
                 INTAMT,
                 CFIRRATE,
                 FEEINTAMT,
                 LNSCHDID,
                 ACCRUALSAMT)
              VALUES
                (SEQ_CIINTTRAN.NEXTVAL,
                 REC.ACCTNO,
                 'O',
                 REC5.OVDACRDATE,
                 TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 'S',
                 REC5.RATE3,
                 REC5.OVD,
                 0,
                 REC5.RATE3,
                 V_DBLAMT,
                 REC5.AUTOID,
                 trunc(V_DBLAMT));
              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID,
                 FEEINTOVDPRIN,
                 ACCRUALSAMT)
              VALUES
                (REC5.AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 V_DBLAMT,
                 trunc(V_DBLAMT));
              -- l_fee_ovd: Phi quan ly qua han
              INSERT INTO LNINTTRAN
                (AUTOID,
                 ACCTNO,
                 INTTYPE,
                 FRDATE,
                 TODATE,
                 ICRULE,
                 IRRATE,
                 INTBAL,
                 INTAMT,
                 CFIRRATE,
                 FEEINTAMT,
                 LNSCHDID,
                 ACCRUALSAMT)
              VALUES
                (SEQ_CIINTTRAN.NEXTVAL,
                 REC.ACCTNO,
                 'FO',
                 REC5.OVDACRDATE,
                 TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 'S',
                 REC5.RATE3,
                 (REC5.OVD + REC5.INTOVD + REC5.FEEINTNMLOVD),
                 0,
                 REC5.CFRATE3,
                 L_FEE_OVD,
                 REC5.AUTOID,
                 trunc(L_FEE_OVD));
              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID,
                 FEEINTOVDPRIN,
                 ACCRUALSAMT)
              VALUES
                (REC5.AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 L_FEE_OVD,
                 trunc(L_FEE_OVD));
              -- l_fee_intovd: Lai tren lai qua han
              INSERT INTO LNINTTRAN
                (AUTOID,
                 ACCTNO,
                 INTTYPE,
                 FRDATE,
                 TODATE,
                 ICRULE,
                 IRRATE,
                 INTBAL,
                 INTAMT,
                 CFIRRATE,
                 FEEINTAMT,
                 LNSCHDID,
                 ACCRUALSAMT)
              VALUES
                (SEQ_CIINTTRAN.NEXTVAL,
                 REC.ACCTNO,
                 'FIO',
                 REC5.OVDACRDATE,
                 TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 'S',
                 REC5.RATE2,
                 REC5.INTOVD,
                 0,
                 REC5.CFRATE2,
                 L_FEE_INTOVD,
                 REC5.AUTOID,
                trunc( L_FEE_INTOVD)
                 );
              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID,
                 FEEINTOVDPRIN,
                 ACCRUALSAMT)
              VALUES
                (REC5.AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 L_FEE_INTOVD,
                 trunc(L_FEE_INTOVD));
              -- l_fee_feeintovdacr: Lai tren phi qua han
              INSERT INTO LNINTTRAN
                (AUTOID,
                 ACCTNO,
                 INTTYPE,
                 FRDATE,
                 TODATE,
                 ICRULE,
                 IRRATE,
                 INTBAL,
                 INTAMT,
                 CFIRRATE,
                 FEEINTAMT,
                 LNSCHDID,
                 ACCRUALSAMT)
              VALUES
                (SEQ_CIINTTRAN.NEXTVAL,
                 REC.ACCTNO,
                 'FFO',
                 REC5.OVDACRDATE,
                 TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 'S',
                 REC5.RATE2,
                 REC5.FEEINTNMLOVD,
                 0,
                 REC5.CFRATE3,
                 L_FEE_FEEINTOVDACR,
                 REC5.AUTOID,
                 trunc(L_FEE_FEEINTOVDACR));
              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID,
                 FEEINTOVDPRIN,
                 ACCRUALSAMT
                 )
              VALUES
                (REC5.AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 L_FEE_FEEINTOVDACR,
                 trunc(L_FEE_FEEINTOVDACR));
            END IF;

            V_DBLFEEINTOVDACR := V_DBLFEEINTOVDACR + L_FEE_OVD +
                                 L_FEE_INTOVD + L_FEE_FEEINTOVDACR +
                                 V_DBLAMT;

            UPDATE LNSCHD
               SET OVDACRDATE   = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                   FEEINTOVDACR = FEEINTOVDACR + L_FEE_OVD + L_FEE_INTOVD +
                                  L_FEE_FEEINTOVDACR + V_DBLAMT,
                   ACCRUALSAMT = ACCRUALSAMT  + trunc(L_FEE_OVD)+ trunc(L_FEE_INTOVD)+ trunc(L_FEE_FEEINTOVDACR) + trunc(V_DBLAMT)
             WHERE AUTOID = REC5.AUTOID;
          ELSE

            V_INTDAYS      := TO_DATE(V_INDATE, 'dd/mm/yyyy') -
                              REC5.OVDACRDATE;
            V_DBLAMT       := ROUND(REC5.OVD * REC5.RATE3 / 100 * V_INTDAYS /
                                    V_DBLDRATE,
                                    4);
            V_DBLINTOVDACR := V_DBLINTOVDACR + V_DBLAMT;
            --
            V_DBLFEEAMT       := ROUND(REC5.OVD * REC5.CFRATE3 / 100 *
                                       V_INTDAYS / V_DBLDRATE,
                                       4);
            V_DBLFEEINTOVDACR := V_DBLFEEINTOVDACR + V_DBLFEEAMT;
            --
            IF (V_DBLAMT > 0 OR V_DBLFEEAMT > 0) THEN
              INSERT INTO LNINTTRAN
                (AUTOID,
                 ACCTNO,
                 INTTYPE,
                 FRDATE,
                 TODATE,
                 ICRULE,
                 IRRATE,
                 INTBAL,
                 INTAMT,
                 CFIRRATE,
                 FEEINTAMT,
                 LNSCHDID,
                 ACCRUALSAMT)
              VALUES
                (SEQ_CIINTTRAN.NEXTVAL,
                 REC.ACCTNO,
                 'O',
                 REC5.OVDACRDATE,
                 TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 'S',
                 REC5.RATE3,
                 REC5.OVD,
                 V_DBLAMT,
                 REC5.CFRATE3,
                 V_DBLFEEAMT,
                 REC5.AUTOID,
                 trunc(V_DBLAMT)+trunc(V_DBLFEEAMT));
              INSERT INTO LNSCHDLOG
                (AUTOID,
                 TXNUM,
                 TXDATE,
                 NML,
                 OVD,
                 PAID,
                 INTNMLACR,
                 FEE,
                 INTDUE,
                 INTOVD,
                 INTOVDPRIN,
                 FEEDUE,
                 FEEOVD,
                 INTPAID,
                 FEEPAID,
                 FEEINTOVDPRIN,
                 ACCRUALSAMT)
              VALUES
                (REC5.AUTOID,
                 NULL,
                 TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 V_DBLAMT,
                 0,
                 0,
                 0,
                 0,
                 V_DBLFEEAMT,
                 trunc(V_DBLAMT)+trunc(V_DBLFEEAMT));
            END IF;

            UPDATE LNSCHD
               SET OVDACRDATE   = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                   INTOVDPRIN   = INTOVDPRIN + V_DBLAMT,
                   FEEINTOVDACR = FEEINTOVDACR + V_DBLFEEAMT,
                   ACCRUALSAMT = ACCRUALSAMT + trunc(V_DBLAMT)+trunc(V_DBLFEEAMT)
             WHERE AUTOID = REC5.AUTOID;

          END IF;

        END LOOP;
      END IF;

      -- Lai T0
      IF REC.OPRINOVD > 0 THEN
        FOR REC6 IN (SELECT AUTOID,
                            OVD,
                            OVDACRDATE,
                            REFTYPE,
                            INTOVD,
                            FEEINTNMLOVD
                       FROM LNSCHD
                      WHERE ACCTNO = REC.ACCTNO
                        AND OVD > 0
                        AND OVERDUEDATE < TO_DATE(V_INDATE, 'dd/mm/rrrr')
                        AND REFTYPE = 'GP') LOOP
          V_INTDAYS       := TO_DATE(V_INDATE, 'dd/mm/yyyy') -
                             REC6.OVDACRDATE;
          V_DBLAMT        := ROUND(REC6.OVD * REC.ORATE3 / 100 * V_INTDAYS /
                                   V_DBLDRATE,
                                   4);
          V_DBLOINTOVDACR := V_DBLOINTOVDACR + V_DBLAMT;
          IF V_DBLAMT > 0 THEN
            INSERT INTO LNINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT,
               LNSCHDID,
               ACCRUALSAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               'GO',
               REC6.OVDACRDATE,
               TO_DATE(V_INDATE, 'dd/mm/yyyy'),
               'S',
               REC.ORATE3,
               REC6.OVD,
               V_DBLAMT,
               REC6.AUTOID,
               trunc(V_DBLAMT) );
            INSERT INTO LNSCHDLOG
              (AUTOID,
               TXNUM,
               TXDATE,
               NML,
               OVD,
               PAID,
               INTNMLACR,
               FEE,
               INTDUE,
               INTOVD,
               INTOVDPRIN,
               FEEDUE,
               FEEOVD,
               INTPAID,
               FEEPAID,
               ACCRUALSAMT)
            VALUES
              (REC6.AUTOID,
               NULL,
               TO_DATE(V_STRCURRDATE, 'dd/mm/yyyy'),
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               V_DBLAMT,
               0,
               0,
               0,
               0,
               trunc(V_DBLAMT));
          END IF;

          UPDATE LNSCHD
             SET OVDACRDATE = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
                 INTOVDPRIN = INTOVDPRIN + V_DBLAMT,
                 ACCRUALSAMT =ACCRUALSAMT + trunc(V_DBLAMT)
           WHERE AUTOID = REC6.AUTOID;
        END LOOP;
      END IF;

      UPDATE LNMAST
         SET INTNMLACR    = INTNMLACR + V_DBLINTNMLACR,
             OINTNMLACR   = OINTNMLACR + V_DBLOINTNMLACR,
             INTOVDACR    = INTOVDACR + V_DBLINTOVDACR,
             OINTOVDACR   = OINTOVDACR + V_DBLOINTOVDACR,
             FEEINTNMLACR = FEEINTNMLACR + V_DBLFEEINTNMLACR,
             FEEINTOVDACR = FEEINTOVDACR + V_DBLFEEINTOVDACR,
             ACRDATE      = TO_DATE(V_INDATE, 'dd/mm/yyyy'),
             OACRDATE     = TO_DATE(V_INDATE, 'dd/mm/yyyy')
       WHERE ACCTNO = REC.ACCTNO;

    /*        IF REC.FTYPE<>'DF' THEN
                --UPDATE CIMAST SET ODAMT = round(REC.ODAMT,0) + round(v_dblOINTNMLACR,0) + round(v_dblINTNMLACR,0) + round(v_dblINTOVDACR,0) + round(v_dblOINTOVDACR,0)
                --WHERE ACCTNO = REC.TRFACCTNO;
                UPDATE CIMAST SET ODAMT =
                round(rec.PRINNML)+round(rec.PRINOVD)+round(rec.INTNMLACR+v_dblINTNMLACR)+round(rec.INTOVDACR+v_dblINTOVDACR)+round(rec.INTNMLOVD)+round(rec.INTDUE)-round(rec.INTPREPAID)+
                round(rec.OPRINNML)+round(rec.OPRINOVD)+round(rec.OINTNMLACR+v_dblOINTNMLACR)+round(rec.OINTOVDACR+v_dblOINTOVDACR)+round(rec.OINTNMLOVD)+
                round(rec.OINTDUE)-round(rec.OINTPREPAID)+round(rec.FEE)+round(rec.FEEDUE)+round(rec.FEEOVD)+
                +round(rec.FEEINTNMLACR+v_dblFEEINTNMLACR)+round(rec.FEEINTOVDACR+v_dblFEEINTOVDACR)+round(rec.FEEINTNMLOVD)+round(rec.FEEINTDUE)-round(rec.FEEINTPREPAID)
                WHERE ACCTNO = REC.TRFACCTNO;

            END IF;*/
    END LOOP;

-- DONG CAC BIEU HET HIEU LUC
UPDATE lnprminmast SET STATUS = 'C' WHERE expdate <= getcurrdate AND  datetype ='T';
UPDATE lnprminmast SET STATUS = 'C' WHERE valday+closedate <= getcurrdate AND  datetype ='F';




    /*--Reset CIMAST.ODAMT = 0;
    UPDATE CIMAST SET ODAMT = 0;
    for rec_af in
    (
        select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET ODAMT = rec_af.ODAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af

    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af*/
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNNormalInterestAccrue');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNNormalInterestAccrue');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNNORMALINTERESTACCRUE;

  ---------------------------------pr_DFDealFeeAccrue------------------------------------------------
  PROCEDURE PR_DFDEALFEEACCRUE(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE VARCHAR2(10);
    V_CURRDATE VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFDealFeeAccrue');
    V_NEXTDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    V_CURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    UPDATE DFMAST
       SET INTAMTACR = INTAMTACR + ROUND(FEE * (AMT - RLSAMT) / 100 / 360 *
                                         TO_NUMBER(TO_DATE(V_NEXTDATE,
                                                           SYSTEMNUMS.C_DATE_FORMAT) -
                                                   TO_DATE(V_CURRDATE,
                                                           SYSTEMNUMS.C_DATE_FORMAT)),
                                         4)
     WHERE STATUS IN ('P', 'A');
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFDealFeeAccrue');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFDealFeeAccrue');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFDEALFEEACCRUE;

  ---------------------------------pr_SABackupData------------------------------------------------
  PROCEDURE PR_SAONLINESYNDATA(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE VARCHAR2(10);
    V_CURRDATE VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SAOnlineSynData');

    --prc_ol_syndata;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SAOnlineSynData');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAOnlineSynData');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SAONLINESYNDATA;

  ---------------------------------pr_SABeforeBatch------------------------------------------------
  PROCEDURE PR_SABEFOREBATCH(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE   VARCHAR2(10);
    V_CURRDATE   VARCHAR2(10);
    V_DBLTAXRATE NUMBER;
    V_DBLWHTAX   NUMBER;
    L_ERR_PARAM  VARCHAR2(300);
    L_COUNT      NUMBER(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SABeforeBatch');
    P_ERR_CODE   := 0;
    V_CURRDATE   := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    V_DBLTAXRATE := TO_NUMBER(CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                         'ADVSELLDUTY'));

   V_DBLWHTAX := TO_NUMBER(CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                         'WHTAX'));
    /*--Apply tham so thay doi tren loai hinh LNTYPE xuong cac hop dong vay LNMAST
    plog.info(pkgctx,'Begin pr_LNApplyTypeToMaster');
    cspks_lnproc.pr_LNApplyTypeToMaster(p_err_code);
    plog.info(pkgctx,'End pr_LNApplyTypeToMaster');*/

        -- SU LY UPDATE CAC NGAY OVERDUEDATE KHONG DUNG CHUAN
/*KT TK tr?ng th?chua d?ng th??l?i*/
    SELECT COUNT(*) INTO l_count
    FROM afmast af, odmast od
    WHERE af.acctno = od.afacctno
        and af.STATUS = 'P'
        and od.txdate = getcurrdate and od.execqtty > 0;

    IF l_count > 0 THEN
        p_err_code:='-200010';
        plog.ERROR (pkgctx, 'p_err_code:'||p_err_code||', AFMAST.STATUS = P');
        plog.setendsection (pkgctx, 'pr_SABeforeBatch');
        return;
    END IF;

    SELECT COUNT(*) INTO l_count
    FROM cfmast cf, vw_citran_gen ci
    WHERE cf.custid = ci.custid
        and cf.STATUS = 'P' and ci.field = 'BALANCE'
        and ci.txdate = getcurrdate and ci.namt > 0;

    IF l_count > 0 THEN
        p_err_code:='-200069';
        plog.ERROR (pkgctx, 'p_err_code:'||p_err_code||', AFMAST.STATUS = P');
        plog.setendsection (pkgctx, 'pr_SABeforeBatch');
        return;
    END IF;
 --end
        FOR REC IN (
        SELECT  getduedate(get_t_date( overduedate ,1) ,'B','000',1) newoverduedate ,  overduedate , LN.AUTOID  FROM lnschd LN , sbcldr SB
        WHERE LN.overduedate =SB.sbdate
        AND cldrtype ='000' AND holiday ='Y')

        LOOP
        UPDATE lnschd SET overduedate  = rec.newoverduedate WHERE AUTOID = REC.AUTOID;
        END LOOP ;


    SELECT COUNT(1)
      INTO L_COUNT
      FROM ODMAST A,
           (SELECT *
              FROM ODMAPEXT
             WHERE DELTD <> 'Y'
               AND STATUS <> 'Y'
             ORDER BY ORDERID) B,
           SBSECURITIES C,
           AFMAST D,
           CFMAST E,
           SECURITIES_INFO F
     WHERE A.ORDERID = B.ORDERID
       AND A.CODEID = C.CODEID
       AND D.ACCTNO = A.AFACCTNO
       AND D.CUSTID = E.CUSTID
       AND A.CODEID = F.CODEID
       AND A.EXECTYPE = 'NS'
       AND A.MATCHTYPE = 'P'
       AND A.GRPORDER = 'Y'
       AND A.DELTD <> 'Y';

    IF L_COUNT > 0 THEN
      P_ERR_CODE := '-100722';
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABeforeBatch');
      RETURN;
    END IF;

    --HaiLT them de giai toa cho lenh thoan thuan tong
    FOR REC IN (SELECT *
                  FROM ODMAST
                 WHERE MATCHTYPE = 'P'
                   AND DELTD <> 'Y'
                   AND REMAINQTTY > 0) LOOP
      CSPKS_SEPROC.PR_EXECUTEOD9996(REC.ORDERID, P_ERR_CODE, L_ERR_PARAM);
    END LOOP;
    --End of HaiLT them de giai toa cho lenh thoan thuan tong

    --Begin GianhVG them phan thue se thu cho lenh ban trong ngay
    BEGIN
      FOR REC IN (SELECT MST.ORDERID,
                         MST.EXECQTTY,
                         MST.EXECAMT,
                         NVL(PIT.RLSAMT, 0) RLSAMT,CF.vat ,CF.whtax
                    FROM ODMAST MST,
                         AFMAST AF,
                         AFTYPE AFT,
                         (SELECT ORGORDERID, SUM(QTTY) PITQTTY, 0 RLSAMT
                            FROM SEPITALLOCATE PIT,
                                 ODMAST        OD,
                                 SBSECURITIES  SB
                           WHERE PIT.ORGORDERID = OD.ORDERID
                             AND OD.CODEID = SB.CODEID
                           GROUP BY ORGORDERID) PIT,
                         CFMAST CF
                   WHERE MST.EXECTYPE IN ('NS', 'MS')
                     AND MST.AFACCTNO = AF.ACCTNO
                     AND AF.CUSTID = CF.CUSTID
                     AND AF.ACTYPE = AFT.ACTYPE
                     AND ( CF.VAT = 'Y' OR  CF.whtax = 'Y')
                     AND TXDATE = TO_DATE(V_CURRDATE, 'DD/MM/RRRR')
                     AND MST.EXECQTTY > 0
                     AND MST.DELTD <> 'Y'
                     AND MST.ORDERID = PIT.ORGORDERID(+)) LOOP
        UPDATE ODMAST
           SET TAXRATE    = DECODE (REC.VAT,'Y', V_DBLTAXRATE,'N',0) + DECODE (REC.whtax,'Y', V_DBLWHTAX,'N',0),
               TAXSELLAMT = ROUND(( DECODE (REC.VAT,'Y', V_DBLTAXRATE,'N',0) + DECODE (REC.whtax,'Y', V_DBLWHTAX,'N',0)) * (REC.EXECAMT - REC.RLSAMT) / 100,
                                  0)
         WHERE ORDERID = REC.ORDERID;
        PR_ALLOCATE_IOD_TAX(REC.ORDERID); --Gianh VG moi them
      END LOOP;

    EXCEPTION
      WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR(PKGCTX, 'Error when then data for buffer.');
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_SABeforeBatch');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END;
    --End  GianhVG them phan thue se thu cho lenh ban trong ngay

    -- HSX04: Phan bo lai GT ung truoc lenh ban
    cspks_ciproc.pr_AllocationAdvancedPayment('ALL', p_err_code);

    PLOG.SETENDSECTION(PKGCTX, 'pr_SABeforeBatch');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABeforeBatch');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SABEFOREBATCH;

  ---------------------------------pr_SAAfterBatch------------------------------------------------
  PROCEDURE PR_SAAFTERINDAYPROCESS(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE        VARCHAR2(10);
    V_CURRDATE        VARCHAR2(10);
    L_MAXDEBTQTTYRATE NUMBER(20, 0);
    L_MAXDEBTSE       NUMBER(20, 0);
    L_IRATIO          NUMBER(20, 0);
    V_INDATE          VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SAAfterBatch');

    /*-- update cimast set odamt
    --Reset CIMAST.ODAMT = 0;
    UPDATE CIMAST SET ODAMT = 0;
    for rec_af in
    (
        select trfacctno, round(sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID)) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET ODAMT = rec_af.ODAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af


    -- update cimast set dueamt
    V_INDATE:= cspks_system.fn_get_sysvar('SYSTEM','CURRDATE');

    UPDATE CIMAST SET DUEAMT = 0;
    FOR REC IN
    (
        select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno
    )
    LOOP
        UPDATE CIMAST SET DUEAMT = round(DUEAMT + REC.NML,0) WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;

    -- update cimast set ovamt
    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    for rec_af in
    (
        select trfacctno, round(sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID)) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af

      update securities_info
         set dfrefprice         = fn_get_refprice_nextdate(codeid, AVGPRICE, 2),
             margincallprice    = fn_get_refprice_nextdate(codeid, AVGPRICE, 2),
             marginrefcallprice = fn_get_refprice_nextdate(codeid, AVGPRICE, 2);

    --Tu dong Gom cac bang ke pending ra ngan hang

    --Tu dong Gom cac bang ke pending ra ngan hang
    cspks_rmproc.sp_exec_create_crbtrflog_multi('ALL',p_err_code);
    if p_err_code <> '0' then
        plog.error (pkgctx, dbms_utility.format_error_backtrace);
        plog.setendsection(pkgctx, 'pr_SAAfterBatch');
        return;
    end if;
    p_err_code:=0;*/

    -- Log trigger margin account
    IF NOT CSPKS_MRPROC.FN_TRIGGERACCOUNTLOG('BF',P_ERR_CODE) THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RETURN;
    END IF;

   IF CSPKS_SAPROC.FN_CAL_MARGIN_ROOMUSED(P_ERR_CODE) <> 0 THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
        PLOG.ERROR(PKGCTX, 'Loi tinh toan RoomUsed');
        PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
        RETURN;
   END IF;

    IF txpks_prchk.fn_reset_prinused(P_ERR_CODE) <> 0 THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
        PLOG.ERROR(PKGCTX, 'Loi tinh toan fn_reset_prinused');
        PLOG.SETENDSECTION(PKGCTX, 'fn_reset_prinused');
        RETURN;
     END IF;



        ---------------------------------------
--Dong bo lai buffer.
    PLOG.DEBUG(PKGCTX, 'Begin gen SE buffer');
    JBPKS_AUTO.PR_GEN_BUF_SE_ACCOUNT;
    PLOG.DEBUG(PKGCTX, 'End gen SE buffer');
    COMMIT;

    PLOG.DEBUG(PKGCTX, 'Begin gen OD buffer');
    JBPKS_AUTO.PR_GEN_BUF_OD_ACCOUNT;
    PLOG.DEBUG(PKGCTX, 'End gen OD buffer');
    COMMIT;
    PR_GENCIBUFALL;
    COMMIT;

    --PR_CompleteVoucher
    TXPKS_BATCH.PR_CompleteVoucher('SAAFINDAY',P_ERR_CODE);

 -- SMS: gui tin nhan thong bao call
        nmpks_ems.GenTemplate0224('0224');
 -- SMS : gui tin nhan thong bao tra lai trai phieu otc
        nmpks_ems.GenTemplate0331(getcurrdate());

--- KHONG DE CAC BUOC LAM THAY DOI TIEN VA CK SAU BUOC NAY.

-- CAP NHAT LAI TRANG HOI SO SAU BATCH GIUA NGAY.
    UPDATE SYSVAR
       SET VARVALUE = '1'
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'HOSTATUS';
    COMMIT;

    PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SAAFTERINDAYPROCESS;

  ---------------------------------pr_SAAfterBatch------------------------------------------------
  PROCEDURE PR_SAAFTERBATCH(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE        VARCHAR2(10);
    V_CURRDATE        VARCHAR2(10);
    L_MAXDEBTQTTYRATE NUMBER(20, 4);
    L_MAXDEBTSE       NUMBER(20, 0);
    L_IRATIO          NUMBER(20, 4);
    V_PRINUSED        NUMBER;
    V_COUNT number;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SAAfterBatch');
    --Tu dong Gom cac bang ke pending ra ngan hang
    CSPKS_RMPROC.SP_EXEC_CREATE_CRBTRFLOG_MULTI('ALL', P_ERR_CODE);
    IF P_ERR_CODE <> '0' THEN
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RETURN;
    END IF;

    IF NOT CSPKS_CFPROC.fn_ChangeCftype4expdate(P_ERR_CODE) THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
    END IF;

    IF NOT CSPKS_CFPROC.FN_APPLYTYPETOMAST(P_ERR_CODE) THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RETURN;
    END IF;

    -- Log trigger margin account
    IF NOT CSPKS_MRPROC.FN_TRIGGERACCOUNTLOG('AT',P_ERR_CODE) THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RETURN;
    END IF;

    -- Cap nhat lai SECURITIES_INFO.ROOMLIMIT
    SELECT TO_NUMBER(VARVALUE) / 100
      INTO L_MAXDEBTQTTYRATE
      FROM SYSVAR
     WHERE GRNAME = 'MARGIN'
       AND VARNAME = 'MAXDEBTQTTYRATE';
    SELECT TO_NUMBER(VARVALUE)
      INTO L_MAXDEBTSE
      FROM SYSVAR
     WHERE GRNAME = 'MARGIN'
       AND VARNAME = 'MAXDEBTSE';
    SELECT 1 - TO_NUMBER(VARVALUE) / 100
      INTO L_IRATIO
      FROM SYSVAR
     WHERE GRNAME = 'MARGIN'
       AND VARNAME = 'IRATIO';

    UPDATE SECURITIES_INFO
       SET ROOMLIMIT = LEAST(LISTINGQTTY * L_MAXDEBTQTTYRATE,
                             L_MAXDEBTSE / MARGINREFPRICE / L_IRATIO)
     WHERE MARGINREFPRICE <> 0
       AND L_IRATIO <> 0;

    --Update lai room toan he thong va room margin theo rm thiet lap lai cuoi ngay
    FOR REC IN (SELECT *
                  FROM SECURITIES_INFO
                 WHERE SYROOMLIMIT_SET + ROOMLIMITMAX_SET + ROOMLIMITMAX +
                       SYROOMLIMIT > 0) LOOP
      --Cap nhat room he thong
      BEGIN
        SELECT NVL(AFPR.PRINUSED, 0) + SB.SYROOMUSED
          INTO V_PRINUSED
          FROM SECURITIES_INFO SB,
               (SELECT CODEID, SUM(PRINUSED) PRINUSED
                  FROM VW_AFPRALLOC_ALL
                 WHERE RESTYPE = 'S'
                 GROUP BY CODEID) AFPR
         WHERE SB.CODEID = AFPR.CODEID(+)
           AND SB.CODEID = REC.CODEID;
      EXCEPTION
        WHEN OTHERS THEN
          V_PRINUSED := 0;
      END;

      UPDATE SECURITIES_INFO
         SET SYROOMLIMIT = GREATEST(SYROOMLIMIT_SET, V_PRINUSED)
       WHERE CODEID = REC.CODEID;
      --Cap nhat room margin
      BEGIN
        SELECT NVL(SUM(PRINUSED), 0)
          INTO V_PRINUSED
          FROM VW_AFPRALLOC_ALL
         WHERE RESTYPE = 'M'
           AND CODEID = REC.CODEID;
      EXCEPTION
        WHEN OTHERS THEN
          V_PRINUSED := 0;
      END;
      UPDATE SECURITIES_INFO
         SET ROOMLIMITMAX = GREATEST(ROOMLIMITMAX_SET, V_PRINUSED)
       WHERE CODEID = REC.CODEID;
    END LOOP;

    -- Release AdvanceLine:
    IF CSPKS_MRPROC.FN_RELEASEADVANCELINE(P_ERR_CODE) <>
       SYSTEMNUMS.C_SUCCESS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, 'Error when Release AdvanceLine.');
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
    END IF;

    V_CURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');

    --Gen du lieu dau ngay cho buffer
    /*begin
        plog.debug(pkgctx,'Begin gen SE buffer');
        fopks_api.pr_gen_buf_se_account;
        plog.debug(pkgctx,'End gen SE buffer');
        commit;
        plog.debug(pkgctx,'Begin gen CI buffer');
        fopks_api.pr_gen_buf_ci_account;
        plog.debug(pkgctx,'End gen CI buffer');
        commit;
        plog.debug(pkgctx,'Begin gen OD buffer');
        fopks_api.pr_gen_buf_od_account;
        plog.debug(pkgctx,'End gen CI buffer');
        commit;
    EXCEPTION when others then
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, 'Error when then data for buffer.');
        plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
        plog.setendsection (pkgctx, 'pr_SAAfterBatch');
        RAISE errnums.E_SYSTEM_ERROR;
    end;*/
    --Gen du lieu dau ngay cho buffer
    BEGIN

    --2.1.11.0: ko cap nhat tran/san cho ma TPDN
     UPDATE SECURITIES_INFO
     SET CEILINGPRICE       = NEWCEILINGPRICE,
         FLOORPRICE         = NEWFLOORPRICE
     WHERE NVL(AVGPRICE, 0) > 0
       AND NEWPRICE = '1'
       AND CODEID IN (SELECT CODEID FROM SBSECURITIES WHERE SECTYPE NOT IN ('012'));

      -- Ducnv FF Gateway
      UPDATE SECURITIES_INFO
         SET BASICPRICE         = NEWBASICPRICE,
             --CEILINGPRICE       = NEWCEILINGPRICE,
             --FLOORPRICE         = NEWFLOORPRICE,
             DFRLSPRICE         = AVGPRICE,
             DFREFPRICE         = AVGPRICE,
            MARGINPRICE        = AVGPRICE,
             MARGINCALLPRICE    = AVGPRICE,
             MARGINREFCALLPRICE = AVGPRICE,
             MARGINREFPRICE     = AVGPRICE,
             NEWPRICE           = '0'
       WHERE NVL(AVGPRICE, 0) > 0
         AND NEWPRICE = '1';
      --------- END Ducnv FF Gateway-----

      --cspks_ciproc.pr_CALCI1110(p_err_code);
      CSPKS_CAPROC.PR_CALAUTOCA3342(P_ERR_CODE);

      PLOG.DEBUG(PKGCTX, 'Begin gen SE buffer');
      JBPKS_AUTO.PR_GEN_BUF_SE_ACCOUNT;
      PLOG.DEBUG(PKGCTX, 'End gen SE buffer');
      COMMIT;

      --Thucnt: Them de insert tu buf_se_account vao _buf_se_policy_acc cua tu doanh
      DELETE FROM BUF_SE_POLICY_ACC;
      INSERT INTO BUF_SE_POLICY_ACC
        SELECT *
          FROM BUF_SE_ACCOUNT
         WHERE AFACCTNO IN (SELECT ACCTNO FROM AFMAST WHERE ISPM = 'Y');
      COMMIT;
      --Thucnt: Ket thuc them

      PLOG.DEBUG(PKGCTX, 'Begin gen OD buffer');
      JBPKS_AUTO.PR_GEN_BUF_OD_ACCOUNT;
      PLOG.DEBUG(PKGCTX, 'End gen OD buffer');
      COMMIT;
      /*plog.debug(pkgctx,'Begin gen CI buffer');
      fopks_api.pr_gen_buf_ci_account;
      plog.debug(pkgctx,'End gen CI buffer');*/

      /*begin
        dbms_scheduler.create_job(
          job_name           =>  'JOBpr_gen_buf_ci_account',
          job_type           =>  'STORED_PROCEDURE',
          job_action         =>  'HOST.fopks_api.pr_gen_buf_ci_account',
          start_date=>null,
          repeat_interval=>null,
          enabled=>true,
          comments           =>  'Gen CI Job');
      end;*/

      INSERT INTO MR9000_LOGHIST
        (CUSTODYCD,
         ACTYPE,
         AFACCTNO,
         CAREBY,
         TRFBUYDT,
         TRFBUYEXT,
         FULLNAME,
         TRFAMT,
         OVDAMT,
         BALANCE,
         AVLADVANCE,
         TOTALVND,
         EXVNDAMT,
         AVLMARGIN,
         EXMARGINAMT,
         EXT0AMT,
         CALLAMT,
         RTNAMT,
         ACCTNOKEY,
         AFTRFBUYEXT,
         TXDATE)
        SELECT CUSTODYCD,
               ACTYPE,
               AFACCTNO,
               CAREBY,
               TRFBUYDT,
               TRFBUYEXT,
               FULLNAME,
               TRFAMT,
               OVDAMT,
               BALANCE,
               AVLADVANCE,
               TOTALVND,
               EXVNDAMT,
               AVLMARGIN,
               EXMARGINAMT,
               EXT0AMT,
               CALLAMT,
               RTNAMT,
               ACCTNOKEY,
               AFTRFBUYEXT,
               TXDATE
          FROM MR9000_LOG;

      DELETE MR9000_LOG;

      /*        insert into mr9000_log
      (custodycd, actype, afacctno, careby, trfbuydt,
             trfbuyext, fullname, trfamt, ovdamt, balance,
             avladvance, totalvnd, exvndamt, avlmargin, exmarginamt,
             ext0amt, callamt, rtnamt, acctnokey, aftrfbuyext, txdate)
      SELECT custodycd, actype, afacctno, careby, trfbuydt,
             trfbuyext, fullname, trfamt, ovdamt, balance,
             avladvance, totalvnd, exvndamt, avlmargin, exmarginamt,
             ext0amt, callamt, rtnamt, acctnokey, aftrfbuyext, TO_DATE(v_currdate,'DD/MM/RRRR') txdate
        FROM vw_mr9000;*/

      --Log lai nhung tai khoan bi call sau khi chay batch
      CSPKS_LOGPROC.PR_LOG_MR0002('AF-END');
             ---
           CSPKS_LOGPROC.PR_LOG_MR0056('AF-END');

            cspks_logproc.pr_log_mr0064('AF-END');
        ---
      ---CSPKS_LOGPROC.PR_LOG_MR3008('AF-END');
      ---CSPKS_LOGPROC.PR_LOG_MR3009('AF-END');

    IF CSPKS_SAPROC.FN_CAL_MARGIN_ROOMUSED(P_ERR_CODE) <> 0 THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
        PLOG.ERROR(PKGCTX, 'Loi tinh toan RoomUsed');
        PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
        RETURN;
     END IF;

      IF txpks_prchk.fn_reset_prinused(P_ERR_CODE) <> 0 THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
        PLOG.ERROR(PKGCTX, 'Loi tinh toan fn_reset_prinused');
        PLOG.SETENDSECTION(PKGCTX, 'fn_reset_prinused');
        RETURN;
     END IF;

      PR_GENCIBUFALL;
      COMMIT;
      -- cap nhat lai thue
      UPDATE SYSVAR
         SET VARVALUE =
             (SELECT VARVALUE FROM SYSVAR WHERE VARNAME = 'ADVSELLDUTY_SET')
       WHERE VARNAME = 'ADVSELLDUTY';

      -- gui mail tu dong tai khoan T3
      --nmpks_ems.emailsmsauto();
      -- gui sms nhac hh dk quyen 3 ngay
      NMPKS_EMS.GENNOTIFYEVENT('SCHD0326', '0326');
      -- gui sms nhac sap den han tra no (5 ngay)
      NMPKS_EMS.GENNOTIFYEVENT('LNREMINDER', '327C');
      -- gui sms gui quan tri rui ro
      NMPKS_EMS.GENNOTIFYEVENT('QAREMINDER', '0304');
      -- gui email nhac no den han truoc 5 ngay
      NMPKS_EMS.GENNOTIFYEVENT('SCHD0219', '0219');
      --GUI EMAIL LENH CUOI NGAY
      NMPKS_EMS.GenTemplate0215('0215');
      --nhan su kien thuc hien quen 3342
      ---email cuoi thang
            SELECT COUNT(1) INTO V_COUNT  FROM sysvar a1,sysvar a2 WHERE a1.varname = 'CURRDATE' AND a2.varname = 'PREVDATE'
      AND SUBSTR(a1.varvalue,4,2) <> SUBSTR(a2.varvalue,4,2);
            IF V_COUNT <> 0 THEN
               NMPKS_EMS.GENNOTIFYEVENT('EOMEMAIL', '0214');
            END IF;

      CSPKS_LOGPROC.PR_LOG_MR0058('AF-END');
      CSPKS_LOGPROC.PR_LOG_MR0060('AF-END');
      CSPKS_LOGPROC.PR_LOG_MR0063('AF-END');
      CSPKS_LOGPROC.PR_LOG_MR0059('AF-END');
      CSPKS_LOGPROC.PR_LOG_MR0057('AF-END');
      CSPKS_LOGPROC.PR_LOG_VMR0001('AF-END');

      DELETE msgreceivetemp_HIST WHERE MSG_DATE < TRUNC(SYSDATE)-30;
      DELETE msgreceivetemp_HA_HIST WHERE MSG_DATE < TRUNC(SYSDATE)-30;

      insert into login_info_bo_hist value (select * from login_info_bo where status = 'C');
      delete from login_info_bo where status = 'C';

    EXCEPTION
      WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR(PKGCTX, 'Error when then data for buffer.');
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAAfterBatch');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SAAFTERBATCH;
  ---------------------------------pr_SABackupData------------------------------------------------
  PROCEDURE PR_SABACKUPDATA(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE   VARCHAR2(10);
    V_CURRDATE   VARCHAR2(10);
    V_STRFRTABLE VARCHAR2(100);
    V_STRTOTABLE VARCHAR2(100);
    V_STRSQL     VARCHAR2(2000);
    V_SQL1       VARCHAR2(1000);
    V_SQL2       VARCHAR2(1000);
    V_ERR        VARCHAR2(200);
    V_COUNT      NUMBER(10);
    v_BKDATE7    DATE;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SABackupData');
    V_NEXTDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    V_CURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');

    v_BKDATE7 := get_t_date ( TO_DATE (V_CURRDATE,'DD/MM/YYYY'),7);
    --Hien thuc hoa lai/lo khi danh muc het chung khoan.
    /*UPDATE SEMAST SET ACCUMULATEPNL= TOTALSELLAMT-TOTALBUYAMT --,COSTPRICE=0
    WHERE PREVQTTY=0 AND TRADE = 0;*/

    --Xu ly REvert cac khoan Hold, Unhold chua duoc xu ly
    FOR REC IN (SELECT TRFCODE, REQID
                  FROM CRBTXREQ REQ, SYSVAR SYS
                 WHERE REQ.TRFCODE IN ('HOLD', 'UNHOLD')
                   AND REQ.STATUS = 'P'
                   AND REQ.OBJTYPE IN ('T', 'V')
                   AND REQ.TRFCODE IN ('HOLD', 'UNHOLD')
                   AND REQ.STATUS = 'P'
                   AND REQ.TXDATE = TO_DATE(SYS.VARVALUE, 'DD/MM/RRRR')
                   AND SYS.GRNAME = 'SYSTEM'
                   AND SYS.VARNAME = 'CURRDATE'
                   AND NOT EXISTS
                 (SELECT *
                          FROM TLLOGFLD FLD, TLLOG TL
                         WHERE FLD.TXNUM = TL.TXNUM
                           AND FLD.FLDCD = '22'
                           AND TL.TLTXCD IN ('6660', '6661', '6620', '6621')
                           AND FLD.CVALUE = TO_CHAR(REQ.REQID))
                   AND NOT EXISTS (SELECT *
                          FROM CRBTXREQLOG LG
                         WHERE REQ.REFCODE = LG.REFCODE
                           AND REQ.BANKCODE = LG.BANKCODE
                           AND REQ.TRFCODE = LG.TRFCODE
                           AND REQ.TXDATE = LG.TXDATE
                           AND LG.STATUS = 'C')
                 ORDER BY REQ.REQID, REQ.TXDATE) LOOP
      CSPKS_RMPROC.PR_CREATEREVERTHOLDTRANSACT(REC.REQID, P_ERR_CODE);
    END LOOP;
    IF P_ERR_CODE <> '0' THEN
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABackupData');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
    ELSE
      P_ERR_CODE := 0;
      -- plog.setendsection(pkgctx, 'pr_SABackupData');
    END IF;
 -- HaiLT them de tu dong dong tieu khoan
  TXPKS_BATCH.PR_AUTOCLOSEAFMAST('SABKDT', P_ERR_CODE);

    -- gen 1192
 CSPKS_CIPROC.PR_CALCI1192(P_ERR_CODE);

RESET_SEQUENCE(SEQ_NAME => 'SEQ_TR_BOOKITEM_PZT', STARTVALUE => 1);
RESET_SEQUENCE(SEQ_NAME => 'SEQ_TR_BOOKITEM_TLJ_TOTAL', STARTVALUE => 1);
    BEGIN
    GEN_GLTRAN('ALL', V_CURRDATE);
    COMMIT;
    SP_GENERATE_TRFGL(V_CURRDATE);
    COMMIT;
  -- tong hop du lieu ngoai bang
 INSERT INTO GLBSACCOUNT(GLCUSTTYPE,FIELD,txtype,TXDATE,NAMT)
SELECT SUBSTR(cf.custodycd,4,1) GLCUSTTYPE,FIELD, txtype,se.busdate TXDATE,SUM(NAMT* SB.parvalue) NAMT
 FROM vw_setran_gen se, cfmast cf ,sbsecurities SB
  WHERE  FIELD IN (SELECT cdval FROM ALLCODE WHERE CDNAME LIKE '%SEFIELDS%')
AND deltd <>'Y'
and se.custid = cf.custid
and cf.custatcom ='Y'
AND SE.codeid = SB.codeid
AND SB.sectype <>'004'
AND  sb.tradeplace <>'006'
and se.busdate = v_BKDATE7
group by SUBSTR(cf.custodycd,4,1) ,FIELD, txtype,se.busdate ;
   commit;
    EXCEPTION
      WHEN OTHERS THEN
        PLOG.ERROR(PKGCTX, 'GEN GL');
        PLOG.ERROR(PKGCTX, SQLERRM);
    END;
    pr_gencibufall;
    COMMIT;
    CSPKS_CFPROC.PR_DAILYLOGCFIFNO(P_ERR_CODE);
   -- CSPKS_CFPROC.Pr_Cfreview_Result(P_ERR_CODE);

    IF P_ERR_CODE <> '0' THEN
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABackupData');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
    ELSE
      P_ERR_CODE := 0;
    END IF;

    --Gen du lieu vao truong cfcustodycd va cffullname cho truy van lich su giao dich.
    PR_GEN_TLLOG_INFOR;

    --Gen du lieu cuoi ngay cho phan he CI
    INSERT INTO CITRAN_GEN
      (AUTOID,
       CUSTODYCD,
       CUSTID,
       TXNUM,
       TXDATE,
       ACCTNO,
       TXCD,
       NAMT,
       CAMT,
       REF,
       DELTD,
       ACCTREF,
       TLTXCD,
       BUSDATE,
       TXDESC,
       TXTIME,
       BRID,
       TLID,
       OFFID,
       CHID,
       DFACCTNO,
       OLD_DFACCTNO,
       TXTYPE,
       FIELD,
       TLLOG_AUTOID,
       TRDESC,
       COREBANK)
      SELECT CI.AUTOID,
             CF.CUSTODYCD,
             CF.CUSTID,
             CI.TXNUM,
             CI.TXDATE,
             CI.ACCTNO,
             CI.TXCD,
             CI.NAMT,
             CI.CAMT,
             CI.REF,
             NVL(CI.DELTD, 'N') DELTD,
             CI.ACCTREF,
             TL.TLTXCD,
             TL.BUSDATE,
             CASE
               WHEN TL.TLID = '6868' THEN
                TRIM(TL.TXDESC) || ' (Online)'
               ELSE
                TL.TXDESC
             END TXDESC,
             TL.TXTIME,
             TL.BRID,
             TL.TLID,
             TL.OFFID,
             TL.CHID,
             CASE
               WHEN TL.TLTXCD IN ('2670') THEN
                CI.REF
               ELSE
                DF.ACCTNO
             END DFACCTNO,
             '' OLD_DFACCTNO,
             APP.TXTYPE,
             APP.FIELD,
             TL.AUTOID,
             CASE
               WHEN CI.TRDESC IS NOT NULL THEN
                (CASE
                  WHEN TL.TLID = '6868' THEN
                   TRIM(CI.TRDESC) || ' (Online)'
                  ELSE
                   CI.TRDESC
                END)
               ELSE
                CI.TRDESC
             END TRDESC,
             CI.COREBANK
        FROM CITRAN CI,
             TLLOG TL,
             CFMAST CF,
             AFMAST AF,
             APPTX APP,
             (SELECT NVL(MAX(ACCTNO), GROUPID) ACCTNO, LNACCTNO
                FROM VW_DFMAST_ALL
               GROUP BY GROUPID, LNACCTNO) DF
       WHERE CI.TXDATE = TL.TXDATE
         AND CI.TXNUM = TL.TXNUM
         AND CF.CUSTID = AF.CUSTID
         AND CI.ACCTNO = AF.ACCTNO
         AND CI.TXCD = APP.TXCD
         AND APP.APPTYPE = 'CI'
         AND APP.TXTYPE IN ('D', 'C')
         AND CI.REF = DF.LNACCTNO(+)
         AND TL.DELTD <> 'Y'
         AND CI.NAMT <> 0;
    COMMIT;

    INSERT INTO citran_gendelt
      (AUTOID,
       CUSTODYCD,
       CUSTID,
       TXNUM,
       TXDATE,
       ACCTNO,
       TXCD,
       NAMT,
       CAMT,
       REF,
       DELTD,
       ACCTREF,
       TLTXCD,
       BUSDATE,
       TXDESC,
       TXTIME,
       BRID,
       TLID,
       OFFID,
       CHID,
       DFACCTNO,
       OLD_DFACCTNO,
       TXTYPE,
       FIELD,
       TLLOG_AUTOID,
       TRDESC,
       COREBANK)
      SELECT CI.AUTOID,
             CF.CUSTODYCD,
             CF.CUSTID,
             CI.TXNUM,
             CI.TXDATE,
             CI.ACCTNO,
             CI.TXCD,
             CI.NAMT,
             CI.CAMT,
             CI.REF,
             NVL(CI.DELTD, 'N') DELTD,
             CI.ACCTREF,
             TL.TLTXCD,
             TL.BUSDATE,
             CASE
               WHEN TL.TLID = '6868' THEN
                TRIM(TL.TXDESC) || ' (Online)'
               ELSE
                TL.TXDESC
             END TXDESC,
             TL.TXTIME,
             TL.BRID,
             TL.TLID,
             TL.OFFID,
             TL.CHID,
             CASE
               WHEN TL.TLTXCD IN ('2670') THEN
                CI.REF
               ELSE
                DF.ACCTNO
             END DFACCTNO,
             '' OLD_DFACCTNO,
             APP.TXTYPE,
             APP.FIELD,
             TL.AUTOID,
             CASE
               WHEN CI.TRDESC IS NOT NULL THEN
                (CASE
                  WHEN TL.TLID = '6868' THEN
                   TRIM(CI.TRDESC) || ' (Online)'
                  ELSE
                   CI.TRDESC
                END)
               ELSE
                CI.TRDESC
             END TRDESC,
             CI.COREBANK
        FROM CITRAN CI,
             TLLOG TL,
             CFMAST CF,
             AFMAST AF,
             APPTX APP,
             (SELECT NVL(MAX(ACCTNO), GROUPID) ACCTNO, LNACCTNO
                FROM VW_DFMAST_ALL
               GROUP BY GROUPID, LNACCTNO) DF
       WHERE CI.TXDATE = TL.TXDATE
         AND CI.TXNUM = TL.TXNUM
         AND CF.CUSTID = AF.CUSTID
         AND CI.ACCTNO = AF.ACCTNO
         AND CI.TXCD = APP.TXCD
         AND APP.APPTYPE = 'CI'
         AND APP.TXTYPE IN ('D', 'C')
         AND CI.REF = DF.LNACCTNO(+)
         AND TL.DELTD = 'Y'
         AND CI.NAMT <> 0;
    COMMIT;
    --DoNT:Log citran_gen cua cac GD da xoa

    -- Gen data giao dich phan he SE
    -- DoNT: Gen them truong offtime trong tllog.31/08/2016
    INSERT INTO SETRAN_GEN
      (AUTOID,
       CUSTODYCD,
       CUSTID,
       TXNUM,
       TXDATE,
       ACCTNO,
       TXCD,
       NAMT,
       CAMT,
       REF,
       DELTD,
       ACCTREF,
       TLTXCD,
       BUSDATE,
       TXDESC,
       TXTIME,
       BRID,
       TLID,
       OFFID,
       CHID,
       AFACCTNO,
       SYMBOL,
       SECTYPE,
       TRADEPLACE,
       TXTYPE,
       FIELD,
       CODEID,
       TLLOG_AUTOID,
       TRDESC,
       SEOFFTIME,
       SETXSTATUS)
      SELECT TR.AUTOID,
             CF.CUSTODYCD,
             CF.CUSTID,
             TR.TXNUM,
             TR.TXDATE,
             TR.ACCTNO,
             TR.TXCD,
             TR.NAMT,
             TR.CAMT,
             TR.REF,
             TR.DELTD,
             TR.ACCTREF,
             TL.TLTXCD,
             TL.BUSDATE,
             CASE
               WHEN TL.TLID = '6868' THEN
                TRIM(TL.TXDESC) || ' (Online)'
               ELSE
                TL.TXDESC
             END TXDESC,
             TL.TXTIME,
             TL.BRID,
             TL.TLID,
             TL.OFFID,
             TL.CHID,
             SE.AFACCTNO,
             SB.SYMBOL,
             SB.SECTYPE,
             SB.TRADEPLACE,
             AP.TXTYPE,
             AP.FIELD,
             SB.CODEID,
             TL.AUTOID,
             CASE
               WHEN TR.TRDESC IS NOT NULL THEN
                (CASE
                  WHEN TL.TLID = '6868' THEN
                   TRIM(TR.TRDESC) || ' (Online)'
                  ELSE
                   TR.TRDESC
                END)
               ELSE
                TR.TRDESC
             END TRDESC,
             TL.OFFTIME,
             TL.TXSTATUS
        FROM SETRAN       TR,
             TLLOG        TL,
             SBSECURITIES SB,
             SEMAST       SE,
             CFMAST       CF,
             APPTX        AP
       WHERE TR.TXDATE = TL.TXDATE
         AND TR.TXNUM = TL.TXNUM
         AND TR.ACCTNO = SE.ACCTNO
         AND SB.CODEID = SE.CODEID
         AND SE.CUSTID = CF.CUSTID
         AND TR.TXCD = AP.TXCD
         AND AP.APPTYPE = 'SE'
         AND AP.TXTYPE IN ('D', 'C')
         AND TL.DELTD <> 'Y'
         AND TR.NAMT <> 0;
    COMMIT;

    --DoNT:Gen du lieu cac giao dich da xoa
    INSERT INTO SETRAN_GEN
      (AUTOID,
       CUSTODYCD,
       CUSTID,
       TXNUM,
       TXDATE,
       ACCTNO,
       TXCD,
       NAMT,
       CAMT,
       REF,
       DELTD,
       ACCTREF,
       TLTXCD,
       BUSDATE,
       TXDESC,
       TXTIME,
       BRID,
       TLID,
       OFFID,
       CHID,
       AFACCTNO,
       SYMBOL,
       SECTYPE,
       TRADEPLACE,
       TXTYPE,
       FIELD,
       CODEID,
       TLLOG_AUTOID,
       TRDESC,
       SEOFFTIME,
       SETXSTATUS)
      SELECT TR.AUTOID,
             CF.CUSTODYCD,
             CF.CUSTID,
             TR.TXNUM,
             TR.TXDATE,
             TR.ACCTNO,
             TR.TXCD,
             TR.NAMT,
             TR.CAMT,
             TR.REF,
             TR.DELTD,
             TR.ACCTREF,
             TL.TLTXCD,
             TL.BUSDATE,
             CASE
               WHEN TL.TLID = '6868' THEN
                TRIM(TL.TXDESC) || ' (Online)'
               ELSE
                TL.TXDESC
             END TXDESC,
             TL.TXTIME,
             TL.BRID,
             TL.TLID,
             TL.OFFID,
             TL.CHID,
             SE.AFACCTNO,
             SB.SYMBOL,
             SB.SECTYPE,
             SB.TRADEPLACE,
             AP.TXTYPE,
             AP.FIELD,
             SB.CODEID,
             TL.AUTOID,
             CASE
               WHEN TR.TRDESC IS NOT NULL THEN
                (CASE
                  WHEN TL.TLID = '6868' THEN
                   TRIM(TR.TRDESC) || ' (Online)'
                  ELSE
                   TR.TRDESC
                END)
               ELSE
                TR.TRDESC
             END TRDESC,
             TL.OFFTIME,
             TL.TXSTATUS
        FROM SETRAN       TR,
             TLLOG        TL,
             SBSECURITIES SB,
             SEMAST       SE,
             CFMAST       CF,
             APPTX        AP
       WHERE TR.TXDATE = TL.TXDATE
         AND TR.TXNUM = TL.TXNUM
         AND TR.ACCTNO = SE.ACCTNO
         AND SB.CODEID = SE.CODEID
         AND SE.CUSTID = CF.CUSTID
         AND TR.TXCD = AP.TXCD
         AND AP.APPTYPE = 'SE'
         AND AP.TXTYPE IN ('D', 'C')
         AND TL.DELTD = 'Y'
         AND TR.NAMT <> 0;
    COMMIT;
    --PhuongHT edit: tong hop ROOM trong prinusedlog vao prmaster
    FOR REC IN (SELECT LOG.PRINUSED, LOG.PRCODE
                  FROM PRMASTER MST,
                       (SELECT SUM(PRINUSED) PRINUSED, PRCODE
                          FROM PRINUSEDLOG
                         GROUP BY PRCODE) LOG
                 WHERE MST.PRCODE = LOG.PRCODE
                   AND MST.PRTYP = 'R') LOOP
      UPDATE PRMASTER
         SET PRINUSED = PRINUSED + REC.PRINUSED
       WHERE PRCODE = REC.PRCODE;
    END LOOP;
    --end of PhuongHT edit

  /*  select count(*) into V_COUNT
    from sbcldr sbc
    where sbc.cldrtype IN ('001','002')
        and nvl(sbc.holiday,'N') = 'Y'
        and sbc.sbdate = TO_DATE(V_CURRDATE, 'DD/MM/YYYY');*/
    --'Xoa cac bang __TRAN cua cac phan he nghiep vu
    FOR REC IN (SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK = 'T') LOOP
      V_STRFRTABLE := REC.FRTABLE;
      V_STRTOTABLE := REC.TOTABLE;

            PLOG.DEBUG(PKGCTX,
                 'FRTABLE:' || V_STRFRTABLE || '->TOTABLE:' || V_STRTOTABLE);
              V_STRSQL := 'INSERT INTO ' || V_STRTOTABLE || ' SELECT DTL.* FROM ' ||
                          V_STRFRTABLE ||
                          ' DTL, TLLOG, TLTX
                         WHERE TLLOG.TLTXCD=TLTX.TLTXCD AND TRIM(TLTX.BACKUP)=''Y''' || CASE
                            WHEN V_STRFRTABLE IN ('SETRAN',
                                                  'ODTRAN',
                                                  'CATRAN',
                                                  'AFTRAN',
                                                  'CITRAN',
                                                  'CLTRAN',
                                                  'LNTRAN',
                                                  'DFTRAN',
                                                  'SETRAN') THEN
                             ' AND DTL.NAMT<>0 '
                            ELSE
                             ' '
                          END ||
                          'AND TLLOG.TXNUM=DTL.TXNUM AND TLLOG.TXDATE=DTL.TXDATE AND TRIM(TLLOG.TXSTATUS) IN (''1'',''3'',''7'',''4'')';
              --AND (TRIM(TLLOG.TXSTATUS)=''3'' OR TRIM(TLLOG.TXSTATUS)=''1'')';
              EXECUTE IMMEDIATE V_STRSQL;
              INSERT INTO LOG_ERR (ID, DATE_LOG, POSITION, TEXT)
              VALUES (SEQ_LOG_ERR.NEXTVAL, SYSDATE, ' BACKUPDATA ', V_STRSQL);
              COMMIT;
              V_STRSQL := ' truncate table ' || V_STRFRTABLE;
              EXECUTE IMMEDIATE V_STRSQL;

    END LOOP;

    --'Sao luu du lieu bang TLLOG, TLLOGFLD Cho cac giao dich xoa
    INSERT INTO tllogdel
      SELECT TLLOG.*
        FROM TLLOG, TLTX
       WHERE TLLOG.TLTXCD = TLTX.TLTXCD
         AND TLTX.BACKUP = 'Y'
         AND TLLOG.TXSTATUS NOT IN ( '3','1','7','4') ;


    COMMIT;
    INSERT INTO tllogflddel
          SELECT DTL.*
        FROM TLLOGFLD DTL, TLLOG, TLTX
       WHERE TLLOG.TLTXCD = TLTX.TLTXCD
         AND TLTX.BACKUP = 'Y'
         AND TLLOG.TXNUM = DTL.TXNUM
         AND TLLOG.TXDATE = DTL.TXDATE
         AND TLLOG.TXSTATUS NOT IN ( '3','1','7','4') ;
    COMMIT;

      --'Sao luu du lieu bang TLLOG, TLLOGFLD Cho cac giao dichi?? BACKUP=Y

        INSERT INTO TLLOGALL
        SELECT TLLOG.*
        FROM TLLOG, TLTX
        WHERE TLLOG.TLTXCD = TLTX.TLTXCD
            AND TLTX.BACKUP = 'Y'
            AND (TLLOG.TXSTATUS = '3' OR TLLOG.TXSTATUS = '1' OR
                TLLOG.TXSTATUS = '7' OR TLLOG.TXSTATUS = '4');

    COMMIT;
    INSERT INTO TLLOGFLDALL
      SELECT DTL.*
        FROM TLLOGFLD DTL, TLLOG, TLTX
       WHERE TLLOG.TLTXCD = TLTX.TLTXCD
         AND TLTX.BACKUP = 'Y'
         AND TLLOG.TXNUM = DTL.TXNUM
         AND TLLOG.TXDATE = DTL.TXDATE
         AND (TLLOG.TXSTATUS = '3' OR TLLOG.TXSTATUS = '1' OR
             TLLOG.TXSTATUS = '7' OR TLLOG.TXSTATUS = '4');
    COMMIT;

     --ngoc.vu log lai cho man hinh chinh
    Begin
        pr_gen_tllogall_hist;
        commit;
    end;
    --'Xoa bnag TLLOG vai?? TLLOGFLD hien tai
         V_STRSQL := 'truncate table TLLOG';
        EXECUTE IMMEDIATE V_STRSQL;

    V_STRSQL := 'truncate table TLLOGFLD';
    EXECUTE IMMEDIATE V_STRSQL;
    --'Xoa cac bang khong phai bang giao dich, can backup
    FOR REC IN (SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK = 'N') LOOP
      V_STRFRTABLE := REC.FRTABLE;
      V_STRTOTABLE := REC.TOTABLE;
      --Sao luu __HIST
      V_STRSQL := 'INSERT INTO ' || V_STRTOTABLE || ' SELECT * FROM ' ||
                  V_STRFRTABLE;
      EXECUTE IMMEDIATE V_STRSQL;

      INSERT INTO LOG_ERR
        (ID, DATE_LOG, POSITION, TEXT)
      VALUES
        (SEQ_LOG_ERR.NEXTVAL, SYSDATE, ' BACKUPDATA ', V_STRSQL);

      COMMIT;
      V_STRSQL := 'TRUNCATE TABLE ' || V_STRFRTABLE;
      EXECUTE IMMEDIATE V_STRSQL;
    END LOOP;

    --'Xoa cac bang khong phai bang giao dich, khong backup
    FOR REC IN (SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK = 'D') LOOP
      V_STRFRTABLE := REC.FRTABLE;
      --'Xoa bang __TRONGNGAY
      V_STRSQL := 'TRUNCATE TABLE ' || V_STRFRTABLE;
      EXECUTE IMMEDIATE V_STRSQL;
      INSERT INTO LOG_ERR
        (ID, DATE_LOG, POSITION, TEXT)
      VALUES
        (SEQ_LOG_ERR.NEXTVAL, SYSDATE, ' BACKUPDATA ', V_STRSQL);

      COMMIT;
    END LOOP;

    --backup stdfmap
    INSERT INTO STDFMAPHIST
      SELECT *
        FROM STDFMAP
       WHERE NOT EXISTS
       (SELECT 1 FROM STSCHD WHERE STDFMAP.STSCHDID = STSCHD.AUTOID);

    DELETE STDFMAP
     WHERE NOT EXISTS
     (SELECT 1 FROM STSCHD WHERE STDFMAP.STSCHDID = STSCHD.AUTOID);

    --Kiem tra tao sequence moi
    FOR REC IN (SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK = 'S') LOOP
      V_STRFRTABLE := REC.FRTABLE;
      SELECT COUNT(*)
        INTO V_COUNT
        FROM USER_SEQUENCES
       WHERE SEQUENCE_NAME = V_STRFRTABLE;
      IF V_COUNT > 0 THEN
        INSERT INTO LOG_ERR
          (ID, DATE_LOG, POSITION, TEXT)
        VALUES
          (SEQ_LOG_ERR.NEXTVAL,
           SYSDATE,
           ' BACKUPDATA ',
           'Begin reset seq_' || V_STRFRTABLE);
        COMMIT;
        RESET_SEQUENCE(SEQ_NAME => V_STRFRTABLE, STARTVALUE => 1);
        COMMIT;
      ELSE

        V_SQL2 := 'CREATE SEQUENCE ' || V_STRFRTABLE || '
                  INCREMENT BY 1
                  START WITH 1
                  MINVALUE 1
                  MAXVALUE 999999999999999999999999999
                  NOCYCLE
                  NOORDER
                  NOCACHE';
        INSERT INTO LOG_ERR
          (ID, DATE_LOG, POSITION, TEXT)
        VALUES
          (SEQ_LOG_ERR.NEXTVAL, SYSDATE, ' BACKUPDATA ', V_SQL2);
        COMMIT;
        EXECUTE IMMEDIATE V_SQL2;
      END IF;
      COMMIT;
    END LOOP;
    --- bo do o tren da co cau lenh reset sequen nay. neu drop se bi invalid package HOGW.
    /*Select count(*) into v_count from user_sequences where sequence_name like '%ORDERMAP%';
    If v_count >0 Then
     v_Sql1:='DROP SEQUENCE seq_ordermap';
     Execute immediate v_Sql1;

     INSERT INTO log_err
                  (id,date_log, POSITION, text
                      )
                   VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_Sql1
                      );
      Commit;
    End if;
     v_Sql2:='CREATE SEQUENCE seq_ordermap
      INCREMENT BY 1
      START WITH 1
      MINVALUE 1
      MAXVALUE 999999999999999999999999999
      NOCYCLE
      NOORDER
      CACHE 300';
     Execute immediate v_Sql2;*/

    INSERT INTO LOG_ERR
      (ID, DATE_LOG, POSITION, TEXT)
    VALUES
      (SEQ_LOG_ERR.NEXTVAL, SYSDATE, ' BACKUPDATA ', V_SQL2);
    COMMIT;

    INSERT INTO TLLOG4DRALL
      SELECT * FROM TLLOG4DR WHERE TXSTATUS IN ('5', '8');
    V_STRSQL := 'truncate table tllog4dr';
    EXECUTE IMMEDIATE V_STRSQL;
    COMMIT;

    INSERT INTO EMAILLOGHIST
      SELECT * FROM EMAILLOG;
    DELETE EMAILLOG WHERE TEMPLATEID NOT IN ('0222');
    DELETE EMAILLOG
     WHERE TEMPLATEID = '0222'
       AND TO_DATE(TO_CHAR(CREATETIME, 'dd/mm/yyyy'), 'dd/mm/yyyy') =
           GET_T_DATE(GETCURRDATE, 2);
    COMMIT;
    ----xoa du lieu khach hang mo online cach 4 thang
        UPDATE cfmasttemp SET status = 'R', note = 'OUT OF DATE 4 MONTHS' WHERE to_date(opndate,'DD/MM/RRRR') <= add_months(to_date(getcurrdate,'DD/MM/RRRR'),-4) AND status = 'P';

    -- Backup data T0LIMITSCHD
    INSERT INTO T0LIMITSCHDHIST
      SELECT * FROM T0LIMITSCHD WHERE ALLOCATEDLIMIT - RETRIEVEDLIMIT = 0;
    DELETE T0LIMITSCHD WHERE ALLOCATEDLIMIT - RETRIEVEDLIMIT = 0;
    COMMIT;

    INSERT INTO DFGROUPHIST
      (GROUPID,
       ACTYPE,
       AFACCTNO,
       LNACCTNO,
       DFTYPE,
       FLAGTRIGGER,
       LIMITCHK,
       CUSTBANK,
       RRTYPE,
       CIACCTNO,
       PSTATUS,
       STATUS,
       RLSFEEAMT,
       FEEAMT,
       INTAMTACR,
       ORGAMT,
       AMT,
       RLSAMT,
       DFAMT,
       CALLTYPE,
       LRATE,
       MRATE,
       IRATE,
       ARATE,
       ALRATE,
       AMTMIN,
       TAX,
       FEEMIN,
       FEE,
       LNTYPE,
       TXTIME,
       TXDATE,
       AUTOPAID,
       DESCRIPTION,
       DFBLOCKAMT,
       EXAMT,
       ISVSD)
      SELECT GROUPID,
             ACTYPE,
             AFACCTNO,
             LNACCTNO,
             DFTYPE,
             FLAGTRIGGER,
             LIMITCHK,
             CUSTBANK,
             RRTYPE,
             CIACCTNO,
             PSTATUS,
             STATUS,
             RLSFEEAMT,
             FEEAMT,
             INTAMTACR,
             ORGAMT,
             AMT,
             RLSAMT,
             DFAMT,
             CALLTYPE,
             LRATE,
             MRATE,
             IRATE,
             ARATE,
             ALRATE,
             AMTMIN,
             TAX,
             FEEMIN,
             FEE,
             LNTYPE,
             TXTIME,
             TXDATE,
             AUTOPAID,
             DESCRIPTION,
             DFBLOCKAMT,
             EXAMT,
             ISVSD
        FROM DFGROUP
       WHERE GROUPID NOT IN (SELECT DISTINCT GROUPID FROM DFMAST);

    DELETE FROM DFGROUP
     WHERE GROUPID NOT IN (SELECT DISTINCT GROUPID FROM DFMAST);
    DELETE FROM CF0014_LOG
     WHERE TXDATE = TO_DATE(V_CURRDATE, 'DD/MM/YYYY');
    COMMIT;
    ---Log du lieu cf0014
    INSERT INTO CF0014_LOG
      (TXDATE, ID, BANKNAME, COUNTN)
      (SELECT TO_DATE(V_CURRDATE, 'DD/MM/YYYY') INDATE,
              ORDERBY,
              BANKNAME,
              SUM(S_TK) S_TK
         FROM (SELECT 1 ORDERBY, SUM(1) S_TK, 'BIDV' BANKNAME
                 FROM (SELECT CF.CUSTODYCD,
                              SUM(CASE
                                    WHEN AF.COREBANK = 'Y' OR
                                         AF.ALTERNATEACCT = 'Y' THEN
                                     1
                                    ELSE
                                     0
                                  END) ISCOREBANK,
                              SUM(CASE
                                    WHEN AF.COREBANK = 'N' THEN
                                     1
                                    ELSE
                                     0
                                  END) NOTCOREBANK
                         FROM CFMAST CF, AFMAST AF
                        WHERE CF.CUSTID = AF.CUSTID
                          AND CF.CUSTATCOM = 'Y'
                          AND CF.STATUS = 'A'
                          AND AF.STATUS = 'A'
                          AND CF.OPNDATE <= TO_DATE(V_CURRDATE, 'DD/MM/YYYY')
                        GROUP BY CF.CUSTODYCD)
                WHERE ISCOREBANK >= 1) CLOSE_OPEN
        GROUP BY BANKNAME, ORDERBY
       UNION ALL

       SELECT TO_DATE(V_CURRDATE, 'DD/MM/YYYY') INDATE,
              ORDERBY,
              BANKNAME,
              SUM(S_TK) S_TK
         FROM (SELECT 2 ORDERBY, SUM(1) S_TK, 'TKT' BANKNAME
                 FROM (SELECT CF.CUSTODYCD,
                              SUM(CASE
                                    WHEN AF.COREBANK = 'Y' OR
                                         AF.ALTERNATEACCT = 'Y' THEN
                                     1
                                    ELSE
                                     0
                                  END) ISCOREBANK,
                              SUM(CASE
                                    WHEN AF.COREBANK = 'N' THEN
                                     1
                                    ELSE
                                     0
                                  END) NOTCOREBANK
                         FROM CFMAST CF, AFMAST AF
                        WHERE CF.CUSTID = AF.CUSTID
                          AND CF.CUSTATCOM = 'Y'
                          AND AF.STATUS = 'A'
                          AND CF.STATUS = 'A'
                          AND CF.OPNDATE <= TO_DATE(V_CURRDATE, 'DD/MM/YYYY')
                        GROUP BY CF.CUSTODYCD)
                WHERE ISCOREBANK = 0
                  AND NOTCOREBANK >= 1) CLOSE_OPEN
        GROUP BY BANKNAME, ORDERBY
       UNION ALL
       SELECT TO_DATE(V_CURRDATE, 'DD/MM/YYYY') INDATE,
              ORDERBY,
              BANKNAME,
              SUM(S_TK) S_TK
         FROM (SELECT 3 ORDERBY, SUM(1) S_TK, 'TKKLK' BANKNAME
                 FROM CFMAST CF
                WHERE CF.OPNDATE <= TO_DATE(V_CURRDATE, 'DD/MM/YYYY')
                  AND CF.CUSTATCOM = 'N'
                  AND CF.STATUS = 'A') CLOSE_OPEN
        GROUP BY BANKNAME, ORDERBY);

    ---Log du lieu MR3007

    DELETE FROM GETSECMARGININFO_TEMP;
    INSERT INTO GETSECMARGININFO_TEMP (AFACCTNO,SEAMT,SEASS,RECEIVINGAMT)
    (SELECT AFACCTNO,SEAMT,SEASS,RECEIVINGAMT FROM V_GETSECMARGININFO
    WHERE NVL(seamt,0) + NVL(seass,0) + NVL(receivingamt,0) <> 0);
    DELETE FROM GETSECMARGINDETAIL_TEMP;
    INSERT INTO GETSECMARGINDETAIL_TEMP (CUSTODYCD,AFACCTNO,ACCTNO,CODEID,SYMBOL,TRADE,RECEIVING,EXECQTTY,BUYQTTY,BUYINGQTTY,MORTAGE,RATECL,PRICECL,CALLRATECL,CALLPRICECL,CALLRATE74,CALLPRICE74,SEAMT,SEASS,SEREAL,MRMAXQTTY,SEQTTY,BASICPRICE, COSTPRICE,CARECEIVING,MORTAGE_NAV, DTOCLOSE, WITHDRAW)
    ( SELECT CUSTODYCD,AFACCTNO,ACCTNO,CODEID,SYMBOL,TRADE,RECEIVING,EXECQTTY,BUYQTTY,BUYINGQTTY,MORTAGE,RATECL,PRICECL,CALLRATECL,CALLPRICECL,CALLRATE74,CALLPRICE74,SEAMT,SEASS,SEREAL,MRMAXQTTY,SEQTTY,BASICPRICE,COSTPRICE,CARECEIVING,MORTAGE_NAV, DTOCLOSE, WITHDRAW FROM VW_GETSECMARGINDETAIL_NEW);

    DELETE FROM TBL_MR3007_LOG
     WHERE TXDATE = TO_DATE(V_CURRDATE, 'DD/MM/YYYY');

    INSERT INTO TBL_MR3007_LOG
      (AUTOID,
       TXDATE,
       CUSTODYCD,
       AFACCTNO,
       ACCTNO,
       CODEID,
       SYMBOL,
       TRADE,
       RECEIVING,
       EXECQTTY,
       BUYQTTY,
       MORTAGE,
       MRCRLIMITMAX,
       BALANCE,
       DEPOFEEAMT,
       TRFBUYAMT,
       AVLADVANCE,
       SECUREDAMT,
       DFAMT,
       DFODAMT,
       T0AMT,
       MRAMT,
       OUTSTANDING,
       PP0,
       RATECL,
       PRICECL,
       CALLRATECL,
       CALLPRICECL,
       CALLRATE74,
       CALLPRICE74,
       SEAMT,
       SEASS,
       SEREAL,
       MRMAXQTTY,
       SEQTTY,
       INTMRAMT,
       MARGINRATE,
       COSTPRICE,
       BASICPRICE,
       CARECEIVING,
       ODRECEIVING,
       MORTAGE_NAV,
       DTOCLOSE,
       WITHDRAW
         )
      SELECT SEQ_MR3007_LOG.NEXTVAL AUTOID,
             TO_DATE(V_CURRDATE, 'DD/MM/YYYY') TXDATE,
             CF.CUSTODYCD,
             AF.ACCTNO AFACCTNO,
             V.ACCTNO,
             V.CODEID,
             V.SYMBOL,
             V.TRADE,
             V.RECEIVING,
             V.EXECQTTY,
             V.BUYQTTY,
             V.MORTAGE,
             AF.MRCRLIMITMAX,
             CI.BALANCE,
             CI.DEPOFEEAMT,
             CI.TRFBUYAMT,
             NVL(ADV.AVLADVANCE, 0) AVLADVANCE,
             NVL(B.SECUREDAMT, 0) SECUREDAMT,
             NVL(LN.DFAMT, 0) DFAMT,
             NVL(LN.DFODAMT, 0) DFODAMT,
             NVL(LN.T0AMT, 0) T0AMT,
             NVL(LN.MRAMT, 0) MRAMT,
             ROUND(ABS(LEAST(CI.BALANCE + NVL(ADV.AVLADVANCE, 0) -
                             NVL(B.SECUREDAMT, 0) - CI.TRFBUYAMT -
                             NVL(LN.T0AMT, 0) - NVL(LN.MRAMT, 0) /*- ci.depofeeamt*/,
                             0)),
                   0) OUTSTANDING,
             ROUND(CI.BALANCE - NVL(B.SECUREDAMT, 0) - CI.TRFBUYAMT +
                   NVL(ADV.AVLADVANCE, 0) + AF.ADVANCELINE +
                   LEAST(NVL(AF.MRCRLIMITMAX, 0) + NVL(AF.MRCRLIMIT, 0) -
                         CI.DFODAMT,
                         NVL(AF.MRCRLIMIT, 0) + NVL(SEC.SEAMT, 0)) -
                   NVL(CI.ODAMT, 0) /* - ci.depofeeamt*/,
                   0) PP0,
             V.RATECL,
             V.PRICECL,
             V.CALLRATECL,
             V.CALLPRICECL,
             V.CALLRATE74,
             V.CALLPRICE74,
             V.SEAMT,
             V.SEASS,
             V.SEREAL,
             V.MRMAXQTTY,
             V.SEQTTY,
             NVL(LN.INTMRAMT, 0) INTMRAMT,
             ROUND((CASE
                     WHEN CI.BALANCE +
                          LEAST(NVL(AF.MRCRLIMIT, 0),
                                NVL(B.SECUREDAMT, 0) + CI.TRFBUYAMT) +
                          NVL(ADV.AVLADVANCE, 0) - CI.ODAMT - NVL(B.SECUREDAMT, 0) -
                          CI.TRFBUYAMT - CI.RAMT >= 0 THEN
                      100000
                     ELSE
                      LEAST(NVL(SEC.SEASS, 0), AF.MRCRLIMITMAX - CI.DFODAMT) /
                      ABS(CI.BALANCE +
                          LEAST(NVL(AF.MRCRLIMIT, 0),
                                NVL(B.SECUREDAMT, 0) + CI.TRFBUYAMT) +
                          NVL(ADV.AVLADVANCE, 0) - CI.ODAMT - NVL(B.SECUREDAMT, 0) -
                          CI.TRFBUYAMT - CI.RAMT)
                   END),
                   4) * 100 MARGINRATE,
              V.COSTPRICE,
              V.BASICPRICE,
              V.CARECEIVING,
              V.RECEIVING+V.BUYQTTY-V.BUYINGQTTY ODRECEIVING,
              V.MORTAGE_NAV,
              V.DTOCLOSE,
              V.WITHDRAW
        FROM CFMAST CF,
             AFMAST AF,
             CIMAST CI,
             GETSECMARGININFO_TEMP SEC,
             GETSECMARGINDETAIL_TEMP V,
             (SELECT AFACCTNO, SUM(DEPOAMT) AVLADVANCE
                FROM V_GETACCOUNTAVLADVANCE
               GROUP BY AFACCTNO) ADV,
             (SELECT AFACCTNO, NVL(SUM(SECUREAMT), 0) SECUREDAMT
                FROM V_GETBUYORDERINFO
               GROUP BY AFACCTNO) B,
             (SELECT TRFACCTNO,
                     NVL(SUM(CASE
                               WHEN FTYPE = 'DF' THEN
                                PRINNML + PRINOVD + INTNMLACR + INTNMLOVD + INTOVDACR +
                                INTDUE + FEEINTNMLACR + FEEINTNMLOVD + FEEINTOVDACR +
                                FEEINTDUE
                               ELSE
                                0
                             END),
                         0) DFAMT,
                     NVL(SUM(CASE
                               WHEN FTYPE = 'DF' THEN
                                PRINNML + PRINOVD
                               ELSE
                                0
                             END),
                         0) DFODAMT,
                     NVL(SUM(CASE
                               WHEN FTYPE = 'AF' THEN
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTNMLOVD +
                                OINTOVDACR + OINTDUE
                               ELSE
                                0
                             END),
                         0) T0AMT,
                     NVL(SUM(CASE
                               WHEN FTYPE = 'AF' THEN
                                PRINNML + PRINOVD + INTNMLACR + INTNMLOVD + INTOVDACR +
                                INTDUE + FEEINTNMLACR + FEEINTNMLOVD + FEEINTOVDACR +
                                FEEINTDUE
                               ELSE
                                0
                             END),
                         0) MRAMT,
                     NVL(SUM(CASE
                               WHEN FTYPE = 'AF' THEN
                                INTNMLACR + INTNMLOVD + INTOVDACR + INTDUE +
                                FEEINTNMLACR + FEEINTNMLOVD + FEEINTOVDACR +
                                FEEINTDUE
                               ELSE
                                0
                             END),
                         0) INTMRAMT
                FROM LNMAST
               GROUP BY TRFACCTNO) LN

       WHERE CF.CUSTID = AF.CUSTID
         AND AF.ACCTNO = CI.AFACCTNO
         AND AF.STATUS <> 'C'
         AND AF.ACCTNO = ADV.AFACCTNO(+)
         AND AF.ACCTNO = B.AFACCTNO(+)
         AND AF.ACCTNO = LN.TRFACCTNO(+)
         AND AF.ACCTNO = V.AFACCTNO(+)
         AND AF.ACCTNO = SEC.AFACCTNO(+);

    COMMIT;
    --- backup cac event da process cua Bloomberg
     INSERT INTO bl_eventhist SELECT * FROM bl_event WHERE process = 'Y';
     delete from bl_event where process = 'Y' ;
     commit;
     INSERT INTO bl_exec_rpthist SELECT * FROM bl_exec_rpthist where process = 'Y';
     delete from bl_exec_rpthist where process = 'Y' ;
     commit;

     for rc in (
            SELECT CUSTID, MAX(AUTOID) M_AUTOID
            FROM CFVSDLOGTMP WHERE OADDRESS <> NVL(NADDRESS,OADDRESS) AND STATUS = 'A'
            GROUP BY CUSTID
        )
    LOOP
        insert into cfvsdlog(custid,ofullname,nfullname,oaddress,naddress,
        oidcode,nidcode,oiddate,niddate,oidexpired,nidexpired,
        oidplace,nidplace,otradingcode,
        ntradingcode,otradingcodedt,ntradingcodedt,
        TXdate,txnum,confirmtxdate,confirmtxnum,ocusttype,ncusttype,ocountry, ncountry)
        select custid,ofullname,nfullname,oaddress,naddress,
            oidcode,nidcode,oiddate,niddate,oidexpired,nidexpired,
            oidplace,nidplace,otradingcode,
            ntradingcode,otradingcodedt,ntradingcodedt,
            TXdate,txnum,confirmtxdate,confirmtxnum,ocusttype,ncusttype,ocountry, ncountry
        from CFVSDLOGTMP where CUSTID = rc.CUSTID and AUTOID = rc.M_AUTOID;

        update CFVSDLOGTMP set STATUS = 'C' where CUSTID = rc.CUSTID;

    END LOOP;

    ---- begin dong cac bieu het hieu luc
    UPDATE ADPRMFEEMST SET STATUS = 'C' WHERE expdate <= getcurrdate AND  datetype ='T';
    UPDATE ADPRMFEEMST SET STATUS = 'C' WHERE valday+closedate <= getcurrdate AND  datetype ='F';
    UPDATE MRPRMLIMITMST SET STATUS = 'C' WHERE expdate <= getcurrdate AND  datetype ='T';
    UPDATE MRPRMLIMITMST SET STATUS = 'C' WHERE valday+closedate <= getcurrdate AND  datetype ='F';
    ---- end dong cac bieu het hieu luc.



    INSERT INTO marketinfor_hist (backupdate,ID,SEQUENCEMSG,TRADINGDATE,MARKETINDEX,INDEXTIME,INDEXCOLOR,INDEXCHANGE,INDEXPERCENTCHANGE,TOTALTRADE,TOTALVOLUME,TOTALVALUE,MARKETSTATUS,ADVANCES,DECLINES,NOCHANGE,ADVANCESVOLUMN,DECLINESVOLUMN,NOCHANGEVOLUMN,MARKETID,MARKETCODE,PT_TOTAL_QTTY,PT_TOTAL_VALUE)
    select TO_DATE(V_CURRDATE, 'DD/MM/YYYY') backupdate,ID,SEQUENCEMSG,TRADINGDATE,MARKETINDEX,INDEXTIME,INDEXCOLOR,INDEXCHANGE,INDEXPERCENTCHANGE,
            TOTALTRADE,TOTALVOLUME,TOTALVALUE,MARKETSTATUS,ADVANCES,DECLINES,NOCHANGE,ADVANCESVOLUMN,
            DECLINESVOLUMN,NOCHANGEVOLUMN,MARKETID,MARKETCODE,PT_TOTAL_QTTY,PT_TOTAL_VALUE
    from MARKETINFOR ;
    delete from MARKETINFOR;
    commit;
    /*--Xu ly REvert cac khoan Hold, Unhold chua duoc xu ly
    for rec in (
        select TRFCODE, REQID from CRBTXREQ REQ,SYSVAR SYS where
        REQ.TRFCODE IN ('HOLD','UNHOLD')
        AND REQ.STATUS='P'
        AND REQ.OBJTYPE IN ('T','V') AND REQ.TRFCODE IN ('HOLD','UNHOLD')
        AND REQ.STATUS='P' AND REQ.TXDATE=TO_DATE(SYS.VARVALUE,'DD/MM/RRRR')
        AND SYS.GRNAME='SYSTEM' AND SYS.VARNAME='CURRDATE'
        AND NOT EXISTS (
            SELECT * FROM TLLOGFLD FLD,TLLOG TL
            WHERE FLD.TXNUM=TL.TXNUM AND FLD.FLDCD='22'
            AND TL.TLTXCD IN ('6660','6661','6620','6621') AND FLD.CVALUE = TO_CHAR(REQ.REQID)
        )
        AND NOT EXISTS (
            SELECT * FROM CRBTXREQLOG LG
            WHERE REQ.REFCODE=LG.refcode AND REQ.BANKCODE=LG.BANKCODE
            AND REQ.TRFCODE=LG.trfcode AND REQ.TXDATE=LG.txdate AND LG.STATUS='C'
        )
        ORDER BY REQ.REQID,REQ.TXDATE
    )
    loop
        cspks_rmproc.pr_CreateRevertHoldTransact(rec.reqid,p_err_code);
    end loop;
    if p_err_code <> '0' then
        plog.error (pkgctx, SQLERRM);
        plog.error (pkgctx, dbms_utility.format_error_backtrace);
        plog.setendsection (pkgctx, 'pr_SABackupData');
        RAISE errnums.E_SYSTEM_ERROR;
    else
         p_err_code:=0;
         plog.setendsection(pkgctx, 'pr_SABackupData');
    end if;*/

    --locpt 20163112 --add them clear log
    clear_log();

  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABackupData');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SABACKUPDATA;

  ---------------------------------pr_SAGeneralWorking------------------------------------------------
  PROCEDURE PR_SAGENERALWORKING(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE   DATE;
    V_CURRDATE   DATE;
    V_STRFRTABLE VARCHAR2(100);
    V_STRTOTABLE VARCHAR2(100);
    V_STRSQL     VARCHAR2(2000);
    V_SQL1       VARCHAR2(1000);
    V_SQL2       VARCHAR2(1000);
    V_ERR        VARCHAR2(200);
    V_COUNT      NUMBER(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SAGeneralWorking');

    /*if cspks_saproc.fn_SAGenCF1002(p_err_code) <> 0 then
        p_err_code:=-1; --Loi he thong
        plog.setendsection(pkgctx, 'pr_SAGeneralWorking');
        return;
    end if;*/

    V_CURRDATE := getcurrdate;


    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SAGeneralWorking');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAGeneralWorking');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SAGENERALWORKING;

  ---------------------------------pr_SAChangeWorkingDate------------------------------------------------
  PROCEDURE PR_SACHANGEWORKINGDATE(P_ERR_CODE OUT VARCHAR2) IS
    V_NEXTDATE    VARCHAR2(20);
    V_CURRDATE    VARCHAR2(20);
    V_PREVDATE    VARCHAR2(20);
    V_DUEDATE     VARCHAR2(20);
    V_INTNUM      NUMBER;
    V_INTBKNUM    NUMBER;
    V_INTNEXTNUM  NUMBER;
    V_STRLAST_DAY VARCHAR2(20);
     v_advclearday NUMBER;
    --v_prinused number;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SAChangeWorkingDate');
    V_NEXTDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    V_CURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');

    --Tong hop du lieu tu view VW_GETSECMARGINDETAIL
    DELETE AFSE_INFO_LOG WHERE TXDATE = V_CURRDATE;
    INSERT INTO AFSE_INFO_LOG(TXDATE , CUSTODYCD, AFACCTNO, ACCTNO, CODEID, SYMBOL, TRADE, RECEIVING, BUYQTTY, BUYINGQTTY,
        MORTAGE, EMKQTTY, BLOCKED, CARECEIVING, RATECL, PRICECL, CALLRATECL, CALLPRICECL,
        CALLRATE74, CALLPRICE74, SEAMT, SEASS, SEREAL, MRMAXQTTY, SEQTTY, BASICPRICE, COSTPRICE
        )
    SELECT V_CURRDATE TXDATE , MST.CUSTODYCD, MST.AFACCTNO, MST.ACCTNO, MST.CODEID, MST.SYMBOL, MST.TRADE, MST.RECEIVING, MST.BUYQTTY, MST.BUYINGQTTY,
    MST.MORTAGE, MST.EMKQTTY, MST.BLOCKED, MST.CARECEIVING, MST.RATECL, MST.PRICECL, MST.CALLRATECL, MST.CALLPRICECL,
    MST.CALLRATE74, MST.CALLPRICE74, MST.SEAMT, MST.SEASS, MST.SEREAL, MST.MRMAXQTTY, MST.SEQTTY, MST.BASICPRICE, MST.COSTPRICE
    FROM VW_GETSECMARGINDETAIL MST;

    --01. Tinh lai vay khoan tiet kiem
    UPDATE TDMAST
       SET ODINTACR = ODINTACR + ROUND(ODAMT * ODINTRATE / 100 / 360 *
                                       (TO_DATE(V_NEXTDATE, 'DD/MM/RRRR') -
                                       TO_DATE(V_CURRDATE, 'DD/MM/RRRR')),
                                       4)
     WHERE ODAMT * ODINTRATE > 0;
    -- Xuat log Report Giai Ngan.
    IF NOT FN_GEN_CL_DRAWNDOWN_REPORT THEN
      P_ERR_CODE := '-540229';
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAChangeWorkingDate');
      RETURN;
    END IF;
    IF NOT FN_GEN_REPORT_LOG('ALL') THEN
      P_ERR_CODE := '-540229';
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAChangeWorkingDate');
      RETURN;
    END IF;

    /*    SELECT TO_CHAR(DT.LAST_DAY,'DD/MM/YYYY') LAST_DAY,DT.NUM,DT.NEXTNUM,DT.BKNUM
        into    v_strLAST_DAY,v_intNum,v_intNEXTNUM,v_intBKNUM
        FROM (SELECT TO_DATE(v_nextdate,systemnums.c_date_format)-TO_DATE(v_currdate,systemnums.c_date_format) NUM,
                    DT.LAST_DAY,TO_DATE(v_nextdate,systemnums.c_date_format)- DT.LAST_DAY NEXTNUM,
                    DT.LAST_DAY-TO_DATE(v_currdate,systemnums.c_date_format) BKNUM
                    FROM (SELECT LAST_DAY(TO_DATE(v_currdate,systemnums.c_date_format)) LAST_DAY FROM DUAL ) DT )DT;
    */
          PLOG.error(PKGCTX, 'NAMNT TEST3');
    FOR REC IN (SELECT *
                  FROM IRRATESCHD
                 WHERE EFFECTIVEDT <=
                       TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT)
                 ORDER BY AUTOID) LOOP
      --1. CAP NHAT LAI SUAT CU VAO TRONG HIST
      INSERT INTO IRRATEHIST
        (RATEID,
         RATENAME,
         CCYCD,
         RATE,
         FLRRATE,
         CELRATE,
         RATETERM,
         LASTDATE,
         EFFECTIVEDT,
         RATETYPE,
         MODCODE,
         STATUS)
        SELECT RATEID,
               RATENAME,
               CCYCD,
               RATE,
               FLRRATE,
               CELRATE,
               RATETERM,
               TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT) LASTDATE,
               EFFECTIVEDT,
               RATETYPE,
               MODCODE,
               STATUS
          FROM IRRATE
         WHERE RATEID = REC.RATEID;
      DELETE FROM IRRATE WHERE RATEID = REC.RATEID;
      INSERT INTO IRRATE
        (RATEID,
         RATENAME,
         CCYCD,
         RATE,
         FLRRATE,
         CELRATE,
         RATETERM,
         EFFECTIVEDT,
         RATETYPE,
         MODCODE,
         STATUS)
        SELECT RATEID,
               RATENAME,
               CCYCD,
               RATE,
               FLRRATE,
               CELRATE,
               RATETERM,
               EFFECTIVEDT,
               RATETYPE,
               MODCODE,
               STATUS
          FROM IRRATESCHD
         WHERE AUTOID = REC.AUTOID;
      DELETE FROM IRRATESCHD WHERE AUTOID = REC.AUTOID;
    END LOOP;
    FOR REC IN (SELECT *
                  FROM EXAFSCHD
                 WHERE EFFECTIVEDT <=
                       TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT)
                 ORDER BY AUTOID) LOOP
      --1. CAP NHAT SU KIEN CU TRUNG VOI SU KIEN NAY VAO TRONG HIST
      INSERT INTO EXAFMASTHIST
        (AUTOID,
         EVENTCODE,
         AFACCTNO,
         EXPDATE,
         EXCYCLE,
         OPERAND,
         DELTA,
         MINVAL,
         MAXVAL,
         STATUS,
         CURRRATE,
         EFFECTIVEDT,
         MODCODE,
         EXTYPE)
        SELECT SEQ_EXAFMASTHIST.NEXTVAL AUTOID,
               EVENTCODE,
               AFACCTNO,
               EXPDATE,
               EXCYCLE,
               OPERAND,
               DELTA,
               MINVAL,
               MAXVAL,
               STATUS,
               CURRRATE,
               EFFECTIVEDT,
               MODCODE,
               EXTYPE
          FROM EXAFMAST
         WHERE EVENTCODE = REC.EVENTCODE
           AND AFACCTNO = REC.AFACCTNO
           AND EXTYPE = REC.EXTYPE;
      --2. XOA CAC SU KIEN CU
      DELETE FROM EXAFMAST
       WHERE EVENTCODE = REC.EVENTCODE
         AND AFACCTNO = REC.AFACCTNO
         AND EXTYPE = REC.EXTYPE;
      --3. CAP NHAT CAC SU KIEN DEN KY TU EXAFSCHD VAO EXAFMAST
      INSERT INTO EXAFMAST
        (AUTOID,
         EVENTCODE,
         AFACCTNO,
         EXPDATE,
         EXCYCLE,
         OPERAND,
         DELTA,
         MINVAL,
         MAXVAL,
         STATUS,
         CURRRATE,
         EFFECTIVEDT,
         MODCODE,
         EXTYPE)
        SELECT SEQ_EXAFMASTHIST.NEXTVAL AUTOID,
               EVENTCODE,
               AFACCTNO,
               EXPDATE,
               EXCYCLE,
               OPERAND,
               DELTA,
               MINVAL,
               MAXVAL,
               STATUS,
               CURRRATE,
               EFFECTIVEDT,
               MODCODE,
               EXTYPE
          FROM EXAFSCHD
         WHERE AUTOID = REC.AUTOID;
      --4. XOA TRONG EXAFSCHD NHUNG SU KIEN DA DUA VAO TRONG EXAFMAST
      DELETE FROM EXAFSCHD WHERE AUTOID = REC.AUTOID;
    END LOOP;
    --Kiem tra xem lich nao den ngay Exprire thi day vao trong HIST
    INSERT INTO EXAFMASTHIST
      (AUTOID,
       EVENTCODE,
       AFACCTNO,
       EXPDATE,
       EXCYCLE,
       OPERAND,
       DELTA,
       MINVAL,
       MAXVAL,
       STATUS,
       CURRRATE,
       EFFECTIVEDT,
       MODCODE,
       EXTYPE)
      SELECT SEQ_EXAFMASTHIST.NEXTVAL AUTOID,
             EVENTCODE,
             AFACCTNO,
             EXPDATE,
             EXCYCLE,
             OPERAND,
             DELTA,
             MINVAL,
             MAXVAL,
             STATUS,
             CURRRATE,
             EFFECTIVEDT,
             MODCODE,
             EXTYPE
        FROM EXAFMAST
       WHERE EXPDATE <= TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT);

    -- Reset EXAMT (TSrut ? S? ti?n du?c r?t th?c sau khi b? sung) trong DF
    UPDATE DFGROUP SET EXAMT = 0;
    --Cap nhat Securities_info_hist
    INSERT INTO SECURITIES_INFO_HIST
      (AUTOID,
       CODEID,
       SYMBOL,
       HISTDATE,
       TXDATE,
       LISTINGQTTY,
       TRADEUNIT,
       LISTINGSTATUS,
       ADJUSTQTTY,
       LISTTINGDATE,
       REFERENCESTATUS,
       ADJUSTRATE,
       REFERENCERATE,
       REFERENCEDATE,
       STATUS,
       BASICPRICE,
       OPENPRICE,
       PREVCLOSEPRICE,
       CURRPRICE,
       CLOSEPRICE,
       AVGPRICE,
       CEILINGPRICE,
       FLOORPRICE,
       MTMPRICE,
       MTMPRICECD,
       INTERNALBIDPRICE,
       INTERNALASKPRICE,
       PE,
       EPS,
       DIVYEILD,
       DAYRANGE,
       YEARRANGE,
       TRADELOT,
       TRADEBUYSELL,
       TELELIMITMIN,
       TELELIMITMAX,
       ONLINELIMITMIN,
       ONLINELIMITMAX,
       REPOLIMITMIN,
       REPOLIMITMAX,
       ADVANCEDLIMITMIN,
       ADVANCEDLIMITMAX,
       MARGINLIMITMIN,
       MARGINLIMITMAX,
       SECURERATIOTMIN,
       SECURERATIOMAX,
       DEPOFEEUNIT,
       DEPOFEELOT,
       MORTAGERATIOMIN,
       MORTAGERATIOMAX,
       SECUREDRATIOMIN,
       SECUREDRATIOMAX,
       CURRENT_ROOM,
       BMINAMT,
       SMINAMT,
       MARGINPRICE,
       MARGINREFPRICE,
       ROOMLIMIT,
       ROOMLIMITMAX,
       DFREFPRICE,
       SYROOMLIMIT,
       SYROOMUSED,
       MARGINCALLPRICE,
       MARGINREFCALLPRICE,
       DFRLSPRICE,
       ROOMLIMITMAX_SET,
       SYROOMLIMIT_SET)
      SELECT SEQ_SECURITIES_INFO_HIST.NEXTVAL AUTOID,
             CODEID,
             SYMBOL,
             TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT) HISTDATE,
             TXDATE,
             LISTINGQTTY,
             TRADEUNIT,
             LISTINGSTATUS,
             ADJUSTQTTY,
             LISTTINGDATE,
             REFERENCESTATUS,
             ADJUSTRATE,
             REFERENCERATE,
             REFERENCEDATE,
             STATUS,
             BASICPRICE,
             OPENPRICE,
             PREVCLOSEPRICE,
             CURRPRICE,
             CLOSEPRICE,
             AVGPRICE,
             CEILINGPRICE,
             FLOORPRICE,
             MTMPRICE,
             MTMPRICECD,
             INTERNALBIDPRICE,
             INTERNALASKPRICE,
             PE,
             EPS,
             DIVYEILD,
             DAYRANGE,
             YEARRANGE,
             TRADELOT,
             TRADEBUYSELL,
             TELELIMITMIN,
             TELELIMITMAX,
             ONLINELIMITMIN,
             ONLINELIMITMAX,
             REPOLIMITMIN,
             REPOLIMITMAX,
             ADVANCEDLIMITMIN,
             ADVANCEDLIMITMAX,
             MARGINLIMITMIN,
             MARGINLIMITMAX,
             SECURERATIOTMIN,
             SECURERATIOMAX,
             DEPOFEEUNIT,
             DEPOFEELOT,
             MORTAGERATIOMIN,
             MORTAGERATIOMAX,
             SECUREDRATIOMIN,
             SECUREDRATIOMAX,
             CURRENT_ROOM,
             BMINAMT,
             SMINAMT,
             MARGINPRICE,
             MARGINREFPRICE,
             ROOMLIMIT,
             ROOMLIMITMAX,
             DFREFPRICE,
             SYROOMLIMIT,
             SYROOMUSED,
             MARGINCALLPRICE,
             MARGINREFCALLPRICE,
             DFRLSPRICE,
             ROOMLIMITMAX_SET,
             SYROOMLIMIT_SET
        FROM SECURITIES_INFO;

    /*--Update lai room toan he thong va room margin
    for rec in (
        select * from securities_info where syroomlimit_set+roomlimitmax_set>0
    )
    loop
        --Cap nhat room he thong
        begin
            select nvl(afpr.prinused,0) + sb.syroomused into v_prinused
                from securities_info sb,
                       (select codeid, sum(prinused) prinused from vw_afpralloc_all where restype = 'S' group by codeid) afpr
                where sb.codeid = afpr.codeid(+)
                and sb.codeid = rec.codeid;
        exception when others then
            v_prinused:=0;
        end;

        update securities_info
        set syroomlimit = greatest(syroomlimit_set,v_prinused)
        where codeid = rec.codeid;
        --Cap nhat room margin
        begin
            select nvl(sum(prinused),0) into v_prinused from vw_afpralloc_all
            where restype = 'M'
            and codeid = rec.codeid;
        exception when others then
            v_prinused:=0;
        end;
        update securities_info
        set roomlimitmax = GREATEST(roomlimitmax_set,v_prinused)
        where codeid = rec.codeid;
    end loop;*/
    --Xoa nhung lich den ngay Exprire
    DELETE FROM EXAFMAST
     WHERE EXPDATE <= TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT);
    IF CSPKS_SAPROC.FN_BACKUPSMSDATA(P_ERR_CODE) <> 0 THEN
      PLOG.DEBUG(PKGCTX, 'got error on fn_BackupSMSData');
      ROLLBACK;
      RETURN;
    END IF;
    IF TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'RRRR') <>
       TO_CHAR(TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT), 'RRRR') THEN
      UPDATE SBCLDR
         SET SBEOY = 'Y', SBEOQ = 'Y', SBEOM = 'Y'
       WHERE CLDRTYPE = '000'
         AND SBDATE = TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    ELSIF TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM') <>
          TO_CHAR(TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM') AND
          MOD(TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM'),
              3) = 0 THEN
      UPDATE SBCLDR
         SET SBEOQ = 'Y', SBEOM = 'Y'
       WHERE CLDRTYPE = '000'
         AND SBDATE = TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    ELSIF TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM') <>
          TO_CHAR(TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM') THEN
      UPDATE SBCLDR
         SET SBEOM = 'Y'
       WHERE CLDRTYPE = '000'
         AND SBDATE = TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    ELSIF TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'IW') <>
          TO_CHAR(TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT), 'IW') THEN
      UPDATE SBCLDR
         SET SBEOW = 'Y'
       WHERE CLDRTYPE = '000'
         AND SBDATE = TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    END IF;
    --CAP NHAT CAC LOAI HINH ODTYPE DEN HAN SU DUNG
    UPDATE ODTYPE
       SET STATUS = 'Y'
     WHERE STATUS = 'N'
       AND TO_DATE(VALDATE, SYSTEMNUMS.C_DATE_FORMAT) >=
           TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT);

    --CAP NHAT CAC LOAI HINH ODTYPE HET HAN SU DUNG
    UPDATE ODTYPE
       SET STATUS = 'N'
     WHERE STATUS = 'Y'
       AND TO_DATE(EXPDATE, SYSTEMNUMS.C_DATE_FORMAT) <=
           TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT);
    -- Ducnv cap nhat AFTYPE.mrcrlimitmax ->afmast.mrcrlimitmax
    FOR VC IN (SELECT DISTINCT LOG.ACTYPE, AFT.MRCRLIMITMAX
                 FROM AFTYPE_LOG LOG, AFTYPE AFT
                WHERE LOG.TXDATE = TO_DATE( V_CURRDATE,'DD/MM/YYYY')
                  AND LOG.ACTYPE = AFT.ACTYPE
                  AND LOG.STATUS = 'N') LOOP
      UPDATE AFMAST
         SET MRCRLIMITMAX = VC.MRCRLIMITMAX
       WHERE ACTYPE = VC.ACTYPE;
      UPDATE AFTYPE_LOG
         SET STATUS = 'C'
       WHERE STATUS = 'N'
         AND TXDATE = TO_DATE( V_CURRDATE,'DD/MM/YYYY');
    END LOOP;
    -- End of Ducnv
    -- DungNH cap nhat MRCRLIMITMAX khi duoc uu dai han muc margin

    FOR rec1 IN (
        SELECT MRCF.AUTOID, AF.CUSTID, AF.ACCTNO, AFT.MRCRLIMITMAX
        FROM MRPRMLIMITCF MRCF, MRPRMLIMITMST MST, AFMAST AF, AFTYPE AFT, MRTYPE MRT
        WHERE MRCF.PROMOTIONID = MST.AUTOID
            AND MRCF.AFACCTNO = AF.ACCTNO AND AF.ACTYPE = AFT.ACTYPE
            AND AFT.MRTYPE = MRT.ACTYPE AND MRT.MRTYPE IN ('T','S')
            AND MRCF.EXPDATE <= TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
            AND MRCF.STATUS = 'A'
    ) LOOP
        UPDATE AFMAST AF
        SET AF.MRCRLIMITMAX = rec1.MRCRLIMITMAX
        WHERE AF.ACCTNO = rec1.ACCTNO;

        update MRPRMLIMITCF set status = 'C' where autoid= rec1.AUTOID;
    END LOOP;

    FOR rec IN (
        SELECT AF.ACCTNO, MAX(MST.AMT) AMT, max(AFT.MRCRLIMITMAX) AFTMRCRLIMITMAX
        FROM MRPRMLIMITCF MRCF, MRPRMLIMITMST MST, AFMAST AF, AFTYPE AFT, MRTYPE MRT
        WHERE MRCF.PROMOTIONID = MST.AUTOID
            AND MRCF.AFACCTNO = AF.ACCTNO AND AF.ACTYPE = AFT.ACTYPE
            AND AFT.MRTYPE = MRT.ACTYPE AND MRT.MRTYPE IN ('T','S')
            AND TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT) BETWEEN MRCF.VALDATE AND MRCF.EXPDATE
            AND MRCF.STATUS = 'A'
        GROUP BY AF.ACCTNO
    ) LOOP
        UPDATE AFMAST AF
        SET AF.MRCRLIMITMAX = GREATEST(GREATEST(AF.MRCRLIMITMAX,NVL(REC.AMT,0)), NVL(rec.AFTMRCRLIMITMAX,0))
        WHERE AF.ACCTNO = REC.ACCTNO;
    END LOOP;
    -- End of DungNH.

    --TungNT added, backup du lieu va reset seq phan he RM
    BEGIN
      CSPKS_RMPROC.PR_CHANGEWORKINGDATE(P_ERR_CODE);
    EXCEPTION
      WHEN OTHERS THEN
        PLOG.DEBUG(PKGCTX, 'Backup RM failed!');
        PLOG.ERROR(PKGCTX, SQLERRM);
    END;
    --End
   PLOG.error(PKGCTX, 'NAMNT TEST9');
    --PhuongHT add_ log Rtt truoc khi doi ngay
    CSPKS_LOGPROC.PR_LOG_MARGINRATE_LOG('AF-END');
    -- end of PhuongHT add
    --Ngay lam viec truoc
    V_PREVDATE := V_CURRDATE;
    BEGIN
      SELECT TO_CHAR(MIN(SBDATE), 'DD/MM/YYYY')
        INTO V_CURRDATE
        FROM SBCLDR
       WHERE CLDRTYPE = '000'
         AND HOLIDAY = 'N'
         AND SBDATE > TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    EXCEPTION
      WHEN OTHERS THEN
        PLOG.DEBUG(PKGCTX,
                   'l_lngErrCode: ' || ERRNUMS.C_SA_CALENDAR_MISSING);
        P_ERR_CODE := ERRNUMS.C_SA_CALENDAR_MISSING;
        RETURN;
    END;

    --Ngay lam viec tiep theo
    BEGIN
      SELECT TO_CHAR(MIN(SBDATE), 'DD/MM/YYYY')
        INTO V_NEXTDATE
        FROM SBCLDR
       WHERE CLDRTYPE = '000'
         AND HOLIDAY = 'N'
         AND SBDATE > TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    EXCEPTION
      WHEN OTHERS THEN
        PLOG.DEBUG(PKGCTX,
                   'l_lngErrCode: ' || ERRNUMS.C_SA_CALENDAR_MISSING);
        P_ERR_CODE := ERRNUMS.C_SA_CALENDAR_MISSING;
        RETURN;
    END;

    --Ngay lam viec tiep theo
    BEGIN
      SELECT TO_CHAR(MAX(SBDATE), 'DD/MM/YYYY')
        INTO V_DUEDATE
        FROM SBCLDR
       WHERE CLDRTYPE = '000'
         AND HOLIDAY = 'N'
         AND SBDATE < TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT);
    EXCEPTION
      WHEN OTHERS THEN
        PLOG.DEBUG(PKGCTX,
                   'l_lngErrCode: ' || ERRNUMS.C_SA_CALENDAR_MISSING);
        P_ERR_CODE := ERRNUMS.C_SA_CALENDAR_MISSING;
        RETURN;
    END;
    --Dat lai thong tin bang SYSVAR
    CSPKS_SYSTEM.PR_SET_SYSVAR('SYSTEM', 'DUEDATE', V_DUEDATE);
    CSPKS_SYSTEM.PR_SET_SYSVAR('SYSTEM', 'PREVDATE', V_PREVDATE);
    CSPKS_SYSTEM.PR_SET_SYSVAR('SYSTEM', 'CURRDATE', V_CURRDATE);
    CSPKS_SYSTEM.PR_SET_SYSVAR('SYSTEM', 'BUSDATE', V_CURRDATE);
    CSPKS_SYSTEM.PR_SET_SYSVAR('SYSTEM', 'NEXTDATE', V_NEXTDATE);
    --Cap nhat lai tin trong SBCLDR
    UPDATE SBCLDR
       SET SBBUSDAY = 'N'
     WHERE CLDRTYPE = '000'
       AND SBDATE = TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT);
    UPDATE SBCLDR
       SET SBBUSDAY = 'Y'
     WHERE CLDRTYPE = '000'
       AND SBDATE = TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);

         --Tinh so ngay vay du tinh cam nhat vao sysvar
    SELECT getnonworkingday(fn_getSYSCLEARDAY(getcurrdate)) SYSCLEARDAY INTO v_advclearday FROM dual;
    UPDATE sysvar
    SET varvalue =v_advclearday
    WHERE varname ='ADVCLEARDAY';

    PR_GEN_SBCURRDATE;

    --ngoc.vu-Jira561
    pr_gen_sbcurrdate4new;


    IF CSPKS_SAPROC.FN_APPLYSYSTEMPARAM(P_ERR_CODE) <> 0 THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAChangeWorkingDate');
      RETURN;
    END IF;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SAChangeWorkingDate');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || dbms_utility.format_error_backtrace);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAChangeWorkingDate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SACHANGEWORKINGDATE;

  /*PROCEDURE pr_SASynOnlineData(p_err_code  OUT varchar2)
  Is
  Begin
   plog.setbeginsection(pkgctx, 'pr_SASynOnlineData');
   Delete ol_log;
   Delete OL_ACCOUNT_SE;
   Insert into ol_account_se  select * from VW_OL_ACCOUNT_SE;
   For V_Acc in (Select acctno from Afmast )
    Loop
         sp_bd_getaccountposition_ol(v_Acc.acctno);
    End loop;
   p_err_code:=0;
   plog.setendsection(pkgctx, 'pr_SAChangeWorkingDate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_SASynOnlineData');
      RAISE errnums.E_SYSTEM_ERROR;
  End pr_SASynOnlineData;*/
  ---------------------------------pr_T0OverdraftCalculate------------------------------------------------
  PROCEDURE PR_T0OVERDRAFTCALCULATE(P_ERR_CODE OUT VARCHAR2) IS
    L_CURRDATE     VARCHAR2(10);
    L_AFACCTNO     VARCHAR2(20);
    L_TOAMT        NUMBER(20, 4);
    L_TOODAMT      NUMBER(20, 4);
    L_TOTALTOODAMT NUMBER(20, 4);
    L_TOTALTOAMT   NUMBER(20, 4);
    L_GROUPLEADER  VARCHAR2(20);
    L_COMPANYCD    VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_T0OverdraftCalculate');
    L_CURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    --0.phan bo T0 cho cac tai khoan thuong va vay margin loan
    PLOG.DEBUG(PKGCTX, 'Calculate for Normal and margin loan');
    L_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');
    UPDATE CIMAST SET T0ODAMT = 0 WHERE T0ODAMT > 0;

    FOR REC IN (SELECT CI.AFACCTNO,
                       NVL(U.T0, 0) T0,
                       GREATEST(-CI.BALANCE,
                                -CI.BALANCE - NVL(ADV.AVLADVANCE, 0),
                                0) ADDVND
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       CFMAST CF,
                       (SELECT U.ACCTNO, U.ACCLIMIT - NVL(T0PRIN, 0) T0
                          FROM (SELECT ACCTNO, SUM(ACCLIMIT) ACCLIMIT
                                  FROM USERAFLIMIT
                                 WHERE TYPERECEIVE = 'T0'
                                 GROUP BY ACCTNO) U,
                               (SELECT TRFACCTNO,
                                       SUM(OPRINNML + OPRINOVD) T0PRIN
                                  FROM LNMAST
                                 WHERE FTYPE = 'AF'
                                 GROUP BY TRFACCTNO) L
                         WHERE U.ACCTNO = L.TRFACCTNO(+)) U,
                       (SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV
                 WHERE AF.ACCTNO = CI.AFACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND MRT.MRTYPE IN ('N', 'L')
                   AND AFT.T0LNTYPE IS NOT NULL
                   AND AF.STATUS <> 'C'
                   AND AF.ACCTNO = ADV.AFACCTNO(+)
                   AND SUBSTR(CF.CUSTODYCD, 1, 3) = L_COMPANYCD
                   AND AF.ACCTNO = U.ACCTNO(+)
                   AND GREATEST(-CI.BALANCE,
                                -CI.BALANCE - NVL(ADV.AVLADVANCE, 0),
                                0) > 0) LOOP
      PLOG.DEBUG(PKGCTX, 'account:' || REC.AFACCTNO);
      UPDATE CIMAST
         SET T0ODAMT = GREATEST(REC.ADDVND, 0)
       WHERE ACCTNO = REC.AFACCTNO;
    END LOOP;

    --1 Phan bo voi T0 cho cac tk margin khong thuoc group
    FOR REC IN (SELECT CI.AFACCTNO,
                       NVL(U.T0, 0) T0,
                       GREATEST(-CI.BALANCE,
                                -CI.BALANCE - NVL(SE.AVLADVANCE, 0),
                                0) ADDVND
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       CFMAST CF,
                       (SELECT U.ACCTNO, U.ACCLIMIT - NVL(T0PRIN, 0) T0
                          FROM (SELECT ACCTNO, SUM(ACCLIMIT) ACCLIMIT
                                  FROM USERAFLIMIT
                                 WHERE TYPERECEIVE = 'T0'
                                 GROUP BY ACCTNO) U,
                               (SELECT TRFACCTNO,
                                       SUM(OPRINNML + OPRINOVD) T0PRIN
                                  FROM LNMAST
                                 WHERE FTYPE = 'AF'
                                 GROUP BY TRFACCTNO) L
                         WHERE U.ACCTNO = L.TRFACCTNO(+)) U,
                       V_GETSECMARGINRATIO SE
                 WHERE (AF.GROUPLEADER IS NULL OR
                       LENGTH(AF.GROUPLEADER) <> 10)
                   AND CF.CUSTID = AF.CUSTID
                   AND AF.ACCTNO = CI.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND MRT.MRTYPE IN ('S', 'T')
                   AND AFT.T0LNTYPE IS NOT NULL
                   AND AF.ACCTNO = U.ACCTNO(+)
                   AND AF.ACCTNO = SE.AFACCTNO(+)
                   AND GREATEST(-CI.BALANCE,
                                -CI.BALANCE - NVL(SE.AVLADVANCE, 0),
                                0) > 0)

     LOOP
      PLOG.DEBUG(PKGCTX, 'account:' || REC.AFACCTNO);
      UPDATE CIMAST
         SET T0ODAMT = GREATEST(REC.ADDVND, 0)
       WHERE ACCTNO = REC.AFACCTNO;
    END LOOP;
    --2 Phan bo voi T0 cho cac tk margin thuoc group
    FOR REC IN (SELECT AF.GROUPLEADER,
                       SUM(GREATEST(-CI.BALANCE,
                                    -CI.BALANCE - NVL(ADV.AVLADVANCE, 0),
                                    0)) ADDVND
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       (SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV
                 WHERE (AF.GROUPLEADER IS NOT NULL AND
                       LENGTH(AF.GROUPLEADER) = 10)
                   AND AF.ACCTNO = CI.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND MRT.MRTYPE IN ('S', 'T')
                   AND AFT.T0LNTYPE IS NOT NULL
                   AND AF.ACCTNO = ADV.AFACCTNO(+)
                 GROUP BY AF.GROUPLEADER) LOOP
      PLOG.DEBUG(PKGCTX, 'groupleader:' || REC.GROUPLEADER);
      L_GROUPLEADER  := REC.GROUPLEADER;
      L_TOTALTOODAMT := ROUND(REC.ADDVND, 0);
      FOR VC IN (SELECT AF.ACCTNO,
                        ABS(LEAST(CI.BALANCE, 0)) BALANCE,
                        NVL(U.T0, 0) T0
                   FROM AFMAST AF,
                        CIMAST CI,
                        (SELECT U.ACCTNO, U.ACCLIMIT - NVL(T0PRIN, 0) T0
                           FROM (SELECT ACCTNO, SUM(ACCLIMIT) ACCLIMIT
                                   FROM USERAFLIMIT
                                  WHERE TYPERECEIVE = 'T0'
                                  GROUP BY ACCTNO) U,
                                (SELECT TRFACCTNO,
                                        SUM(OPRINNML + OPRINOVD) T0PRIN
                                   FROM LNMAST
                                  WHERE FTYPE = 'AF'
                                  GROUP BY TRFACCTNO) L
                          WHERE U.ACCTNO = L.TRFACCTNO(+)) U
                  WHERE AF.ACCTNO = CI.ACCTNO
                    AND AF.GROUPLEADER = REC.GROUPLEADER
                    AND AF.ACCTNO = U.ACCTNO(+)
                  ORDER BY CI.BALANCE DESC) LOOP
        L_TOODAMT      := LEAST(L_TOTALTOODAMT, VC.T0);
        L_TOTALTOODAMT := L_TOTALTOODAMT - L_TOODAMT;
        L_TOAMT        := ROUND(VC.T0 - L_TOODAMT, 0);
        GENTRANSACTION1159_T2(VC.ACCTNO, L_TOODAMT, L_TOAMT);
      END LOOP;
    END LOOP;

    IF CSPKS_SAPROC.FN_SBS_AUTOGENADVANCELINE(P_ERR_CODE) <> 0 THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
      PLOG.SETENDSECTION(PKGCTX, 'pr_SAGeneralWorking');
      RETURN;
    END IF;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_T0OverdraftCalculate');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_T0OverdraftCalculate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_T0OVERDRAFTCALCULATE;

  ---------------------------------pr_T2OverdraftInterestAccure------------------------------------------------
  PROCEDURE PR_T2OVERDRAFTINTERESTACCURE(P_ERR_CODE OUT VARCHAR2) IS
    V_FRDATE VARCHAR2(10);
    V_TODATE VARCHAR2(10);
    V_DAYS   NUMBER(20, 0);
  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_T2OverdraftInterestAccure');
    V_FRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'PREVDATE');
    V_TODATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    V_DAYS   := TO_DATE(V_TODATE, SYSTEMNUMS.C_DATE_FORMAT) -
                TO_DATE(V_FRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    INSERT INTO CIINTTRAN
      (AUTOID,
       ACCTNO,
       INTTYPE,
       FRDATE,
       TODATE,
       ICRULE,
       IRRATE,
       INTBAL,
       INTAMT)
      SELECT SEQ_CIINTTRAN.NEXTVAL,
             MST.ACCTNO,
             'OD',
             TO_DATE(V_FRDATE, 'DD/MM/YYYY'),
             TO_DATE(V_TODATE, 'DD/MM/YYYY'),
             ICDEF.RULETYPE,
             ICDEF.ICRATE,
             MST.T2ODAMT ODAMT,
             ROUND(T2ODAMT * ICDEF.ICRATE / 100 / 360 * V_DAYS, 4) INTAMT
        FROM (SELECT A.ACCTNO,
                     A.ACTYPE,
                     A.STATUS,
                     A.ODAMT - NVL(STS.T2AMT, 0) T2ODAMT
                FROM CIMAST A,
                     (SELECT AFACCTNO, SUM(AMT + FEEAMT) T2AMT
                        FROM (SELECT S.AFACCTNO,
                                     SUM(S.AMT) AMT,
                                     MAX(OD.FEEAMT) FEEAMT
                                FROM STSCHD S, ODMAST OD
                               WHERE S.ORGORDERID = OD.ORDERID
                                 AND DUETYPE = 'RS'
                                 AND STATUS <> 'C'
                                 --ngoc.vu-Jira561
                                 AND /*GETDUEDATE(S.TXDATE, 'B', '000', 2)*/S.CLEARDATE >=
                                     (SELECT TO_DATE(VARVALUE, 'DD/MM/YYYY')
                                        FROM SYSVAR
                                       WHERE GRNAME = 'SYSTEM'
                                         AND VARNAME = 'CURRDATE')
                               GROUP BY ORGORDERID, S.AFACCTNO)
                       GROUP BY AFACCTNO) STS
               WHERE A.AFACCTNO = STS.AFACCTNO(+)) MST,
             CITYPE TYP,
             ICCFTYPEDEF ICDEF
       WHERE MST.T2ODAMT > 0
         AND MST.ACTYPE = TYP.ACTYPE
         AND MST.STATUS <> 'C'
         AND TYP.ACTYPE = ICDEF.ACTYPE
         AND ICDEF.MODCODE = 'CI'
         AND EVENTCODE = 'ODT2INTACR'
         AND ICDEF.RULETYPE IN ('S', 'F')
         AND ICDEF.DELTD = 'N';

    UPDATE CIMAST
       SET ODINTDT  = TO_DATE(V_TODATE, 'DD/MM/YYYY'),
           ODINTACR = ODINTACR +
                      NVL((SELECT INTAMT
                            FROM (SELECT ROUND(MST.T2ODAMT * ICDEF.ICRATE / 100 / 360 *
                                               V_DAYS,
                                               4) INTAMT,
                                         MST.ACCTNO
                                    FROM (SELECT A.ACCTNO,
                                                 A.ACTYPE,
                                                 A.STATUS,
                                                 A.ODAMT - NVL(STS.T2AMT, 0) T2ODAMT
                                            FROM CIMAST A,
                                                 (SELECT AFACCTNO,
                                                         SUM(AMT + FEEAMT) T2AMT
                                                    FROM (SELECT S.AFACCTNO,
                                                                 SUM(S.AMT) AMT,
                                                                 MAX(OD.FEEAMT) FEEAMT
                                                            FROM STSCHD S,
                                                                 ODMAST OD
                                                           WHERE S.ORGORDERID =
                                                                 OD.ORDERID
                                                             AND DUETYPE = 'RS'
                                                             AND STATUS <> 'C'
                                                             --ngoc.vu-Jira561
                                                             AND /*GETDUEDATE(S.TXDATE,
                                                                            'B',
                                                                            '000',
                                                                            2)*/s.CLEARDATE >=
                                                                 (SELECT TO_DATE(VARVALUE,
                                                                                 'DD/MM/YYYY')
                                                                    FROM SYSVAR
                                                                   WHERE GRNAME =
                                                                         'SYSTEM'
                                                                     AND VARNAME =
                                                                         'CURRDATE')
                                                           GROUP BY ORGORDERID,
                                                                    S.AFACCTNO)
                                                   GROUP BY AFACCTNO) STS
                                           WHERE A.AFACCTNO = STS.AFACCTNO(+)) MST,
                                         CITYPE TYP,
                                         ICCFTYPEDEF ICDEF
                                   WHERE MST.T2ODAMT > 0
                                     AND MST.ACTYPE = TYP.ACTYPE
                                     AND MST.STATUS <> 'C'
                                     AND TYP.ACTYPE = ICDEF.ACTYPE
                                     AND ICDEF.MODCODE = 'CI'
                                     AND EVENTCODE = 'ODT2INTACR'
                                     AND ICDEF.RULETYPE IN ('S', 'F')
                                     AND ICDEF.DELTD = 'N') A
                           WHERE A.ACCTNO = CIMAST.ACCTNO),
                          0);
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_T2OverdraftInterestAccure');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_T2OverdraftInterestAccure');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_T2OVERDRAFTINTERESTACCURE;

  ---------------------------------pr_SimpleOvdtInterestAccure------------------------------------------------
  PROCEDURE PR_SIMPLEOVDTINTERESTACCURE(P_ERR_CODE OUT VARCHAR2) IS
    V_FRDATE VARCHAR2(10);
    V_TODATE VARCHAR2(10);
    V_DAYS   NUMBER(20, 0);
  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleOvdtInterestAccure');
    V_FRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'PREVDATE');
    V_TODATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    V_DAYS   := TO_DATE(V_TODATE, SYSTEMNUMS.C_DATE_FORMAT) -
                TO_DATE(V_FRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    INSERT INTO CIINTTRAN
      (AUTOID,
       ACCTNO,
       INTTYPE,
       FRDATE,
       TODATE,
       ICRULE,
       IRRATE,
       INTBAL,
       INTAMT)
      SELECT SEQ_CIINTTRAN.NEXTVAL,
             MST.ACCTNO,
             'OD',
             TO_DATE(V_FRDATE, 'DD/MM/YYYY'),
             TO_DATE(V_TODATE, 'DD/MM/YYYY'),
             'S',
             ICDEF.ICRATE,
             MST.ODAMT,
             ROUND(MST.ODAMT * ICDEF.ICRATE / 100 / 360 * V_DAYS, 4) INTAMT
        FROM CIMAST MST, CITYPE TYP, ICCFTYPEDEF ICDEF
       WHERE ODAMT > 0
         AND MST.ACTYPE = TYP.ACTYPE
         AND MST.STATUS <> 'C'
         AND TYP.ACTYPE = ICDEF.ACTYPE
         AND ICDEF.MODCODE = 'CI'
         AND EVENTCODE = 'ODINTACR'
         AND ICDEF.RULETYPE = 'S'
         AND ICDEF.DELTD = 'N';

    UPDATE CIMAST
       SET ODINTDT  = TO_DATE(V_TODATE, 'DD/MM/YYYY'),
           ODINTACR = ODINTACR +
                      NVL((SELECT INTAMT
                            FROM (SELECT ROUND(MST.ODAMT * ICDEF.ICRATE / 100 / 360 *
                                               V_DAYS,
                                               4) INTAMT,
                                         MST.ACCTNO
                                    FROM CIMAST      MST,
                                         CITYPE      TYP,
                                         ICCFTYPEDEF ICDEF
                                   WHERE ODAMT > 0
                                     AND MST.ACTYPE = TYP.ACTYPE
                                     AND MST.STATUS <> 'C'
                                     AND TYP.ACTYPE = ICDEF.ACTYPE
                                     AND ICDEF.MODCODE = 'CI'
                                     AND EVENTCODE = 'ODINTACR'
                                     AND ICDEF.RULETYPE = 'S'
                                     AND ICDEF.DELTD = 'N') A
                           WHERE A.ACCTNO = CIMAST.ACCTNO),
                          0);
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleOvdtInterestAccure');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleOvdtInterestAccure');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SIMPLEOVDTINTERESTACCURE;

  ---------------------------------pr_SimpleCreditInterestAccure------------------------------------------------
  PROCEDURE PR_SIMPLECREDITINTERESTACCURE(P_ERR_CODE OUT VARCHAR2) IS
    V_FRDATE VARCHAR2(10);
    V_TODATE VARCHAR2(10);
    V_DAYS   NUMBER(20, 0);
    V_RUNAT  VARCHAR2(20);
  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleCreditInterestAccure');
    --Neu chay batch cuoi ngay thi tinh tu ngya hien tai den ngay ke tiep
    --Neu chay batch dau ngay thi tinh tu ngay hom truoc den ngay hien tai
    SELECT RUNAT INTO V_RUNAT FROM SBBATCHCTL WHERE BCHMDL = 'SCRINTACR';
    IF V_RUNAT = 'BOD' THEN
      V_FRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'PREVDATE');
      V_TODATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    ELSE
      V_FRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
      V_TODATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    END IF;
    --v_frdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
    --v_todate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    V_DAYS := TO_DATE(V_TODATE, SYSTEMNUMS.C_DATE_FORMAT) -
              TO_DATE(V_FRDATE, SYSTEMNUMS.C_DATE_FORMAT);

    INSERT INTO CIINTTRAN
      (AUTOID,
       ACCTNO,
       INTTYPE,
       FRDATE,
       TODATE,
       ICRULE,
       IRRATE,
       INTBAL,
       INTAMT)
      SELECT SEQ_CIINTTRAN.NEXTVAL,
             MST.ACCTNO,
             'CR',
             TO_DATE(V_FRDATE, 'DD/MM/YYYY'),
             TO_DATE(V_TODATE, 'DD/MM/YYYY'),
             'S',
             ICDEF.ICRATE,
             MST.BALANCE + MST.EMKAMT,
             ROUND((MST.BALANCE + MST.EMKAMT) * ICDEF.ICRATE / 100 / 360 *
                   V_DAYS,
                   4) INTAMT
        FROM CIMAST MST, CITYPE TYP, ICCFTYPEDEF ICDEF, CFMAST CF
       WHERE MST.BALANCE + MST.EMKAMT > 0
         AND MST.ACTYPE = TYP.ACTYPE
         AND MST.STATUS <> 'C'
         AND MST.STATUS <> 'N'
         AND TYP.ACTYPE = ICDEF.ACTYPE
         AND ICDEF.MODCODE = 'CI'
         AND EVENTCODE = 'CRINTACR'
         AND ICDEF.RULETYPE = 'S'
         AND ICDEF.DELTD = 'N'
         AND MST.COREBANK <> 'Y'
         AND MST.CUSTID = CF.CUSTID
         AND CF.CUSTATCOM = 'Y';

    UPDATE CIMAST
       SET CRINTDT  = TO_DATE(V_TODATE, 'DD/MM/YYYY'),
           CRINTACR = CRINTACR +
                      NVL((SELECT INTAMT
                            FROM (SELECT ROUND((MST.BALANCE + MST.EMKAMT) *
                                               ICDEF.ICRATE / 100 / 360 *
                                               V_DAYS,
                                               4) INTAMT,
                                         MST.ACCTNO
                                    FROM CIMAST      MST,
                                         CITYPE      TYP,
                                         ICCFTYPEDEF ICDEF,
                                         CFMAST      CF
                                   WHERE MST.BALANCE + MST.EMKAMT > 0
                                     AND MST.ACTYPE = TYP.ACTYPE
                                     AND MST.STATUS <> 'C'
                                     AND MST.STATUS <> 'N'
                                     AND TYP.ACTYPE = ICDEF.ACTYPE
                                     AND ICDEF.MODCODE = 'CI'
                                     AND EVENTCODE = 'CRINTACR'
                                     AND ICDEF.RULETYPE = 'S'
                                     AND ICDEF.DELTD = 'N'
                                     AND CF.CUSTID = MST.CUSTID
                                     AND CF.CUSTATCOM = 'Y') A
                           WHERE A.ACCTNO = CIMAST.ACCTNO),
                          0);
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleCreditInterestAccure');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SimpleCreditInterestAccure');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SIMPLECREDITINTERESTACCURE;

  ---------------------------------pr_ICCFCreditInterestAccure------------------------------------------------
  PROCEDURE PR_ICCFCREDITINTERESTACCURE(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_INTRATE       NUMBER(20, 6);
    L_RIGHTRATE     NUMBER(20, 6);
    V_DELTA         NUMBER(20, 6);
    L_RULETYPE      VARCHAR2(10);
    L_CALCDAYS      NUMBER;
    L_DBLINTAMT     NUMBER(20, 4);
    V_INTTYPE       VARCHAR2(10);
    L_DBLTOTALAMT   NUMBER(20, 4);
    L_DBLTEMPAMT    NUMBER(20, 4);
    L_COUNT         NUMBER;
    L_TEMPCOUNT     NUMBER;

    V_FRDATE DATE;
    V_TODATE DATE;
    V_RUNAT  VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ICCFCreditInterestAccure');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM AFMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

    SELECT VARVALUE
      INTO V_STRNEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';

    --Neu chay batch cuoi ngay thi tinh tu ngya hien tai den ngay ke tiep
    --Neu chay batch dau ngay thi tinh tu ngay hom truoc den ngay hien tai
    SELECT RUNAT INTO V_RUNAT FROM SBBATCHCTL WHERE BCHMDL = 'CICRINTACR';
    IF V_RUNAT = 'BOD' THEN
      V_FRDATE := TO_DATE(V_STRPREVDATE, 'DD/MM/RRRR');
      V_TODATE := TO_DATE(V_STRCURRDATE, 'DD/MM/RRRR');
    ELSE
      V_FRDATE := TO_DATE(V_STRCURRDATE, 'DD/MM/RRRR');
      V_TODATE := TO_DATE(V_STRNEXTDATE, 'DD/MM/RRRR');
    END IF;

    BEGIN
      --Select to_date(v_strCURRDATE,systemnums.c_date_format) -
      --        to_date(v_strPREVDATE,systemnums.c_date_format) into l_CalcDays
      --From dual;
      SELECT V_TODATE - V_FRDATE INTO L_CALCDAYS FROM DUAL;
    EXCEPTION
      WHEN OTHERS THEN
        L_CALCDAYS := 1;
    END;

    L_INTRATE := 0;
    V_DELTA   := 0;
    V_INTTYPE := 'CR';

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT MST.*,
                       (MST.BALANCE) INTBAL,
                       CIT.RATEID,
                       CIT.EFFECTIVEDT
                  FROM AFMAST AF,
                       (SELECT A.ACTYPE, A.RATEID, B.EFFECTIVEDT
                          FROM ICCFTYPEDEF I, CITYPE A
                          LEFT JOIN IRRATE B
                            ON A.RATEID = B.RATEID
                         WHERE A.ACTYPE = I.ACTYPE
                           AND I.MODCODE = 'CI'
                           AND I.EVENTCODE = 'CRINTACR') CIT,
                       (SELECT MOD.*
                          FROM (SELECT ROWNUM INDEXROW, CIMAST.* FROM CIMAST) MOD
                         WHERE INDEXROW BETWEEN P_FROMROW AND P_TOROW) MST,
                       CFMAST CF
                 WHERE AF.ACCTNO = MST.AFACCTNO
                   AND CIT.ACTYPE = MST.ACTYPE
                   AND MST.COREBANK <> 'Y'
                   AND AF.STATUS <> 'N'
                   AND CF.CUSTID = AF.CUSTID
                   AND CF.CUSTATCOM = 'Y' -- PhuongHT sua chi tinh lai tien gui cho tklk tai cong ty
                   AND MST.AFACCTNO NOT IN
                       (SELECT AFACCTNO
                          FROM EXAFMAST
                         WHERE STATUS <> 'E'
                           AND EXTYPE = 'B'
                           AND MODCODE = 'CI'
                           AND EVENTCODE = 'CRINTACR'
                           AND EXPDATE >=
                               TO_DATE(V_STRCURRDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)) --DIEU KIEN LOAI BO NHUNG KHACH HANG DUOC MIEN PHI

                ) LOOP

      -- Neu lich lai cai dat truoc da den ngay hieu luc
      -- Tinh lai theo lich da cai dat truoc
      IF REC.INTBAL > 0 THEN

        IF TO_DATE(REC.EFFECTIVEDT, SYSTEMNUMS.C_DATE_FORMAT) <=
           TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) THEN

          L_INTRATE   := CSPKS_CIPROC.PR_IRCALCCREDITINTEREST(REC.ACTYPE,
                                                              REC.INTBAL,
                                                              L_RULETYPE);
          L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                               L_CALCDAYS,
                               4);

          IF L_DBLINTAMT > 0 THEN
            INSERT INTO CIINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               V_INTTYPE,
               V_FRDATE,
               V_TODATE,
               L_RULETYPE,
               NVL(L_INTRATE, 0),
               REC.INTBAL,
               NVL(L_DBLINTAMT, 0));
            UPDATE CIMAST
               SET CRINTACR = CRINTACR + NVL(L_DBLINTAMT, 0),
                   CRINTDT  = TO_DATE(V_STRCURRDATE,
                                      SYSTEMNUMS.C_DATE_FORMAT)
             WHERE ACCTNO = REC.ACCTNO;
          END IF;

        ELSE
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Lay base rate trong iccftypedef
            SELECT ICRATE, RULETYPE
              INTO L_INTRATE, L_RULETYPE
              FROM ICCFTYPEDEF
             WHERE ACTYPE = REC.ACTYPE
               AND MODCODE = 'CI'
               AND EVENTCODE = 'CRINTACR'
               AND DELTD <> 'Y'
                  -- Ham nay chi tinh cho 3 TH : F: Co dinh, T: Tier, C: Cluster, TH S: Don gian co han khac tinh.
               AND RULETYPE IN ('T', 'C', 'F');
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN

              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'CI'
                 AND EVENTCODE = 'CRINTACR'
                 AND DELTD <> 'Y'
                 AND FRAMT < REC.INTBAL
                 AND TOAMT > REC.INTBAL;

              L_INTRATE   := L_INTRATE + V_DELTA;
              L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                                   L_CALCDAYS,
                                   4);

            ELSIF L_RULETYPE = 'C' THEN

              V_DELTA       := 0;
              L_DBLINTAMT   := 0;
              L_DBLTOTALAMT := REC.INTBAL;
              L_TEMPCOUNT   := 0;

              BEGIN
                SELECT COUNT(1)
                  INTO L_COUNT
                  FROM ICCFTYPEDEF A, ICCFTIER B
                 WHERE A.EVENTCODE = 'CRINTACR'
                   AND A.DELTD <> 'Y'
                   AND A.ACTYPE = B.ACTYPE
                   AND A.EVENTCODE = B.EVENTCODE
                   AND A.MODCODE = 'CI'
                   AND A.MODCODE = B.MODCODE
                   AND A.ACTYPE = REC.ACTYPE
                   AND B.TOAMT <= L_DBLTOTALAMT;
              EXCEPTION
                WHEN OTHERS THEN
                  L_COUNT := 0;
              END;

              FOR CLUSTER_REC IN (SELECT A.OPERAND,
                                         A.ICRATE,
                                         B.AUTOID,
                                         B.MODCODE,
                                         B.ACTYPE,
                                         B.EVENTCODE,
                                         B.TIERNAME,
                                         B.FRAMT,
                                         B.TOAMT,
                                         B.DELTA,
                                         B.ICCFSTATUS,
                                         B.DELTD
                                    FROM ICCFTYPEDEF A, ICCFTIER B
                                   WHERE A.EVENTCODE = 'CRINTACR'
                                     AND A.DELTD <> 'Y'
                                     AND A.ACTYPE = B.ACTYPE
                                     AND A.EVENTCODE = B.EVENTCODE
                                     AND A.MODCODE = 'CI'
                                     AND A.MODCODE = B.MODCODE
                                     AND A.ACTYPE = REC.ACTYPE
                                     AND B.TOAMT <= L_DBLTOTALAMT
                                   ORDER BY B.FRAMT DESC) LOOP

                IF CLUSTER_REC.OPERAND = '+' THEN
                  L_INTRATE := CLUSTER_REC.ICRATE + CLUSTER_REC.DELTA;
                ELSIF CLUSTER_REC.OPERAND = '-' THEN
                  L_INTRATE := CLUSTER_REC.ICRATE - CLUSTER_REC.DELTA;
                ELSIF CLUSTER_REC.OPERAND = '=' THEN
                  L_INTRATE := CLUSTER_REC.DELTA;
                END IF;

                IF L_COUNT > L_TEMPCOUNT THEN
                  L_TEMPCOUNT   := L_TEMPCOUNT + 1;
                  L_DBLTEMPAMT  := L_DBLTOTALAMT - CLUSTER_REC.FRAMT;
                  L_DBLTOTALAMT := L_DBLTOTALAMT - CLUSTER_REC.FRAMT;
                ELSE
                  L_DBLTEMPAMT := L_DBLTOTALAMT;
                END IF;

                -- Tien lai
                L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * L_DBLTEMPAMT *
                                     L_CALCDAYS,
                                     4);

                IF L_DBLINTAMT > 0 THEN

                  INSERT INTO CIINTTRAN
                    (AUTOID,
                     ACCTNO,
                     INTTYPE,
                     FRDATE,
                     TODATE,
                     ICRULE,
                     IRRATE,
                     INTBAL,
                     INTAMT)
                  VALUES
                    (SEQ_CIINTTRAN.NEXTVAL,
                     REC.ACCTNO,
                     V_INTTYPE,
                     V_FRDATE,
                     V_TODATE,
                     L_RULETYPE,
                     L_INTRATE,
                     L_DBLTEMPAMT,
                     L_DBLINTAMT);

                  UPDATE CIMAST
                     SET CRINTACR = CRINTACR + L_DBLINTAMT,
                         CRINTDT  = TO_DATE(V_STRCURRDATE,
                                            SYSTEMNUMS.C_DATE_FORMAT)
                   WHERE ACCTNO = REC.ACCTNO;

                END IF;

              END LOOP;
            ELSE
              -- If l_ruletype ='T' Then
              V_DELTA     := 0;
              L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                                   L_CALCDAYS,
                                   4);
            END IF;

            -- l_intrate:=l_intrate+v_delta;

          EXCEPTION
            WHEN OTHERS THEN
              L_INTRATE   := 0;
              L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                                   L_CALCDAYS,
                                   4);
          END;

          IF L_RULETYPE <> 'C' AND L_DBLINTAMT > 0 THEN

            /*INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
            VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, to_date(v_strPREVDATE,systemnums.c_date_format), to_date(v_strCURRDATE,systemnums.c_date_format), l_ruletype, l_intrate, rec.INTBAL, l_dblINTAMT);
            UPDATE CIMAST SET CRINTACR = CRINTACR + l_dblINTAMT , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;*/
            INSERT INTO CIINTTRAN
              (AUTOID,
               ACCTNO,
               INTTYPE,
               FRDATE,
               TODATE,
               ICRULE,
               IRRATE,
               INTBAL,
               INTAMT)
            VALUES
              (SEQ_CIINTTRAN.NEXTVAL,
               REC.ACCTNO,
               V_INTTYPE,
               V_FRDATE,
               V_TODATE,
               L_RULETYPE,
               L_INTRATE,
               REC.INTBAL,
               L_DBLINTAMT);
            UPDATE CIMAST
               SET CRINTACR = CRINTACR + L_DBLINTAMT,
                   CRINTDT  = TO_DATE(V_STRCURRDATE,
                                      SYSTEMNUMS.C_DATE_FORMAT)
             WHERE ACCTNO = REC.ACCTNO;

          END IF;

        END IF; -- If To_Date(REC.EFFECTIVEDT,systemnums.c_date_format) <= To_Date(v_strCURRDATE,systemnums.c_date_format) Then
      END IF; -- If rec.INTBAL > 0 then
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ICCFCreditInterestAccure');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX,
                 'got error on release pr_ICCFCreditInterestAccure');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ICCFCreditInterestAccure');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ICCFCREDITINTERESTACCURE;

  ---------------------------------pr_ICCFCreditInterestAccure2------------------------------------------------
  PROCEDURE PR_ICCFCREDITINTERESTACCURE2(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2,
                                         P_FROMROW  NUMBER,
                                         P_TOROW    NUMBER,
                                         P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG       TX.MSG_RECTYPE;
    V_STRCURRDATE VARCHAR2(20);
    V_STRPREVDATE VARCHAR2(20);
    V_STRNEXTDATE VARCHAR2(20);
    L_ERR_PARAM   VARCHAR2(300);
    L_MAXROW      NUMBER(20, 0);
    L_INTRATE     NUMBER(20, 6);
    L_RIGHTRATE   NUMBER(20, 6);
    V_DELTA       NUMBER(20, 6);
    L_RULETYPE    VARCHAR2(10);
    L_CALCDAYS    NUMBER;
    L_DBLINTAMT   NUMBER(20, 4);
    V_INTTYPE     VARCHAR2(10);
    L_DBLTOTALAMT NUMBER(20, 4);
    L_DBLTEMPAMT  NUMBER(20, 4);
    L_COUNT       NUMBER;
    L_TEMPCOUNT   NUMBER;

    V_FRDATE DATE;
    V_TODATE DATE;
    V_RUNAT  VARCHAR2(20);
    v_DAYINTMR number ;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ICCFCreditInterestAccure2');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM AFMAST;
    P_LASTRUN := 'Y';

    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

    SELECT VARVALUE
      INTO V_STRNEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';

           SELECT to_number(VARVALUE)
      INTO v_DAYINTMR
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'DAYINTMR';

    --Neu chay batch cuoi ngay thi tinh tu ngya hien tai den ngay ke tiep
    --Neu chay batch dau ngay thi tinh tu ngay hom truoc den ngay hien tai
    SELECT RUNAT INTO V_RUNAT FROM SBBATCHCTL WHERE BCHMDL = 'CICRINTACR';
    IF V_RUNAT = 'BOD' THEN
      V_FRDATE := TO_DATE(V_STRPREVDATE, 'DD/MM/RRRR');
      V_TODATE := TO_DATE(V_STRCURRDATE, 'DD/MM/RRRR');
    ELSE
      V_FRDATE := TO_DATE(V_STRCURRDATE, 'DD/MM/RRRR');
      V_TODATE := TO_DATE(V_STRNEXTDATE, 'DD/MM/RRRR');
    END IF;

    BEGIN
      --Select to_date(v_strCURRDATE,systemnums.c_date_format) -
      --        to_date(v_strPREVDATE,systemnums.c_date_format) into l_CalcDays
      --From dual;
      SELECT V_TODATE - V_FRDATE INTO L_CALCDAYS FROM DUAL;
    EXCEPTION
      WHEN OTHERS THEN
        L_CALCDAYS := 1;
    END;

    L_INTRATE := 0;
    V_DELTA   := 0;
    V_INTTYPE := 'CR';

    --Tinh lai cong don cho cac truong hop tinh lai theo Tier va Cluster
    FOR REC IN (SELECT MST.*,
                       (MST.BALANCE + MST.EMKAMT) INTBAL,
                       ICCF.ICRATE,
                       ICCF.RULETYPE
                  FROM AFMAST AF, CIMAST MST, CFMAST CF, ICCFTYPEDEF ICCF
                 WHERE AF.ACCTNO = MST.AFACCTNO
                   AND MST.COREBANK <> 'Y'
                   AND AF.STATUS <> 'N'
                   AND CF.CUSTID = AF.CUSTID
                   AND CF.CUSTATCOM = 'Y' -- PhuongHT sua chi tinh lai tien gui cho tklk tai cong ty
                   AND MST.AFACCTNO NOT IN
                       (SELECT AFACCTNO
                          FROM EXAFMAST
                         WHERE STATUS <> 'E'
                           AND EXTYPE = 'B'
                           AND MODCODE = 'CI'
                           AND EVENTCODE = 'CRINTACR'
                           AND EXPDATE >=
                               TO_DATE(V_STRCURRDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)) --DIEU KIEN LOAI BO NHUNG KHACH HANG DUOC MIEN PHI
                   AND MST.BALANCE + MST.EMKAMT > 0
                   AND ICCF.ACTYPE = MST.ACTYPE
                   AND ICCF.MODCODE = 'CI'
                   AND ICCF.EVENTCODE = 'CRINTACR'
                   AND ICCF.DELTD <> 'Y'
                      -- Ham nay chi tinh cho 3 TH : T: Tier, C: Cluster, TH S,F: Don gian co han khac tinh.
                   AND ICCF.RULETYPE IN ('T', 'C')

                ) LOOP

      -- Neu lich lai cai dat truoc da den ngay hieu luc
      -- Tinh lai theo lich da cai dat truoc
      --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
      BEGIN
        L_INTRATE  := REC.ICRATE;
        L_RULETYPE := REC.RULETYPE;
        --Xac dinh tier
        IF L_RULETYPE = 'T' THEN

          SELECT DELTA
            INTO V_DELTA
            FROM ICCFTIER
           WHERE ACTYPE = REC.ACTYPE
             AND MODCODE = 'CI'
             AND EVENTCODE = 'CRINTACR'
             AND DELTD <> 'Y'
             AND FRAMT < REC.INTBAL
             AND TOAMT > REC.INTBAL;

          L_INTRATE   := L_INTRATE + V_DELTA;
          L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                               L_CALCDAYS,
                               4);

        ELSIF L_RULETYPE = 'C' THEN

          V_DELTA       := 0;
          L_DBLINTAMT   := 0;
          L_DBLTOTALAMT := REC.INTBAL;
          L_TEMPCOUNT   := 0;

          BEGIN
            SELECT COUNT(1)
              INTO L_COUNT
              FROM ICCFTYPEDEF A, ICCFTIER B
             WHERE A.EVENTCODE = 'CRINTACR'
               AND A.DELTD <> 'Y'
               AND A.ACTYPE = B.ACTYPE
               AND A.EVENTCODE = B.EVENTCODE
               AND A.MODCODE = 'CI'
               AND A.MODCODE = B.MODCODE
               AND A.ACTYPE = REC.ACTYPE
               AND B.TOAMT <= L_DBLTOTALAMT;
          EXCEPTION
            WHEN OTHERS THEN
              L_COUNT := 0;
          END;

          FOR CLUSTER_REC IN (SELECT A.OPERAND,
                                     A.ICRATE,
                                     B.AUTOID,
                                     B.MODCODE,
                                     B.ACTYPE,
                                     B.EVENTCODE,
                                     B.TIERNAME,
                                     B.FRAMT,
                                     B.TOAMT,
                                     B.DELTA,
                                     B.ICCFSTATUS,
                                     B.DELTD
                                FROM ICCFTYPEDEF A, ICCFTIER B
                               WHERE A.EVENTCODE = 'CRINTACR'
                                 AND A.DELTD <> 'Y'
                                 AND A.ACTYPE = B.ACTYPE
                                 AND A.EVENTCODE = B.EVENTCODE
                                 AND A.MODCODE = 'CI'
                                 AND A.MODCODE = B.MODCODE
                                 AND A.ACTYPE = REC.ACTYPE
                                 AND B.TOAMT <= L_DBLTOTALAMT
                               ORDER BY B.FRAMT DESC) LOOP

            IF CLUSTER_REC.OPERAND = '+' THEN
              L_INTRATE := CLUSTER_REC.ICRATE + CLUSTER_REC.DELTA;
            ELSIF CLUSTER_REC.OPERAND = '-' THEN
              L_INTRATE := CLUSTER_REC.ICRATE - CLUSTER_REC.DELTA;
            ELSIF CLUSTER_REC.OPERAND = '=' THEN
              L_INTRATE := CLUSTER_REC.DELTA;
            END IF;

            IF L_COUNT > L_TEMPCOUNT THEN
              L_TEMPCOUNT   := L_TEMPCOUNT + 1;
              L_DBLTEMPAMT  := L_DBLTOTALAMT - CLUSTER_REC.FRAMT;
              L_DBLTOTALAMT := L_DBLTOTALAMT - CLUSTER_REC.FRAMT;
            ELSE
              L_DBLTEMPAMT := L_DBLTOTALAMT;
            END IF;

            -- Tien lai
            L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * L_DBLTEMPAMT *
                                 L_CALCDAYS,
                                 4);

            IF L_DBLINTAMT > 0 THEN

              INSERT INTO CIINTTRAN
                (AUTOID,
                 ACCTNO,
                 INTTYPE,
                 FRDATE,
                 TODATE,
                 ICRULE,
                 IRRATE,
                 INTBAL,
                 INTAMT)
              VALUES
                (SEQ_CIINTTRAN.NEXTVAL,
                 REC.ACCTNO,
                 V_INTTYPE,
                 V_FRDATE,
                 V_TODATE,
                 L_RULETYPE,
                 L_INTRATE,
                 L_DBLTEMPAMT,
                 L_DBLINTAMT);

              UPDATE CIMAST
                 SET CRINTACR = CRINTACR + L_DBLINTAMT,
                     CRINTDT  = TO_DATE(V_STRCURRDATE,
                                        SYSTEMNUMS.C_DATE_FORMAT)
               WHERE ACCTNO = REC.ACCTNO;

            END IF;

          END LOOP;
        ELSE
          -- If l_ruletype ='T' Then
          V_DELTA     := 0;
          L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                               L_CALCDAYS,
                               4);
        END IF;

        -- l_intrate:=l_intrate+v_delta;

      EXCEPTION
        WHEN OTHERS THEN
          L_INTRATE   := 0;
          L_DBLINTAMT := ROUND(L_INTRATE / 100 / 360 * REC.INTBAL *
                               L_CALCDAYS,
                               4);
      END;

      IF L_RULETYPE <> 'C' AND L_DBLINTAMT > 0 THEN

        INSERT INTO CIINTTRAN
          (AUTOID,
           ACCTNO,
           INTTYPE,
           FRDATE,
           TODATE,
           ICRULE,
           IRRATE,
           INTBAL,
           INTAMT)
        VALUES
          (SEQ_CIINTTRAN.NEXTVAL,
           REC.ACCTNO,
           V_INTTYPE,
           V_FRDATE,
           V_TODATE,
           L_RULETYPE,
           L_INTRATE,
           REC.INTBAL,
           L_DBLINTAMT);
        UPDATE CIMAST
           SET CRINTACR = CRINTACR + L_DBLINTAMT,
               CRINTDT  = TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
         WHERE ACCTNO = REC.ACCTNO;

      END IF;
    END LOOP;

    -- HaiLT them
    -- Cap nhap lai. lai~ suat tu Lich lai cai` dat. truoc, chi doi voi cac IRTYPE = 0 (Lai tuong lai)
    FOR REC IN (SELECT B.ACTYPE, B.RATEID, B.RATE, B.EFFECTIVEDT
                  FROM IRRATE B
                 WHERE B.STATUS = 'A'
                   AND B.IRTYPE = 0
                   AND B.EFFECTIVEDT <= GETCURRDATE) LOOP

      UPDATE ICCFTYPEDEF
         SET ICRATE = REC.RATE
       WHERE MODCODE = 'CI'
         AND EVENTCODE = 'CRINTACR'
         AND ACTYPE = REC.ACTYPE;
      UPDATE IRRATE SET STATUS = 'C' WHERE RATEID = REC.RATEID;
      --UPDATE CITYPE SET RATEID = '' WHERE ACTYPE = REC.ACTYPE;
    END LOOP;

    -- Tinh lai. lai~ backdate voi lai suat tu Lich lai~ cai` dat. truoc, chi doi voi cac IRTYPE = 1 (Lai backdate);
    FOR REC IN (SELECT ACTYPE, RATEID, RATE, EFFECTIVEDT, TODATE
                  FROM IRRATE
                 WHERE STATUS = 'A'
                   AND IRTYPE = 1) LOOP

      FOR REC1 IN (SELECT MST.ACCTNO,
                          REC.RATE        RATE,
                          REC.EFFECTIVEDT FRDATE,
                          REC.TODATE      TODATE
                     FROM CIMAST      MST,
                          CITYPE      TYP,
                          ICCFTYPEDEF ICDEF,
                          CFMAST      CF
                    WHERE MST.BALANCE + MST.EMKAMT > 0
                      AND MST.ACTYPE = TYP.ACTYPE
                      AND MST.STATUS <> 'C'
                      AND MST.STATUS <> 'N'
                      AND TYP.ACTYPE = ICDEF.ACTYPE
                      AND ICDEF.MODCODE = 'CI'
                      AND EVENTCODE = 'CRINTACR'
                      AND ICDEF.RULETYPE = 'F'
                      AND ICDEF.DELTD = 'N'
                      AND CF.CUSTID = MST.CUSTID
                      AND CF.CUSTATCOM = 'Y'
                      AND TYP.ACTYPE = REC.ACTYPE) LOOP
        -- Tru lai~ cu~ bi sai ra khoi crintacr
        UPDATE CIMAST
           SET CRINTACR = CRINTACR - NVL((SELECT SUM(INTAMT)
                                           FROM CIINTTRAN
                                          WHERE ACCTNO = REC1.ACCTNO
                                            AND FRDATE BETWEEN REC1.FRDATE AND
                                                REC1.TODATE),
                                         0)
         WHERE ACCTNO = REC1.ACCTNO;

        --update ciinttran set irrate = rec1.rate where ACCTNO = rec1.acctno and frdate between rec1.frdate and rec1.todate;

        -- Cap nhap ti le lai moi vao CIINTTRAN
        -- Tinh lai~ moi vao CIINTTRAN
        UPDATE CIINTTRAN
           SET IRRATE = REC1.RATE,
               INTAMT = ROUND(INTBAL * REC1.RATE / 100 / 360 *
                              (TODATE - FRDATE),
                              4)
         WHERE ACCTNO = REC1.ACCTNO
           AND FRDATE BETWEEN REC1.FRDATE AND REC1.TODATE;

      END LOOP;

      -- Cap nhap status = 'C'
      UPDATE IRRATE SET STATUS = 'C' WHERE RATEID = REC.RATEID;

    END LOOP;

    -- Cap nhap tong so tien mua van duoc tinh lai vao truong INTBUYAMT
    UPDATE CIMAST SET INTBUYAMT = 0;

    /*update cimast set intbuyamt =
    nvl(
            (    select buyamt from
                (
                    SELECT STS.ACCTNO, SUM(STS.AMT) BUYAMT
                    FROM STSCHD STS, ODTYPE ODT, ODMAST OD
                    WHERE STS.DUETYPE = 'SM'  AND STS.DELTD <> 'Y' AND STS.ORGORDERID = OD.ORDERID AND OD.ACTYPE = ODT.ACTYPE
                    AND GETDUEDATE(STS.TXDATE,'B','000',ODT.MTRFDAY) > GETCURRDATE
                    GROUP BY STS.ACCTNO
                ) A
                 where A.acctno=cimast.acctno
            ),0
        );*/
    ---DungNH sua ngay 14/05/2015
    FOR REC IN (SELECT STS.ACCTNO ACCTNO, SUM(STS.AMT) BUYAMT
                  FROM STSCHD STS, ODTYPE ODT, ODMAST OD,sbsecurities SB
                 WHERE STS.DUETYPE = 'SM'
                   AND STS.DELTD <> 'Y'
                   AND STS.ORGORDERID = OD.ORDERID
                   AND STS.CODEID = SB.CODEID
                   AND OD.ACTYPE = ODT.ACTYPE
                   AND GETDUEDATE(STS.TXDATE, 'B', SB.TRADEPLACE, od.clearday) > to_date( V_STRCURRDATE,'DD/MM/YYYY')
                 GROUP BY STS.ACCTNO) LOOP
      UPDATE CIMAST SET INTBUYAMT = REC.BUYAMT WHERE ACCTNO = REC.ACCTNO;
    END LOOP;
    ---end DungNH

    -- Cap nhap tong so tien Quyen mua van duoc tinh lai vao truong INTCAAMT

    UPDATE CIMAST SET INTCAAMT = 0;

    /*update cimast set intcaamt =
    nvl(
            (    select intcaamt from
                (
                    --- So tien dc tinh khi bat dau lam 3384 va truoc khi lam 3387
                   SELECT cas.afacctno, sum(cas.aamt) intcaamt FROM CASCHD cas, camast ca WHERE ca.STATUS = 'M' AND ca.CATYPE = '014' and ca.camastid = cas.camastid
                    and tqtty =0
                    group by afacctno
                ) A
                 where A.afacctno=cimast.acctno
            ),0
        );*/
    ---DungNH sua ngay 14/05/2015
    FOR REC IN (SELECT CAS.AFACCTNO AFACCTNO, SUM(CAS.AAMT) INTCAAMT
                  FROM CASCHD CAS, CAMAST CA
                 WHERE CA.STATUS = 'M'
                   AND CA.CATYPE = '014'
                   AND CA.CAMASTID = CAS.CAMASTID
                   AND TQTTY = 0
                 GROUP BY AFACCTNO
                HAVING SUM(CAS.AAMT) > 0) LOOP
      UPDATE CIMAST
         SET INTCAAMT = REC.INTCAAMT
       WHERE ACCTNO = REC.AFACCTNO;
    END LOOP;
    ---end DungNH

 UPDATE CIMAST SET intmrnrate = 0 where intmrnrate<>0;

FOR REC IN (
select trfacctno , sum (LEAST (nml,nvl(buyamt,0))) nml  from
 (SELECT sum(nml) nml , ln.trfacctno,lns.rlsdate  FROM lnschd lns,lnmast ln, lntype lnt
    where lns.acctno = ln.acctno
    and ln.actype = lnt.actype
    and lns.nml>0 and lns.intnmlacr+lns.intdue=0 and reftype ='P'
    and lnt.prinfrq >= v_DAYINTMR and lnt.rate1 =0
    and duedate >=lns.acrdate
    group by ln.trfacctno,lns.rlsdate
    having sum(nml) >0)ln,
  (/*SELECT STS.ACCTNO ACCTNO, SUM(STS.AMT) BUYAMT , sts.txdate
                  FROM STSCHD STS, ODTYPE ODT, ODMAST OD, SBSECURITIES SB
                 WHERE STS.DUETYPE = 'SM'
                   AND STS.DELTD <> 'Y'
                   AND STS.ORGORDERID = OD.ORDERID
                   AND OD.ACTYPE = ODT.ACTYPE
                   AND OD.CODEID=SB.CODEID
                   AND LEAST( GETDUEDATE(STS.TXDATE, 'B', SB.TRADEPLACE, ODT.MTRFDAY),GETDUEDATE(STS.TXDATE, 'B', SB.TRADEPLACE, od.clearday)) >
                       GETCURRDATE
                   GROUP BY STS.ACCTNO, sts.txdate*/

        SELECT STS.AFACCTNO ACCTNO, SUM(STS.AMT) BUYAMT , sts.txdate
                  FROM STSCHD STS
                 WHERE STS.DUETYPE = 'RS'
                   AND STS.DELTD <> 'Y'
                   AND STS.cleardate > to_date( V_STRCURRDATE,'DD/MM/YYYY')
                     GROUP BY STS.AFACCTNO, sts.txdate
                   ) od
   where ln.trfacctno = od.acctno(+)
   and ln.rlsdate = od.txdate (+)
   group by trfacctno
     )
    loop
     UPDATE CIMAST
         SET intmrnrate = REC.nml
       WHERE ACCTNO = REC.trfacctno;

    end loop;


    -- End of HaiLT them

    -- VCBS chi dung bieu lai FIX
    -- Them INTBUYAMT vao cong thuc tinh lai
    --Tinh lai cong don cho cac truong hop tinh lai theo kieu tinh lai Fix
    INSERT INTO CIINTTRAN
      (AUTOID,
       ACCTNO,
       INTTYPE,
       FRDATE,
       TODATE,
       ICRULE,
       IRRATE,
       INTBAL,
       INTAMT,
       BALANCE,
       EMKAMT,
       INTBUYAMT,
       INTCAAMT,
       INTMRNRATE)
      SELECT SEQ_CIINTTRAN.NEXTVAL,
             MST.ACCTNO,
             V_INTTYPE,
             V_FRDATE,
             V_TODATE,
             'F',
             ICDEF.ICRATE,
             MST.BALANCE + MST.EMKAMT +  GREATEST( 0,MST.INTBUYAMT-mst.INTMRNRATE) + MST.INTCAAMT,
             ROUND((MST.BALANCE + MST.EMKAMT + GREATEST( 0,MST.INTBUYAMT-mst.INTMRNRATE) + MST.INTCAAMT) *
                   ICDEF.ICRATE / 100 / 360 * L_CALCDAYS,
                   4) INTAMT,MST.BALANCE,MST.EMKAMT,MST.INTBUYAMT,MST.INTCAAMT,mst.INTMRNRATE
       FROM CIMAST MST, CITYPE TYP, ICCFTYPEDEF ICDEF, CFMAST CF
       WHERE MST.BALANCE + MST.EMKAMT + MST.INTBUYAMT + MST.INTCAAMT > 0
         AND MST.ACTYPE = TYP.ACTYPE
         AND MST.STATUS <> 'C'
         AND MST.STATUS <> 'N'
         AND TYP.ACTYPE = ICDEF.ACTYPE
         AND ICDEF.MODCODE = 'CI'
         AND EVENTCODE = 'CRINTACR'
         AND ICDEF.RULETYPE = 'F'
         AND ICDEF.DELTD = 'N'
         AND MST.COREBANK <> 'Y'
         AND MST.CUSTID = CF.CUSTID
         AND CF.CUSTATCOM = 'Y';

    /* update cimast set CRINTDT=to_date(v_strCURRDATE,systemnums.c_date_format),--to_date(v_todate,'DD/MM/YYYY'),
    crintacr=crintacr
    + nvl(
    (
        select intamt from
            (
            select round((mst.balance+ mst.emkamt+mst.intbuyamt+mst.intcaamt)*icdef.icrate/100/360*l_CalcDays,4) intamt, mst.acctno
            from cimast mst,citype typ,iccftypedef icdef,
                 CFMAST CF
            where mst.balance+ mst.emkamt+mst.intbuyamt+mst.intcaamt >0
                and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
                and typ.actype=icdef.actype
                and icdef.modcode ='CI' and eventcode='CRINTACR'
                and icdef.ruletype='F' and icdef.deltd='N'
                AND CF.CUSTID=MST.CUSTID AND CF.CUSTATCOM='Y'
            ) A
        where A.acctno=cimast.acctno
    ),0);*/

    ---DungNH sua ngay 14/05/2015
    FOR REC IN (SELECT ROUND((MST.BALANCE + MST.EMKAMT + MST.INTBUYAMT +
                             MST.INTCAAMT) * ICDEF.ICRATE / 100 / 360 *
                             L_CALCDAYS,
                             4) INTAMT,
                       MST.ACCTNO ACCTNO
                  FROM CIMAST MST, CITYPE TYP, ICCFTYPEDEF ICDEF, CFMAST CF
                 WHERE MST.BALANCE + MST.EMKAMT + MST.INTBUYAMT +
                       MST.INTCAAMT > 0
                   AND MST.ACTYPE = TYP.ACTYPE
                   AND MST.STATUS <> 'C'
                   AND MST.STATUS <> 'N'
                   AND TYP.ACTYPE = ICDEF.ACTYPE
                   AND ICDEF.MODCODE = 'CI'
                   AND EVENTCODE = 'CRINTACR'
                   AND ICDEF.RULETYPE = 'F'
                   AND ICDEF.DELTD = 'N'
                   AND CF.CUSTID = MST.CUSTID
                   AND CF.CUSTATCOM = 'Y') LOOP
      UPDATE CIMAST
         SET CRINTDT  = TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT), --to_date(v_todate,'DD/MM/YYYY'),
             CRINTACR = CRINTACR + REC.INTAMT
       WHERE ACCTNO = REC.ACCTNO;
    END LOOP;
    ---end DungNH

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ICCFCreditInterestAccure2');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX,
                 'got error on release pr_ICCFCreditInterestAccure2');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ICCFCreditInterestAccure2');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ICCFCREDITINTERESTACCURE2;

  /*---------------------------------pr_SECostPriceCalculate------------------------------------------------
  PROCEDURE pr_SECostPriceCalculate(p_err_code  OUT varchar2)
      --ANHVT Coded for porfolio
    IS
        v_currdate VARCHAR2(10);
        v_nextdate VARCHAR2(10);
        v_days NUMBER(20,0);
    BEGIN
      plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
      v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
      v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
      v_days:=TO_DATE(v_nextdate, systemnums.c_date_format)-TO_DATE(v_currdate, systemnums.c_date_format);
      plog.debug(pkgctx,'gianh1');
      -- Ghi nhan cac giao dich quyen
      begin
      for i in (
          select a.afacctno || b.codeid acctno, cf.custodycd,cf.custatcom,
          sum(DECODE(CATYPE, '014', qtty, 0)) CPQUYENVE,
          sum(DECODE(CATYPE, '014', qtty*exprice, 0)) GTQUYENVE,
          sum(DECODE(CATYPE, '021', qtty, 0)) CPTHUONG,
          sum(DECODE(CATYPE, '021', amt, 0)) CPLECPTHUONG,
          sum(decode(catype, '010', amt, 0)) COTUCTIEN,
          sum(decode(catype, '011', qtty, 0)) COTUCCP,
          sum(decode(catype, '011', amt, 0)) CPLECOTUCCP,
          sum(DECODE(CATYPE, '012', qtty, 0)) CPTACH,
          sum(DECODE(CATYPE, '012', amt, 0)) CPLECPTACH,
          sum(DECODE(CATYPE, '013', aqtty, 0)) CPGOP,
          sum(DECODE(CATYPE, '013', amt, 0)) CPLECPGOP
          from caschd a, camast b, cfmast cf, afmast af,
              (select distinct b.cvalue camastid, a.msgacct from tllog a, tllogfld b where tltxcd = '3380' and a.txnum = b.txnum and a.deltd = 'N'
              and b.fldcd = '02') c
          where a.camastid = b.camastid and cf.custid = af.custid and af.acctno = a.afacctno
          -- Chua lam tach/gop CP
          and b.catype in ('021','010','011','012','013','014')
          and b.camastid = c.camastid
          and a.deltd = 'N'
          and a.afacctno = c.msgacct
          and a.status in ('S','I')

          group by a.afacctno || b.codeid, cf.custodycd,cf.custatcom
      )
      loop
          if  NOT (i.custatcom='Y' AND substr(i.custodycd,4,1)='P') then
              update semast set DCRAMT = DCRAMT + i.GTQUYENVE,
                                DCRQTTY = DCRQTTY+ i.CPQUYENVE + i.CPTHUONG + i.COTUCCP + i.CPTACH,
                                DDROUTQTTY = DDROUTQTTY + i.CPGOP,
                                DDROUTAMT = DDROUTAMT + i.COTUCTIEN + i.CPLECOTUCCP + i.CPLECPTHUONG + i.CPLECPTACH + i.CPLECPGOP
              where acctno = i.ACCTNO;
          end if;

          begin
              update secostpricedtl set
                      PROVRIGHTQTTY = PROVRIGHTQTTY + i.CPQUYENVE,
                      PROVRIGHTAMT= PROVRIGHTAMT + i.GTQUYENVE,
                      PROVDIVIDEND = PROVDIVIDEND + i.COTUCTIEN,
                      PROVBONUSQTTY = PROVBONUSQTTY + i.CPTHUONG,
                      PROVBONUSAMT = PROVBONUSAMT + 0,
                      PROVDIVIDENDSHARES = PROVDIVIDENDSHARES + i.COTUCCP
             where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                      and acctno = i.acctno;
             if SQL%ROWCOUNT = 0 then
                  insert into secostpricedtl(autoid, acctno, txdate, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                  select
                  seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), nvl(PROVRIGHTQTTY, 0) + i.CPQUYENVE,
                      nvl(PROVRIGHTAMT, 0) + i.GTQUYENVE,
                      nvl(PROVDIVIDEND, 0) + i.COTUCTIEN,
                      nvl(PROVBONUSQTTY, 0) + i.CPTHUONG,
                      nvl(PROVBONUSAMT, 0) + 0,
                      nvl(PROVDIVIDENDSHARES, 0) + i.COTUCCP
                  from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                  if SQL%ROWCOUNT = 0 then
                      insert into secostpricedtl(autoid, acctno, txdate, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                      values
                      (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.CPQUYENVE, i.GTQUYENVE, i.COTUCTIEN, i.CPTHUONG, 0, i.COTUCCP);
                  end if;
             end if;
          end;

      end loop;
      end;
      plog.debug(pkgctx,'gianh2');
      -- Ghi nhan cac giao dich phan bo quyen
      begin
      for i in (
          select a.afacctno || b.codeid acctno, cf.custodycd,cf.custatcom,
          sum(DECODE(CATYPE, '014', qtty, 0)) CPQUYENVE,
          sum(DECODE(CATYPE, '014', qtty*exprice, 0)) GTQUYENVE,
          sum(DECODE(CATYPE, '021', qtty, 0)) CPTHUONG,
          sum(DECODE(CATYPE, '021', amt, 0)) CPLECPTHUONG,
          sum(decode(catype, '010', amt, 0)) COTUCTIEN,
          sum(decode(catype, '011', qtty, 0)) COTUCCP,
          sum(decode(catype, '011', amt, 0)) CPLECOTUCCP,
          sum(DECODE(CATYPE, '012', qtty, 0)) CPTACH,
          sum(DECODE(CATYPE, '012', amt, 0)) CPLECPTACH,
          sum(DECODE(CATYPE, '013', aqtty, 0)) CPGOP,
          sum(DECODE(CATYPE, '013', amt, 0)) CPLECPGOP
          from caschd a, camast b, cfmast cf, afmast af,
              (select distinct b.cvalue camastid, a.msgacct from tllog a, tllogfld b where tltxcd in ('3350','3351') and a.txnum = b.txnum and a.deltd = 'N'
              and b.fldcd = '02') c
          where a.camastid = b.camastid and cf.custid = af.custid and af.acctno = a.afacctno
          -- Chua lam tach/gop CP
          and b.catype in ('021','010','011','012','013','014')
          and b.camastid = c.camastid
          and a.afacctno = c.msgacct
          and a.deltd = 'N'
          group by a.afacctno || b.codeid, cf.custodycd,cf.custatcom
      )
      loop
          begin
              if substr(i.custodycd,4,1) ='P' AND i.custatcom='Y' then
                  update semast set DCRAMT = DCRAMT + i.GTQUYENVE,
                      DCRQTTY = DCRQTTY+ i.CPQUYENVE + i.CPTHUONG + i.COTUCCP,
                      DDROUTQTTY = DDROUTQTTY
                  where acctno = i.ACCTNO;
              end if;

              update secostpricedtl set
                      RIGHTQTTY = RIGHTQTTY + i.CPQUYENVE,
                      RIGHTAMT= RIGHTAMT + i.GTQUYENVE,
                      DIVIDEND = DIVIDEND + i.COTUCTIEN,
                      BONUSQTTY = BONUSQTTY + i.CPTHUONG,
                      BONUSAMT = BONUSAMT + 0,
                      DIVIDENDSHARES = DIVIDENDSHARES + i.COTUCCP,
                      PROVRIGHTQTTY = PROVRIGHTQTTY - i.CPQUYENVE,
                      PROVRIGHTAMT= PROVRIGHTAMT - i.GTQUYENVE,
                      PROVDIVIDEND = PROVDIVIDEND - i.COTUCTIEN,
                      PROVBONUSQTTY = PROVBONUSQTTY - i.CPTHUONG,
                      PROVBONUSAMT = PROVBONUSAMT - 0,
                      PROVDIVIDENDSHARES = PROVDIVIDENDSHARES - i.COTUCCP
             where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                      and acctno = i.acctno;
             if SQL%ROWCOUNT = 0 then
                  insert into secostpricedtl(autoid, acctno, txdate, rightqtty, rightamt, dividend, bonusqtty, bonusamt, dividendshares,
                      provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                  select
                  seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                      i.CPQUYENVE, i.GTQUYENVE, i.COTUCTIEN, i.CPTHUONG, 0, i.COTUCCP,
                      nvl(PROVRIGHTQTTY, 0) - i.CPQUYENVE ,
                      nvl(PROVRIGHTAMT, 0) - i.GTQUYENVE,
                      nvl(PROVDIVIDEND, 0) - i.COTUCTIEN,
                      nvl(PROVBONUSQTTY, 0) - i.CPTHUONG,
                      nvl(PROVBONUSAMT, 0),
                      nvl(PROVDIVIDENDSHARES, 0) - i.COTUCCP
                  from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                  if SQL%ROWCOUNT = 0 then
                      insert into secostpricedtl(autoid, acctno, txdate, rightqtty, rightamt, dividend, bonusqtty, bonusamt, dividendshares)
                      values
                      (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.CPQUYENVE, i.GTQUYENVE, i.COTUCTIEN, i.CPTHUONG, 0, i.COTUCCP);
                  end if;
             end if;
          end;
      end loop;
      end;
      plog.debug(pkgctx,'gianh3');
      -- Ghi nhan cac gd mua trong ngay
      begin
      for i in (
          SELECT CF.CUSTODYCD,CF.CUSTATCOM, AFACCTNO||CODEID ACCTNO, SUM(EXECQTTY) EXECQTTY, SUM(EXECAMT) EXECAMT, SUM(FEEACR) RECEIVING_VALUE FROM ODMAST, AFMAST AF, CFMAST CF
          WHERE EXECTYPE = 'NB' AND EXECQTTY <> 0
              AND TXDATE = to_date(v_currdate,'DD/MM/YYYY') AND AF.CUSTID = CF.CUSTID AND AFACCTNO = AF.ACCTNO
          GROUP BY CF.CUSTODYCD, AFACCTNO||CODEID, cf.custatcom
      )
      loop
          if not(substr(i.custodycd,4,1)='P' AND i.custatcom='Y' ) then
              update semast set DCRAMT = DCRAMT + i.EXECAMT + i.RECEIVING_VALUE, DCRQTTY = DCRQTTY + i.EXECQTTY where acctno = i.ACCTNO;
          end if;

          update secostpricedtl set
                  BUYRCVQTTY = i.EXECQTTY
             where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                      and acctno = i.acctno;
             if SQL%ROWCOUNT = 0 then
                  insert into secostpricedtl(autoid, acctno, txdate, BUYRCVQTTY, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                  select
                  seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                      i.EXECQTTY,
                      nvl(PROVRIGHTQTTY, 0),
                      nvl(PROVRIGHTAMT, 0),
                      nvl(PROVDIVIDEND, 0),
                      nvl(PROVBONUSQTTY, 0),
                      nvl(PROVBONUSAMT, 0),
                      nvl(PROVDIVIDENDSHARES, 0)
                  from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                  if SQL%ROWCOUNT = 0 then
                      insert into secostpricedtl(autoid, acctno, txdate, BUYRCVQTTY)
                      values
                      (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.EXECQTTY);
                  end if;
             end if;
      end loop;
      end;
      plog.debug(pkgctx,'gianh4');
      -- Ghi nhan cac gd nhan CK ve TK(T+3)
      begin
      for i in (
          SELECT CF.CUSTODYCD,cf.custatcom ,STS.AFACCTNO||STS.CODEID ACCTNO, SUM(OD.EXECQTTY) EXECQTTY, SUM(OD.EXECAMT) EXECAMT, SUM(OD.FEEACR) RECEIVING_VALUE
          FROM ODMAST OD, STSCHD STS, AFMAST AF, CFMAST CF
          WHERE OD.EXECTYPE = 'NB' AND OD.EXECQTTY <> 0 AND AF.CUSTID = CF.CUSTID AND AF.ACCTNO = OD.AFACCTNO
              AND STS.CLEARDATE = to_date(v_currdate,'DD/MM/YYYY')
              AND OD.ORDERID = STS.ORGORDERID
              AND STS.DUETYPE = 'RS'
          GROUP BY CF.CUSTODYCD, STS.AFACCTNO||STS.CODEID,cf.custatcom)
      loop
          if (substr(i.custodycd,4,1)='P' AND i.custatcom='Y' )  then
              update semast set DCRAMT = DCRAMT + i.EXECAMT + i.RECEIVING_VALUE, DCRQTTY = DCRQTTY + i.EXECQTTY where acctno = i.ACCTNO;
          end if;

          update secostpricedtl set
                      BUYQTTY = i.EXECQTTY,
                      BUYAMT = i.EXECAMT,
                      BUYFEE = i.RECEIVING_VALUE
             where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                      and acctno = i.acctno;
             if SQL%ROWCOUNT = 0 then
                  insert into secostpricedtl(autoid, acctno, txdate, BUYQTTY, BUYAMT, BUYFEE, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                  select
                  seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                      i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE,
                      nvl(PROVRIGHTQTTY, 0),
                      nvl(PROVRIGHTAMT, 0),
                      nvl(PROVDIVIDEND, 0),
                      nvl(PROVBONUSQTTY, 0),
                      nvl(PROVBONUSAMT, 0),
                      nvl(PROVDIVIDENDSHARES, 0)
                  from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                  if SQL%ROWCOUNT = 0 then
                      insert into secostpricedtl(autoid, acctno, txdate, BUYQTTY, BUYAMT, BUYFEE)
                      values
                      (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE);
                  end if;
             end if;
      end loop;
      end;

      plog.debug(pkgctx,'gianh5');
      -- Ghi nhan cac gd ban
      begin
      for i in (
          SELECT AFACCTNO||CODEID ACCTNO, SUM(EXECQTTY) EXECQTTY, SUM(EXECAMT) EXECAMT, SUM(FEEACR) RECEIVING_VALUE FROM ODMAST
          WHERE EXECTYPE IN ('NS','MS') AND EXECQTTY <> 0
              AND TXDATE = to_date(v_currdate,'DD/MM/YYYY')
          GROUP BY AFACCTNO||CODEID
      )
      loop
          update secostpricedtl set
                      SELLQTTY = i.EXECQTTY,
                      SELLAMT = i.EXECAMT,
                      SELLFEE = i.RECEIVING_VALUE
             where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                      and acctno = i.acctno;

             if SQL%ROWCOUNT = 0 then
                  insert into secostpricedtl(autoid, acctno, txdate, SELLQTTY, SELLAMT, SELLFEE, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                  select
                  seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                      i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE,
                      nvl(PROVRIGHTQTTY, 0),
                      nvl(PROVRIGHTAMT, 0),
                      nvl(PROVDIVIDEND, 0),
                      nvl(PROVBONUSQTTY, 0),
                      nvl(PROVBONUSAMT, 0),
                      nvl(PROVDIVIDENDSHARES, 0)
                  from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                  if SQL%ROWCOUNT = 0 then
                      insert into secostpricedtl(autoid, acctno, txdate, SELLQTTY, SELLAMT, SELLFEE)
                      values
                      (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE);
                  end if;
             end if;
      end loop;
      end;
      plog.debug(pkgctx,'gianh6');
      --Tinh lai gia von va so du luu ky cua tai khoan SE
      --Ghi nhan gia von thay doi
      INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, DCRAMT, DCRQTTY, DELTD, PREVQTTY, DDROUTAMT, DDROUTQTTY, TRADE, MORTAGE)
             SELECT SEQ_SECOSTPRICE.NEXTVAL, ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
             ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4), ROUND(COSTPRICE,4), DCRAMT, DCRQTTY, 'N', PREVQTTY, DDROUTAMT, DDROUTQTTY, TRADE, MORTAGE
             FROM SEMAST WHERE ((DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND STATUS<>'C')
                      OR EXISTS (SELECT 1 FROM SECOSTPRICEDTL WHERE ACCTNO = SEMAST.ACCTNO AND TXDATE = TO_DATE(v_currdate, systemnums.c_date_format)))
                      AND DCRQTTY+PREVQTTY-DDROUTQTTY>0;
          -- Cap nhat khi co trang thai moi
      UPDATE SEMAST SET ACCUMULATEPNL= ACCUMULATEPNL + TOTALSELLAMT-TOTALBUYAMT - DEALINTPAID, TOTALSELLQTTY = 0, TOTALBUYAMT = 0, TOTALSELLAMT = 0, DEALINTPAID = 0
                 WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C' AND COSTPRICE=0;
      --Cap nhat thong tin gia von
      UPDATE SEMAST SET COSTPRICE=ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4),
             COSTDT=TO_DATE(v_nextdate, systemnums.c_date_format)
             WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C';

      --Cap nhat so du lu ky cong don
      UPDATE SEMAST SET TBALDEPO=TBALDEPO+(TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED) * v_days
             WHERE STATUS<>'C' AND TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED>0;
      --Cap nhat lai ngay
      UPDATE SEMAST SET
             PREVQTTY=DCRQTTY+PREVQTTY-DDROUTQTTY,
             DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
             TBALDT=TO_DATE(v_nextdate, systemnums.c_date_format),
             COSTDT=TO_DATE(v_nextdate, systemnums.c_date_format),
             LASTDATE=TO_DATE(v_nextdate, systemnums.c_date_format) WHERE STATUS<>'C';
       --Cap nhat lai thong tin ban chung khoan
      begin
      for i in (select sts.acctno, sum(amt-feeacr) amt, sum(qtty) qtty from stschd sts, odmast od where duetype ='SS' and sts.orgorderid = od.orderid and sts.txdate = od.txdate
                  and sts.deltd <> 'Y' and sts.txdate =TO_DATE(v_currdate, systemnums.c_date_format)
               group by sts.acctno)
      loop
          update semast set totalsellamt = totalsellamt + i.amt, totalsellqtty = totalsellqtty + i.qtty, totalbuyamt= totalbuyamt + costprice * i.qtty where acctno = i.acctno;
      end loop;
      end;
      plog.debug(pkgctx,'gianh7');
      for i in (
              select c.afacctno || c.codeid seacctno, sum(nvalue) nvalue from tllog a, tllogfld b, dfmast c
              where a.txnum = b.txnum
                  and b.fldcd in ('72','74','77','80') and a.tltxcd = '2643'
                  and a.msgacct = c.acctno
                  and a.deltd = 'N'
              group by c.afacctno || c.codeid
              having sum(nvalue) <> 0)
      loop
          update semast set dealintpaid = dealintpaid + i.nvalue where acctno = i.seacctno;
      end loop;
      commit;
      plog.debug(pkgctx,'gianh8');
      p_err_code:=0;
      plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
    EXCEPTION
    WHEN OTHERS
     THEN
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, SQLERRM);
        plog.setendsection (pkgctx, 'pr_SECostPriceCalculate');
        RAISE errnums.E_SYSTEM_ERROR;
    END pr_SECostPriceCalculate;*/

  --GianhVG comment lai de chay cach tinh gia von theo kieu cua VNDS
  ---------------------------------pr_SECostPriceCalculate------------------------------------------------
/*
  PROCEDURE PR_SECOSTPRICECALCULATE(P_ERR_CODE OUT VARCHAR2) IS
    V_CURRDATE VARCHAR2(10);
    V_NEXTDATE VARCHAR2(10);
    V_PREVDATE VARCHAR2(10);
    V_DAYS     NUMBER(20, 0);

    V_COSTPRICE    NUMBER(20, 7);
    V_DCRAMT       NUMBER(20);
    V_DDROUTAMT    NUMBER(20);
    V_DCRQTTY      NUMBER(20);
    V_DDROUTQTTY   NUMBER(20);
    V_DDROUTAMT    NUMBER(20);
    V_PREVQTTY     NUMBER(20);
    V_PRECOSTPRICE NUMBER(20, 7);

  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_SECostPriceCalculate');
    V_PREVDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'PREVDATE');
    V_NEXTDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'NEXTDATE');
    V_CURRDATE := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    V_DAYS     := TO_DATE(V_NEXTDATE, SYSTEMNUMS.C_DATE_FORMAT) -
                  TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);

    --Tinh gia von cua nhung su kien den ngay giao dich khong huong quyen.
    SEC_CAPROCESS(V_PREVDATE);

    --Tinh lai gia von va so du luu ky cua tai khoan SE
    --Ghi nhan gia von thay doi
    --    INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, DCRAMT, DCRQTTY, DELTD)
    --           SELECT SEQ_SECOSTPRICE.NEXTVAL, ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
    --           ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4), ROUND(COSTPRICE,4), DCRAMT, DCRQTTY, 'N'
    --           FROM SEMAST WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C';
    --Cap nhat thong tin gia von

    FOR REC IN (
                SELECT MST.*
                  FROM (SELECT MST.*, SB.CODEID REFCODEID
                           FROM SEMAST MST, SBSECURITIES SB
                          WHERE MST.CODEID = SB.REFCODEID(+)) MST
                  LEFT JOIN SEMAST WFT
                    ON MST.AFACCTNO = WFT.AFACCTNO
                   AND MST.REFCODEID = WFT.CODEID
                 WHERE NVL(MST.DCRQTTY, 0) + NVL(MST.DDROUTQTTY, 0) +
                       NVL(WFT.DCRQTTY, 0) + NVL(WFT.DDROUTQTTY, 0) <> 0
                   AND MST.STATUS <> 'C') LOOP
      SELECT
       MAX(NVL(MST.COSTPRICE, 0)),
       MAX(NVL(MST.PREVQTTY, 0)),
       MAX(NVL(MST.DDROUTQTTY, 0) + NVL(WFT.DDROUTQTTY, 0)),
       MAX(NVL(MST.DCRAMT, 0) + NVL(WFT.DCRAMT, 0)),
       MAX(NVL(MST.DCRQTTY, 0) + NVL(WFT.DCRQTTY, 0))
        INTO V_COSTPRICE, V_PREVQTTY, V_DDROUTQTTY, V_DCRAMT, V_DCRQTTY
        FROM (SELECT MST.ACCTNO,
                     MST.CODEID,
                     SB.CODEID REFCODEID,
                     MST.AFACCTNO,
                     MST.PREVQTTY,
                     MST.COSTPRICE,
                     MST.DCRAMT,
                     MST.DDROUTAMT,
                     MST.DCRQTTY,
                     MST.DDROUTQTTY
                FROM SEMAST MST, SBSECURITIES SB
               WHERE MST.CODEID = SB.REFCODEID(+)
                 AND MST.ACCTNO = REC.ACCTNO
                 AND MST.CODEID = REC.CODEID) MST
        LEFT JOIN SEMAST WFT
          ON MST.AFACCTNO = WFT.AFACCTNO
         AND MST.REFCODEID = WFT.CODEID
       WHERE NVL(MST.DCRQTTY, 0) + NVL(MST.PREVQTTY, 0) -
             NVL(MST.DDROUTQTTY, 0) + NVL(WFT.DCRQTTY, 0) +
             NVL(WFT.PREVQTTY, 0) - NVL(WFT.DDROUTQTTY, 0) <> 0
         AND MST.ACCTNO = REC.ACCTNO;

      V_COSTPRICE := NVL(V_COSTPRICE, 0);
      --Ghi nhan gia von thay doi
      IF (NVL(V_PREVQTTY, 0) - NVL(V_DDROUTQTTY, 0) + NVL(V_DCRQTTY, 0) <> 0) THEN
        V_PRECOSTPRICE := ((NVL(V_PREVQTTY, 0) - NVL(V_DDROUTQTTY, 0)) *
                          V_COSTPRICE + NVL(V_DCRAMT, 0)) /
                          (NVL(V_PREVQTTY, 0) - NVL(V_DDROUTQTTY, 0) +
                          NVL(V_DCRQTTY, 0));
      ELSE
        V_PRECOSTPRICE := 0;
      END IF;
      DELETE FROM SECOSTPRICE
       WHERE TXDATE = TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT)
         AND ACCTNO = REC.ACCTNO;
      INSERT INTO SECOSTPRICE
        (AUTOID,
         ACCTNO,
         TXDATE,
         COSTPRICE,
         PREVCOSTPRICE,
         DCRAMT,
         DCRQTTY,
         DELTD,
         PREVQTTY,
         DDROUTQTTY)
      VALUES
        (SEQ_SECOSTPRICE.NEXTVAL,
         REC.ACCTNO,
         TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT),
         V_PRECOSTPRICE,
         REC.COSTPRICE,
         V_DCRAMT,
         V_DCRQTTY,
         'N',
         V_PREVQTTY,
         V_DDROUTQTTY);
      UPDATE SEMAST SE
         SET SE.COSTPRICE = V_PRECOSTPRICE,
             COSTDT       = TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT)
       WHERE SE.ACCTNO = REC.ACCTNO;
    END LOOP;

    -- 14/03/2013, TheNN doi v_nextdate --> v_currdate
    UPDATE SEMAST
       SET DCRAMT     = 0,
           DCRQTTY    = 0,
           DDROUTQTTY = 0,
           DDROUTAMT  = 0,
           PREVQTTY   = TRADE + MORTAGE + MARGIN + SECURED + BLOCKED +
                        WITHDRAW + RECEIVING,

           COSTDT   = TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT),
           LASTDATE = TO_DATE(V_PREVDATE, SYSTEMNUMS.C_DATE_FORMAT)
     WHERE STATUS <> 'C';

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SECostPriceCalculate');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SECostPriceCalculate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SECOSTPRICECALCULATE;
*/

/* ****************************************pr_SECostPriceCalculate_New ***********************************************
  By LuongT to calculate cost price by new rules and support backdate transactions
  Date of modification: 21-Nov-2013
  ********************************************************************************************************************/

PROCEDURE pr_SECostPriceCalculate(p_err_code  OUT varchar2)
  IS
      v_currdate VARCHAR2(10);
      v_nextdate VARCHAR2(10);
      V_PREVDATE VARCHAR2(10);
      v_days NUMBER(20,0);
      v_costprice number(20,4);
  BEGIN
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
    V_PREVDATE:=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_days:=TO_DATE(v_nextdate, systemnums.c_date_format)-TO_DATE(v_currdate, systemnums.c_date_format);

    --Tinh gia von cua nhung su kien den ngay giao dich khong huong quyen.
    --SEC_caprocess(V_PREVDATE); --SONLT 20150331 Ko tinh lai gia von tai ngay nay

    --Tinh lai gia von va so du luu ky cua tai khoan SE
    --Ghi nhan gia von thay doi
--  PLOG.error(PKGCTX, 'locpt da vao tinh gia von '|| SEQ_SECOSTPRICE.currval);
    INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE,
                                DCRAMT, DCRQTTY, DDROUTAMT, DDROUTQTTY, DELTD, PREVQTTY,TRADE)
        SELECT SEQ_SECOSTPRICE.NEXTVAL, SE.ACCTNO, TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT) TXDATE,

               NVL(BUF.AVGCOSTPRICE,0) COSTPRICE,
           ROUND(SE.COSTPRICE,4) PREVCOSTPRICE,(SE.DCRAMT+nvl(feeacr,0)) DCRAMT, SE.DCRQTTY, SE.DDROUTAMT, SE.DDROUTQTTY,'N',
            --04/05/2018 DieuNDA: Sua PREVQTTY bang SL CK thuc co tren SEMAST
            -- (PREVQTTY+DCRQTTY-DDROUTQTTY) PREVQTTY,
            SE.TRADE+SE.MORTAGE+SE.MARGIN+SE.SECURED+SE.BLOCKED+SE.WITHDRAW+SE.BLOCKWITHDRAW+SE.EMKQTTY + NVL(RCV.STSRECEIVINGAMT,0) PREVQTTY,
            --End 04/05/2018 DieuNDA: Sua PREVQTTY bang SL CK thuc co tren SEMAST
            SE.TRADE
        FROM VW_SEMAST_CUSTODYCD SE,
            (
            SELECT ACCTNO, NVL(SUM(QTTY),0) STSRECEIVINGAMT
            FROM STSCHD S
            WHERE S.DUETYPE = 'RS'
            AND S.STATUS <> 'C' AND DELTD <> 'Y'
            GROUP BY ACCTNO
            ) RCV,
            (
                select seacctno, sum(feeacr) feeacr, sum(TAXSELLAMT)TAXSELLAMT
                from odmast
                group by seacctno
            )OD,
            (
             SELECT SE.AFACCTNO||SE.CODEID ACCTNO, max(se.costprice) secostprice,
                  CASE WHEN MAX(nvl(SE.PREVQTTY,0))+SUM(NVL(SEC.INQTTY,0)-NVL(SEC.OUTQTTY,0)-NVL(SEC.ODOUTQTTY,0)) <= 0 THEN 0 ELSE
                  ROUND(
                      (MAX(nvl(SE.PREVQTTY,0)*SE.COSTPRICE)
                       +SUM((NVL(SEC.INAMT,0))
                            - (NVL(SEC.ODOUTAMT,0))
                            -(NVL(SEC.OUTAMT,0))
                          +(CASE WHEN OD.EXECTYPE LIKE '%S' THEN 0 ELSE NVL(OD.FEEACR,0)END)
                        )-nvl(sum(AMT),0)
                       )/(MAX(nvl(SE.PREVQTTY,0))+SUM(NVL(SEC.INQTTY,0)-NVL(SEC.OUTQTTY,0)-NVL(SEC.ODOUTQTTY,0))),0
                       )
                  END
                  AVGCOSTPRICE
              FROM (SELECT ACCTNO, CODEID, ORDERID,
                           SUM(CASE WHEN PTYPE ='I' THEN QTTY ELSE 0 END) INQTTY,
                           SUM(CASE WHEN PTYPE ='O' AND ORDERID IS NOT NULL THEN QTTY ELSE 0 END) ODOUTQTTY,
                           SUM(CASE WHEN PTYPE ='O' AND ORDERID IS NULL THEN QTTY ELSE 0 END) OUTQTTY,
                           SUM(CASE WHEN PTYPE ='I' THEN QTTY*COSTPRICE ELSE 0 END) INAMT,
                           SUM(CASE WHEN PTYPE ='O' AND ORDERID IS NOT NULL THEN QTTY*RTCOSTPRICE ELSE 0 END) ODOUTAMT,
                           SUM(CASE WHEN PTYPE ='O' AND ORDERID IS NULL THEN QTTY*COSTPRICE ELSE 0 END) OUTAMT,
                           SUM(AMT) AMT
                    FROM SECMAST
                    WHERE TXDATE = V_PREVDATE
                          AND DELTD <> 'Y'
                    GROUP BY ACCTNO, CODEID, ORDERID
                    )SEC, ODMAST OD, ODTYPE OT, VW_SEMAST_CUSTODYCD SE
              WHERE SEC.ORDERID = OD.ORDERID(+)
                  AND OD.ACTYPE = OT.ACTYPE(+)
                  AND SE.AFACCTNO = SEC.ACCTNO(+)
                  AND SE.CODEID = SEC.CODEID(+)
              GROUP BY SE.AFACCTNO, SE.CODEID, SE.CUSTODYCD
              --having SUM(nvl(SEC.INQTTY,0)-nvl(SEC.OUTQTTY,0)-nvl(SEC.ODOUTQTTY,0)  +SE.PREVQTTY) > 0
            ) BUF --SONLT Tinh them phi giao dich cho gia von.
        WHERE SE.ACCTNO = RCV.ACCTNO(+)
          and SE.ACCTNO = OD.seacctno(+)
          and SE.ACCTNO = BUF.acctno(+)
         -- AND nvl(SE.PREVQTTY,0) + SE.DCRAMT+SE.DDROUTAMT+SE.DCRQTTY+SE.DDROUTQTTY>0
          AND SE.DCRQTTY+nvl(SE.PREVQTTY,0)-SE.DDROUTQTTY>0
          AND SE.STATUS<>'C';


        PLOG.error(PKGCTX, 'locpt insert secostprice'|| SEQ_SECOSTPRICE.currval);

        --CAP NHAT THONG TIN GIA VON
        UPDATE SEMAST SE
        SET COSTPRICE = (SELECT nvl(COSTPRICE,0) FROM SECOSTPRICE SC WHERE SC.ACCTNO = SE.ACCTNO AND TXDATE = TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT)),
               COSTDT=TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
        WHERE  PREVQTTY+DCRQTTY-DDROUTQTTY>0
              AND STATUS<>'C';


    -- 14/03/2013, THENN DOI V_NEXTDATE --> V_CURRDATE
    --04/05/2018 DieuNDA: Sua PREVQTTY bang SL CK thuc co tren SEMAST
    /*
    UPDATE SEMAST SET
           PREVQTTY= PREVQTTY+DCRQTTY-DDROUTQTTY,
           DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
           COSTDT=TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
           LASTDATE=TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT) WHERE STATUS<>'C';

    */
    UPDATE SEMAST SET DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
           PREVQTTY= TRADE+MORTAGE+MARGIN+SECURED+BLOCKED+WITHDRAW +BLOCKWITHDRAW+EMKQTTY + (SELECT NVL(SUM(QTTY),0)
                                                                        FROM STSCHD S
                                                                        WHERE S.DUETYPE = 'RS'
                                                                        AND S.STATUS <> 'C' AND DELTD <> 'Y'
                                                                        AND S.ACCTNO = SEMAST.ACCTNO),
           COSTDT=TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT),
           LASTDATE=TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT) WHERE STATUS<>'C';
    -- End 04/05/2018 DieuNDA: Sua PREVQTTY bang SL CK thuc co tren SEMAST
    /*UPDATE SEMAST SET DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
           PREVQTTY= TRADE+MORTAGE+MARGIN+SECURED+BLOCKED+WITHDRAW,

           COSTDT=TO_DATE(V_PREVDATE, systemnums.c_date_format),
           LASTDATE=TO_DATE(V_PREVDATE, systemnums.c_date_format) WHERE STATUS<>'C';*/

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_SECostPriceCalculate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SECostPriceCalculate;

PROCEDURE pr_SECostPriceCalculate_PROP(p_err_code  OUT varchar2)
  IS

    Cursor c_SETran  is
      SELECT cf.custid, cf.custodycd , max(tr.acctno) ACCTNO, max(NVL(SE.PREVQTTY,0)) PREVQTTY, max(NVL(SE.COSTPRICE,0)) COSTPRICE,
            SUM(CASE WHEN AP.FIELD = 'DCRQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRQTTY,
            SUM(CASE WHEN AP.FIELD = 'DCRAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRAMT,
            SUM(CASE WHEN AP.FIELD = 'DDROUTQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTQTTY,
            SUM(CASE WHEN AP.FIELD = 'DDROUTAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTAMT
        FROM  (SELECT substr( TR.ACCTNO,1,10) AFACCTNO, substr( TR.ACCTNO,1,10)|| NVL( SB.refcodeid,SB.CODEID)  acctno ,tr.txcd,tr.txdate,tr.bkdate,tr.namt,tltxcd ,deltd
                  FROM  SETRAN TR, sbsecurities SB WHERE substr( TR.ACCTNO,11) = sb.codeid
                       ) tr ,APPTX AP, SEMAST SE, afmast af, cfmast cf
        WHERE   TR.TXCD = AP.TXCD AND     AP.APPTYPE = 'SE'
        AND     AP.TXTYPE IN ('C','D')
        AND     AP.FIELD IN ('DCRQTTY', 'DCRAMT', 'DDROUTQTTY', 'DDROUTAMT')
        AND    nvl( TR.BKDATE, TR.TXDATE ) = TR.TXDATE AND     tr.acctno = se.acctno (+)
        AND      nvl( SE.STATUS,'A') <> 'C' AND     TR.DELTD <> 'Y'
        AND     TR.NAMT <> 0
        and tr.AFACCTNO = af.acctno and af.custid = cf.custid
        and substr(cf.custodycd,1,4) = systemnums.C_DEALINGCD
        AND    nvl( tr.tltxcd,'-') NOT IN ('2222')
        GROUP BY  cf.custid, cf.custodycd ;

    Cursor c_SEBackDate  is
      SELECT cf.custid, cf.custodycd , TR.BKDATE VALUEDATE, max(SE.AFACCTNO|| NVL( SB.refcodeid,SB.CODEID)) ACCTNO,
            SUM(CASE WHEN AP.FIELD = 'DCRQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRQTTY,
            SUM(CASE WHEN AP.FIELD = 'DCRAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRAMT,
            SUM(CASE WHEN AP.FIELD = 'DDROUTQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTQTTY,
            SUM(CASE WHEN AP.FIELD = 'DDROUTAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTAMT
        FROM    SETRAN TR, APPTX AP, SEMAST SE, sbsecurities SB, afmast af, cfmast cf
        WHERE   TR.TXCD = AP.TXCD
        AND     AP.APPTYPE = 'SE'
        AND     AP.TXTYPE IN ('C','D')
        AND     AP.FIELD IN ('DCRQTTY', 'DCRAMT', 'DDROUTQTTY', 'DDROUTAMT')
        AND     TR.BKDATE < TR.TXDATE  AND     SE.CODEID =SB.CODEID
        AND     TR.DELTD <> 'Y'  AND     TR.NAMT <> 0
        AND     SE.ACCTNO = TR.ACCTNO AND     SE.STATUS <> 'C'
        and se.afacctno = af.acctno and af.custid = cf.custid
        and substr(cf.custodycd,1,4) = systemnums.C_DEALINGCD
        AND    nvl( tr.tltxcd,'-') NOT IN ('2222')
        AND     (SE.COSTPRICE_ADJ_DATE <= TR.BKDATE OR SE.COSTPRICE_ADJ_DATE IS NULL)
        GROUP BY cf.custid, cf.custodycd, TR.BKDATE
        ORDER BY TR.BKDATE DESC, SE.AFACCTNO|| NVL( SB.refcodeid,SB.CODEID);
-- Cursor c_SECostPriceAtValueDate lay gia tri COSTPRICE o ngay value date (back date). Cursor nay chi duoc fetch 1 lan
-- nham muc dich chi lay 1 ban ghi gan nhat so voi ngay Value Date
    Cursor c_SECostPriceAtValueDate (p_ValueDate in Date, p_AcctNo in Varchar2) is
        SELECT * FROM SECOSTPRICE
        WHERE   TXDATE <= p_ValueDate
        AND     ACCTNO = p_AcctNo
        ORDER BY TXDATE DESC;
-- Cursor c_SECostPriceAfterValueDate lay gia tri COSTPRICE o cac lon hon value date (back date).
-- Nham muc dich cap nhat gia tri COSTPRICE trong bang SECOSTPRICE bi anh huong boi giao dich back date
-- Neu trong qua trinh cap nhat, khoi luong chung khoan = 0 thi can cap nhat gia von = 0
    Cursor c_SECostPriceAfterValueDate (p_ValueDate in Date, p_CurrDate in Date, p_AcctNo in Varchar2) is
        SELECT * FROM SECOSTPRICE
        WHERE   TXDATE > p_ValueDate
        AND     TXDATE < p_CurrDate
        AND     ACCTNO = p_AcctNo
        ORDER BY TXDATE;
    v_SECostPriceAtValueDate   c_SECostPriceAtValueDate%ROWTYPE;
    v_SECostPriceAfterValueDate   c_SECostPriceAfterValueDate%ROWTYPE;
    v_currdate VARCHAR2(10);
    v_nextdate VARCHAR2(10);
    v_Prev_CostPrice    number;
    v_Prev_Qtty         number;
    v_Count             NUMBER;
    v_SE_PrevQtty       NUMBER;
    v_CurrCostPrice     NUMBER;
    l_sectype   VARCHAR2(50);
    l_custid     VARCHAR2(50);
    l_afacctno VARCHAR2(50);
    l_codeid   VARCHAR2(50);
  BEGIN
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate_PROP');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
-- Xu ly cac giao dich BackDate lam thay doi gia von
-- Can cap nhat vao 2 bang: SECostPrice va DWSEBAL
    For v_SEBackDate in c_SEBackDate Loop
        Open c_SECostPriceAtValueDate(v_SEBackDate.ValueDate, v_SEBackDate.AcctNo);
        Fetch c_SECostPriceAtValueDate into v_SECostPriceAtValueDate;
   /*SELECT count(*) INTO v_Count
    FROM SEMAST
    WHERE ACCTNO= v_SEBackDate.AcctNo;
  IF v_Count = 0 THEN
         l_afacctno := substr(v_SEBackDate.AcctNo,1,10);
         l_codeid := substr(v_SEBackDate.AcctNo,11);
         BEGIN
             SELECT b.setype,a.custid
             INTO l_sectype,l_custid
             FROM AFMAST A, aftype B
             WHERE  A.actype= B.actype
             AND a.ACCTNO = l_afacctno;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
             p_err_code := errnums.C_CF_REGTYPE_NOT_FOUND;
             RAISE errnums.E_CF_REGTYPE_NOT_FOUND;
         END;
         INSERT INTO SEMAST
         (ACTYPE,CUSTID,ACCTNO,CODEID,AFACCTNO,OPNDATE,LASTDATE,COSTDT,TBALDT,STATUS,IRTIED,IRCD,
         COSTPRICE,TRADE,MORTAGE,MARGIN,NETTING,STANDING,WITHDRAW,DEPOSIT,LOAN)
         VALUES(
         l_sectype, l_custid,v_SEBackDate.AcctNo,l_codeid,l_afacctno,
         getcurrdate() ,getcurrdate(),
         getcurrdate(),getcurrdate(),
         'A','Y','000', 0,0,0,0,0,0,0,0,0);
    END IF;*/


        V_SECOSTPRICEATVALUEDATE.Costprice:=GREATEST(v_SECostPriceAtValueDate.Costprice,0);
        If c_SECostPriceAtValueDate%NOTFOUND then
            -- tai khoan chung khoan nay chua tung duoc luu gia von
            -- chi can insert 1 ban ghi vi tu ngay value date chi co 1 phat sinh tai ngay value date
            If v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY > 0 then
                v_Prev_CostPrice := CASE WHEN v_SEBackDate.DCRQTTY > 0 THEN
                                            ROUND((v_SEBackDate.DCRAMT /*- v_SEBackDate.DDROUTAMT*/)/ (v_SEBackDate.DCRQTTY /*- v_SEBackDate.DDROUTQTTY*/),4)
                                            ELSE 0 END;
                IF v_Prev_CostPrice<0 THEN
                   v_Prev_CostPrice:=0;
                ENd IF;
                INSERT INTO SECOSTPRICE(AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES(SEQ_SECOSTPRICE.NEXTVAL, v_SEBackDate.ACCTNO, v_SEBackDate.ValueDate,
                    v_Prev_CostPrice,
                    0, v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY, v_SEBackDate.DCRQTTY, v_SEBackDate.DCRAMT,
                    v_SEBackDate.DDROUTQTTY, v_SEBackDate.DDROUTAMT, 'N');

                v_Prev_Qtty := v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY;
            End if;
        ElsIf v_SECostPriceAtValueDate.TXDATE = v_SEBackDate.VALUEDATE then
            -- Tai khoan chung khoan nay co gia von tai ngay Value Date
            -- Can update gia von cho tai khoan chung khoan tai ngay Value Date
            If v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY = 0 then
                -- Tang giam chung khoan lam so du tai khoan bang 0. Can cap nhat gia von = 0
                UPDATE  SECOSTPRICE
                SET     COSTPRICE = 0,
                        PREVQTTY = 0,
                        DCRQTTY = DCRQTTY + v_SEBackDate.DCRQTTY,
                        DDROUTQTTY = DDROUTQTTY + v_SEBackDate.DDROUTQTTY,
                        DCRAMT = DCRAMT + v_SEBackDate.DCRAMT,
                        DDROUTAMT = DDROUTAMT + v_SEBackDate.DDROUTAMT
                WHERE   TXDATE =   v_SEBackDate.VALUEDATE
                AND     ACCTNO = v_SEBackDate.ACCTNO;

                v_Prev_CostPrice := 0;
                v_Prev_Qtty := 0;

            Else
                -- Tang giam chung khoan lam so du tai khoan khac 0. Can cap nhat gia von theo quy dinh
                v_Prev_CostPrice := GREATEST(CASE WHEN v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY > 0 THEN
                                        ROUND((v_SECostPriceAtValueDate.PREVQTTY*GREATEST(V_SECOSTPRICEATVALUEDATE.COSTPRICE,0)
                                            + v_SEBackDate.DCRAMT /*- v_SEBackDate.DDROUTAMT*/)/
                                        (v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY /*- v_SEBackDate.DDROUTQTTY*/),4)
                                        ELSE GREATEST(V_SECOSTPRICEATVALUEDATE.COSTPRICE,0) END,0);

                UPDATE  SECOSTPRICE
                SET     COSTPRICE = v_Prev_CostPrice,
                        PREVQTTY = PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY,
                        DCRQTTY = DCRQTTY + v_SEBackDate.DCRQTTY,
                        DDROUTQTTY = DDROUTQTTY + v_SEBackDate.DDROUTQTTY,
                        DCRAMT = DCRAMT + v_SEBackDate.DCRAMT,
                        DDROUTAMT = DDROUTAMT + v_SEBackDate.DDROUTAMT
                WHERE   TXDATE =   v_SEBackDate.VALUEDATE
                AND     ACCTNO = v_SEBackDate.ACCTNO;


                v_Prev_Qtty := v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY;

             End if;
        Else
            -- truong hop co gia von ngay truoc nhung khong co gia von ngay Value date
            -- can insert 1 ban ghi vao ngay Value Date
            If v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY = 0 then
                -- Tang giam chung khoan lam so du tai khoan bang 0. Can cap nhat gia von = 0
                INSERT INTO SECOSTPRICE(AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES(SEQ_SECOSTPRICE.NEXTVAL, v_SEBackDate.ACCTNO, v_SEBackDate.ValueDate,
                    0, GREATEST(V_SECOSTPRICEATVALUEDATE.COSTPRICE,0), 0, v_SEBackDate.DCRQTTY, v_SEBackDate.DCRAMT,
                    v_SEBackDate.DDROUTQTTY, v_SEBackDate.DDROUTAMT, 'N');

                v_Prev_CostPrice := 0;
                v_Prev_Qtty := 0;

            Else
                -- Tang giam chung khoan lam so du tai khoan khac 0. Can cap nhat gia von theo quy dinh
                v_Prev_CostPrice := CASE WHEN v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY > 0  THEN
                                        ROUND((v_SECostPriceAtValueDate.PREVQTTY*GREATEST(V_SECOSTPRICEATVALUEDATE.COSTPRICE,0)
                                            + v_SEBackDate.DCRAMT /*- v_SEBackDate.DDROUTAMT*/)/
                                        (v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY /*- v_SEBackDate.DDROUTQTTY*/),4)
                                        ELSE GREATEST(V_SECOSTPRICEATVALUEDATE.COSTPRICE,0) END;
                 V_PREV_COSTPRICE:=GREATEST(V_PREV_COSTPRICE,0);

                INSERT INTO SECOSTPRICE(AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES(SEQ_SECOSTPRICE.NEXTVAL, v_SEBackDate.ACCTNO, v_SEBackDate.ValueDate,
                    v_Prev_CostPrice,
                   GREATEST(V_SECOSTPRICEATVALUEDATE.COSTPRICE,0), v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY,
                    v_SEBackDate.DCRQTTY, v_SEBackDate.DCRAMT, v_SEBackDate.DDROUTQTTY, v_SEBackDate.DDROUTAMT, 'N');


                v_Prev_Qtty := v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY;

            End if;
        End If;
        Close c_SECostPriceAtValueDate;

        -- Cap nhat lai gia von cua tai khoan trong SECOSTPRICE cua nhung ngay tu Value Date + 1 cho den Current Date - 1
        -- Trong qua trinh cap nhat, neu khoi luong chung khoan = 0 thi can cap nhat gia von = 0
        -- Bien v_Prev_CostPrice va v_Prev_Qtty luu gia von va khoi luong truoc do
        For v_SECostPriceAfterValueDate in c_SECostPriceAfterValueDate (v_SEBackDate.VALUEDATE,
                                TO_DATE(v_currdate, systemnums.c_date_format), v_SEBackDate.ACCTNO) Loop

            If v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY - v_SECostPriceAfterValueDate.DDROUTQTTY = 0 then
                -- cap nhat gia von = 0

                UPDATE  SECOSTPRICE
                SET     COSTPRICE = 0,
                        PREVCOSTPRICE = v_Prev_CostPrice,
                        PREVQTTY = 0
                WHERE   TXDATE =   v_SECostPriceAfterValueDate.TXDATE
                AND     ACCTNO = v_SECostPriceAfterValueDate.ACCTNO;

                v_Prev_CostPrice := 0;
                v_Prev_Qtty := 0;

            Else  -- khoi luong <> 0, cap nhat gia von theo quy dinh

                UPDATE  SECOSTPRICE
                SET     COSTPRICE = GREATEST(CASE WHEN v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY > 0 THEN
                                            ROUND((v_Prev_Qtty*v_Prev_CostPrice + v_SECostPriceAfterValueDate.DCRAMT /*- v_SECostPriceAfterValueDate.DDROUTAMT*/)/
                                            (v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY /*- v_SECostPriceAfterValueDate.DDROUTQTTY*/ ),4)
                                            ELSE v_Prev_CostPrice END,0),
                        PREVCOSTPRICE = v_Prev_CostPrice,
                        PREVQTTY = v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY - v_SECostPriceAfterValueDate.DDROUTQTTY
                WHERE   TXDATE =   v_SECostPriceAfterValueDate.TXDATE
                AND     ACCTNO = v_SECostPriceAfterValueDate.ACCTNO;

                v_Prev_CostPrice := CASE WHEN v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY > 0 THEN
                                        ROUND((v_Prev_Qtty*v_Prev_CostPrice + v_SECostPriceAfterValueDate.DCRAMT /*- v_SECostPriceAfterValueDate.DDROUTAMT*/)/
                                            (v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY /*- v_SECostPriceAfterValueDate.DDROUTQTTY*/ ),4)
                                        ELSE v_Prev_CostPrice END;
                v_Prev_CostPrice:=GREATEST(v_Prev_CostPrice,0);
                v_Prev_Qtty := v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY - v_SECostPriceAfterValueDate.DDROUTQTTY;

            End if;
        End Loop;  -- Ket thuc cap nhat gia von cac ngay tu Value Date + 1 den Current Date - 1

        -- Cap nhat gia tri COSTPRICE va PREVQTTY trong SEMAST tuong ung voi cac gia tri do trong bang SECOSTPRICE cua ngay hom truoc
        UPDATE  SEMAST
        SET     COSTPRICE = v_Prev_CostPrice,
                PREVQTTY = v_Prev_Qtty
        WHERE   custid = v_SEBackDate.custid
        AND     STATUS <> 'C';

    End Loop;  -- Ket thuc cap nhat gia von bi anh huong boi cac giao dich back date trong SETRAN

    --Tinh lai gia von va so du luu ky cua tai khoan SE cua ngay hien tai

    -- Doi voi nhung tai khoan KHONG phat sinh giao dich, update cac gia tri tang giam trong ngay bang 0
    -- Doi voi nhung tai khoan CO phat sinh giao dich, update cac gia tri tang giam trong ngay bang gia tri trong SETRAN

    UPDATE SEMAST
    SET DCRQTTY     =   0,
        DCRAMT      =   0,
        DDROUTQTTY  =   0,
        DDROUTAMT   =   0
    WHERE   STATUS  <> 'C';


    For v_SETran in c_SETran LOOP

/*    SELECT count(*) INTO v_Count
    FROM SEMAST
    WHERE ACCTNO= v_SETran.AcctNo;
  IF v_Count = 0 THEN
         l_afacctno := substr(v_SETran.AcctNo,1,10);
         l_codeid := substr(v_SETran.AcctNo,11);
         BEGIN
             SELECT b.setype,a.custid
             INTO l_sectype,l_custid
             FROM AFMAST A, aftype B
             WHERE  A.actype= B.actype
             AND a.ACCTNO = l_afacctno;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
             p_err_code := errnums.C_CF_REGTYPE_NOT_FOUND;
             RAISE errnums.E_CF_REGTYPE_NOT_FOUND;
         END;


         INSERT INTO SEMAST
         (ACTYPE,CUSTID,ACCTNO,CODEID,AFACCTNO,OPNDATE,LASTDATE,COSTDT,TBALDT,STATUS,IRTIED,IRCD,
         COSTPRICE,TRADE,MORTAGE,MARGIN,NETTING,STANDING,WITHDRAW,DEPOSIT,LOAN)
         VALUES(
         l_sectype, l_custid,v_SETran.AcctNo,l_codeid,l_afacctno,
         getcurrdate() ,getcurrdate(),
         getcurrdate(),getcurrdate(),
         'A','Y','000', 0,0,0,0,0,0,0,0,0);
    END IF;*/


        -- Xac dinh xem trong ngay da co tinh gia von hay chua
        -- Neu co roi thi cap nhat them de dam bao moi ngay chi co 1 dong trong secostprice
        v_Count := 0;
        SELECT count(1)
        INTO v_Count
        FROM secostprice
        WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND acctno = v_SETran.ACCTNO;

        -- Neu so luong chung khoan khac 0 thi cap nhat gia von theo quy dinh
        If v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY <> 0 then
            IF v_Count = 0 THEN
                -- Insert ban ghi vao SECostPrice
                INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                        DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES (SEQ_SECOSTPRICE.NEXTVAL, v_SETran.ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
                        GREATEST(CASE WHEN v_SETran.DCRQTTY + v_SETran.PREVQTTY > 0 THEN
                                ROUND((v_SETran.PREVQTTY*v_SETran.COSTPRICE + v_SETran.DCRAMT /*- v_SETran.DDROUTAMT*/)/
                                (v_SETran.DCRQTTY + v_SETran.PREVQTTY /*- v_SETran.DDROUTQTTY*/),4)
                                ELSE v_SETran.COSTPRICE END,0),
                        ROUND(v_SETran.COSTPRICE,4), v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        v_SETran.DCRQTTY, v_SETran.DCRAMT, v_SETran.DDROUTQTTY, v_SETran.DDROUTAMT, 'N');
            ELSE
                -- Cap nhat SECOSTPRICE
                UPDATE  SECOSTPRICE SET
                        COSTPRICE = GREATEST(CASE WHEN v_SETran.DCRQTTY + v_SETran.PREVQTTY > 0 THEN
                                ROUND((v_SETran.PREVQTTY*v_SETran.COSTPRICE + v_SETran.DCRAMT /*- v_SETran.DDROUTAMT*/)/
                                (v_SETran.DCRQTTY + v_SETran.PREVQTTY /*- v_SETran.DDROUTQTTY*/),4)
                                ELSE ROUND(v_SETran.COSTPRICE,4) END,0),
                        PREVCOSTPRICE = ROUND(v_SETran.COSTPRICE,4),
                        PREVQTTY = v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        DCRQTTY = DCRQTTY + v_SETran.DCRQTTY,
                        DCRAMT = DCRAMT + v_SETran.DCRAMT,
                        DDROUTQTTY = DDROUTQTTY + v_SETran.DDROUTQTTY,
                        DDROUTAMT = DDROUTAMT + v_SETran.DDROUTAMT
                WHERE   TXDATE =   TO_DATE(v_currdate, systemnums.c_date_format)
                AND     ACCTNO = v_SETran.ACCTNO;
            END IF;

            -- Cap nhat gia von trong SEMAST

            UPDATE SEMAST
            SET COSTPRICE = GREATEST(CASE WHEN v_SETran.DCRQTTY + v_SETran.PREVQTTY > 0 THEN
                            ROUND((v_SETran.PREVQTTY*v_SETran.COSTPRICE + v_SETran.DCRAMT /*- v_SETran.DDROUTAMT*/)/
                            (v_SETran.DCRQTTY + v_SETran.PREVQTTY /*- v_SETran.DDROUTQTTY*/),4)
                            ELSE round(v_SETran.COSTPRICE,4) END,0),
                COSTDT      =   TO_DATE(v_currdate, systemnums.c_date_format),
                PREVQTTY    =   v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                DCRQTTY     =   v_SETran.DCRQTTY,
                DCRAMT      =   v_SETran.DCRAMT,
                DDROUTQTTY  =   v_SETran.DDROUTQTTY,
                DDROUTAMT   =   v_SETran.DDROUTAMT,
                LASTDATE    =   TO_DATE(v_currdate, systemnums.c_date_format)
            WHERE   custid  = v_SETran.custid
            AND     STATUS  <> 'C';

        Else  -- truong hop tong so luong chung khoan = 0 thi cap nhat lai gia von = 0
            IF v_Count = 0 THEN
                -- Insert ban ghi vao SECostPrice
                INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                        DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES (SEQ_SECOSTPRICE.NEXTVAL, v_SETran.ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
                        0, ROUND(v_SETran.COSTPRICE,4), v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        v_SETran.DCRQTTY, v_SETran.DCRAMT, v_SETran.DDROUTQTTY, v_SETran.DDROUTAMT, 'N');
            ELSE
                -- Cap nhat SECOSTPRICE
                UPDATE  SECOSTPRICE SET
                        COSTPRICE = 0,
                        PREVCOSTPRICE = ROUND(v_SETran.COSTPRICE,4),
                        PREVQTTY = v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        DCRQTTY = DCRQTTY + v_SETran.DCRQTTY,
                        DCRAMT = DCRAMT + v_SETran.DCRAMT,
                        DDROUTQTTY = DDROUTQTTY + v_SETran.DDROUTQTTY,
                        DDROUTAMT = DDROUTAMT + v_SETran.DDROUTAMT
                WHERE   TXDATE =   TO_DATE(v_currdate, systemnums.c_date_format)
                AND     ACCTNO = v_SETran.ACCTNO;
            END IF;

            -- Cap nhat gia von trong SEMAST

            UPDATE SEMAST
            SET COSTPRICE = 0,
                COSTDT      =   TO_DATE(v_currdate, systemnums.c_date_format),
                PREVQTTY    =   v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                DCRQTTY     =   v_SETran.DCRQTTY,
                DCRAMT      =   v_SETran.DCRAMT,
                DDROUTQTTY  =   v_SETran.DDROUTQTTY,
                DDROUTAMT   =   v_SETran.DDROUTAMT,
                LASTDATE    =   TO_DATE(v_currdate, systemnums.c_date_format)
            WHERE   custid  = v_SETran.custid
            AND     STATUS  <> 'C';
        End If;
    End Loop;
    -- Cap nhat lai so CK PREVQTTY cho cac TK ban CK trong ngay
    FOR rec IN
    (
        SELECT  sts.acctno, sum(sts.qtty) qtty
        FROM stschd sts, afmast af, cfmast cf
        WHERE sts.txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND sts.duetype = 'SS' AND sts.deltd = 'N'
            and sts.afacctno = af.acctno and af.custid = cf.custid
            and substr(cf.custodycd,1,4) = systemnums.C_DEALINGCD
        GROUP BY sts.acctno
        ORDER BY sts.acctno
    )
    LOOP
        -- Cap nhat lai cho gia von trong ngay
        SELECT count(1)
        INTO v_Count
        FROM secostprice
        WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND acctno = rec.acctno;

        SELECT prevqtty, costprice
        INTO v_SE_PrevQtty, v_CurrCostPrice
        FROM semast se
        WHERE se.acctno = rec.acctno;

        IF v_Count = 0 THEN
            -- Them dong moi
            INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
            SELECT SEQ_SECOSTPRICE.NEXTVAL, rec.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                    CASE WHEN se.PREVQTTY - rec.qtty = 0 THEN 0 ELSE se.costprice END, se.costprice, se.PREVQTTY - rec.qtty,
                    0, 0, rec.qtty, round(rec.qtty*se.costprice), 'N'
            FROM semast se WHERE se.acctno = rec.acctno;
        ELSE
            -- Cap nhat SECOSTPRICE

            UPDATE secostprice SET
                costprice = CASE WHEN v_SE_PrevQtty - rec.qtty = 0 THEN 0 ELSE costprice END,
                PREVQTTY = PREVQTTY - rec.qtty,
                DDROUTQTTY = DDROUTQTTY + rec.qtty,
                DDROUTAMT = DDROUTAMT + round(rec.qtty*costprice)
            WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND acctno = rec.acctno;
        END IF;

        -- Cap nhat lai gia von lenh ban
        -- Lay gia von cuoi ngay
        UPDATE stschd SET
            costprice = v_CurrCostPrice
        WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND duetype = 'SS' AND deltd = 'N'
            AND acctno = rec.acctno;

        -- Cap nhat SEMAST
        UPDATE semast SET
            costprice = CASE WHEN prevqtty - rec.qtty = 0 THEN 0 ELSE costprice END,
            PREVQTTY = PREVQTTY - rec.qtty
        WHERE acctno = rec.acctno;

    END LOOP;
    -- Ket thuc: Cap nhat lai so CK PREVQTTY
--DELETE FROM  semast_prevqtty ;
COMMIT;

COMMIT;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate_PROP');
EXCEPTION
      WHEN OTHERS THEN
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, SQLERRM);
        plog.setendsection (pkgctx, 'pr_SECostPriceCalculate_PROP');
        RAISE errnums.E_SYSTEM_ERROR;
END pr_SECostPriceCalculate_PROP;
  ---------------------------------pr_ODExtentionAccount------------------------------------------------
  PROCEDURE PR_ODEXTENTIONACCOUNT(P_ERR_CODE OUT VARCHAR2) IS
    INDATE      VARCHAR2(20);
    V_COMPANYCD VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODExtentionAccount');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');
    INDATE      := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'CURRDATE');
    PLOG.DEBUG(PKGCTX, 'Update schedule!');

    UPDATE STSCHD
       SET STATUS = 'C'
     WHERE CLEARDATE = TO_DATE(INDATE, SYSTEMNUMS.C_DATE_FORMAT)
       AND AFACCTNO IN (SELECT ACCTNO
                          FROM CFMAST CF, AFMAST AF, AFTYPE TYP
                         WHERE CF.CUSTATCOM = 'N'
                           AND CF.CUSTID = AF.CUSTID
                           AND AF.ACTYPE = TYP.ACTYPE);

    --Reset Han muc bao lanh ve 0
    PLOG.DEBUG(PKGCTX, 'Reset custodient contract!');
    UPDATE AFMAST
       SET ADVANCELINE = 0, T0AMT = 0
     WHERE ACCTNO IN (SELECT ACCTNO
                        FROM CFMAST CF, AFMAST AF, AFTYPE TYP
                       WHERE CF.CUSTATCOM = 'N'
                         AND CF.CUSTID = AF.CUSTID
                         AND AF.ACTYPE = TYP.ACTYPE);
    PLOG.DEBUG(PKGCTX, 'Reset custodient securities contract!');
    UPDATE SEMAST
       SET TRADE = 0
     WHERE AFACCTNO IN (SELECT ACCTNO
                          FROM CFMAST CF, AFMAST AF, AFTYPE TYP
                         WHERE CF.CUSTATCOM = 'N'
                           AND CF.CUSTID = AF.CUSTID
                           AND AF.ACTYPE = TYP.ACTYPE);
    --Xoa giao dich lien quan den CK
    PLOG.DEBUG(PKGCTX, 'Reset custodient securities tran!');
    UPDATE SETRAN
       SET DELTD = 'Y'
     WHERE ACCTNO IN (SELECT SE.ACCTNO
                        FROM SEMAST SE, CFMAST CF, AFMAST AF, AFTYPE TYP
                       WHERE CF.CUSTATCOM = 'N'
                         AND CF.CUSTID = AF.CUSTID
                         AND AF.ACTYPE = TYP.ACTYPE
                         AND SE.AFACCTNO = AF.ACCTNO);
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODExtentionAccount');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODExtentionAccount');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODEXTENTIONACCOUNT;

  ---------------------------------pr_OrderBackUp------------------------------------------------
  PROCEDURE PR_ORDERBACKUP(P_ERR_CODE OUT VARCHAR2) IS
    INDATE   VARCHAR2(20);
    PREVDATE VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_OrderBackUp');
    SELECT VARVALUE
      INTO PREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';
    SELECT VARVALUE
      INTO INDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    --Sao luu vao odmasthist
    INSERT INTO ODMASTHIST
      SELECT *
        FROM ODMAST
       WHERE ORDERID IN
             (SELECT OD.ORDERID
                FROM (SELECT *
                        FROM ODMAST OD
                       WHERE (EXPDATE <= TO_DATE(INDATE, 'DD/MM/YYYY') OR
                             ORDERQTTY = EXECQTTY)
                         AND ORSTATUS IN ('5', '7')
                            -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                         AND (CASE
                               WHEN OD.ERROD = 'Y' AND
                                    OD.ERRSTS IN ('A', 'E', 'G') THEN
                                0
                               ELSE
                                1
                             END) = 1
                      --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
                      ) OD
                LEFT JOIN (SELECT *
                            FROM STSCHD
                           WHERE STATUS = 'N'
                             AND DELTD = 'N') SCHD
                  ON OD.ORDERID = SCHD.ORGORDERID
               GROUP BY OD.ORDERID
              HAVING COUNT(SCHD.ORGORDERID) = 0);
    --Sao luu cac lich thanh toan da xoa
    INSERT INTO STSCHDHIST
      SELECT *
        FROM STSCHD
       WHERE DELTD = 'Y'
         AND ORGORDERID NOT IN (SELECT ORDERID
                                  FROM ODMAST OD
                                 WHERE OD.ERROD = 'Y'
                                   AND OD.ERRSTS <> 'C');
    --Sao luu cac lich thanh toan da thanh toan het
    INSERT INTO STSCHDHIST
      SELECT *
        FROM STSCHD
       WHERE ORGORDERID IN
             (SELECT OD.ORDERID
                FROM (SELECT *
                        FROM ODMAST OD
                       WHERE (EXPDATE <= TO_DATE(INDATE, 'DD/MM/YYYY') OR
                             ORDERQTTY = EXECQTTY)
                         AND ORSTATUS IN ('5', '7')
                            -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                         AND (CASE
                               WHEN OD.ERROD = 'Y' AND
                                    OD.ERRSTS IN ('A', 'E', 'G') THEN
                                0
                               ELSE
                                1
                             END) = 1
                      --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
                      ) OD
                LEFT JOIN (SELECT *
                            FROM STSCHD
                           WHERE STATUS = 'N'
                             AND DELTD = 'N') SCHD
                  ON OD.ORDERID = SCHD.ORGORDERID
               GROUP BY OD.ORDERID
              HAVING COUNT(SCHD.ORGORDERID) = 0);
    --Xoa cac lich thanh toan da bi xoa
    DELETE FROM STSCHD
     WHERE DELTD = 'Y'
       AND ORGORDERID NOT IN (SELECT ORDERID
                                FROM ODMAST OD
                               WHERE OD.ERROD = 'Y'
                                 AND OD.ERRSTS <> 'C');
    --Xoa cac lich thanh toan da thanh toan xong
    DELETE FROM STSCHD
     WHERE ORGORDERID IN
           (SELECT OD.ORDERID
              FROM (SELECT *
                      FROM ODMAST OD
                     WHERE (EXPDATE <= TO_DATE(INDATE, 'DD/MM/YYYY') OR
                           ORDERQTTY = EXECQTTY)
                       AND ORSTATUS IN ('5', '7')
                          -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                       AND (CASE
                             WHEN OD.ERROD = 'Y' AND
                                  OD.ERRSTS IN ('A', 'E', 'G') THEN
                              0
                             ELSE
                              1
                           END) = 1
                    --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
                    ) OD
              LEFT JOIN (SELECT *
                          FROM STSCHD
                         WHERE STATUS = 'N'
                           AND DELTD = 'N') SCHD
                ON OD.ORDERID = SCHD.ORGORDERID
             GROUP BY OD.ORDERID
            HAVING COUNT(SCHD.ORGORDERID) = 0);
    --Xoa cac lenh da duoc backup
    DELETE FROM ODMAST
     WHERE ORDERID IN
           (SELECT OD.ORDERID
              FROM (SELECT *
                      FROM ODMAST OD
                     WHERE (EXPDATE <= TO_DATE(INDATE, 'DD/MM/YYYY') OR
                           ORDERQTTY = EXECQTTY)
                       AND ORSTATUS IN ('5', '7')
                          -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                       AND (CASE
                             WHEN OD.ERROD = 'Y' AND
                                  OD.ERRSTS IN ('A', 'E', 'G') THEN
                              0
                             ELSE
                              1
                           END) = 1
                    --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
                    ) OD
              LEFT JOIN (SELECT *
                          FROM STSCHD
                         WHERE STATUS = 'N'
                           AND DELTD = 'N') SCHD
                ON OD.ORDERID = SCHD.ORGORDERID
             GROUP BY OD.ORDERID
            HAVING COUNT(SCHD.ORGORDERID) = 0);
    --Dong bo thong tin khop lenh GTC tu ODMAST ve FOMAST
    FOR REC IN (SELECT FO.ACCTNO,
                       SUM(OD.EXECQTTY) EXECQTTY,
                       SUM(OD.EXECAMT) EXECAMT
                  FROM (SELECT *
                          FROM ODMAST
                        UNION
                        SELECT *
                          FROM ODMASTHIST
                         WHERE TXDATE > '20-jan-2014') OD,
                       FOMAST FO
                 WHERE OD.FOACCTNO = FO.ACCTNO
                   AND OD.DELTD <> 'Y'
                 GROUP BY FO.ACCTNO

                ) LOOP
      UPDATE FOMAST
         SET EXECQTTY = REC.EXECQTTY, EXECAMT = REC.EXECAMT
       WHERE ACCTNO = REC.ACCTNO;
    END LOOP;
    --Cap nhat trang thai cho lenh GTC truoc khi backup

    UPDATE FOMAST
       SET STATUS = (CASE
                      WHEN EXECAMT > 0 THEN
                       'C'
                      ELSE
                       'E'
                    END)
     WHERE EXPDATE < TO_DATE(INDATE, 'DD/MM/YYYY')
        OR DELTD = 'Y'
        OR REMAINQTTY = 0;

 /*   --Ngay 24/03/2017 CW NamTv cap nhat trang thai Huy lenh GTC khi ma chung khoan het han
    update fomast set status = 'C'
        where fn_check_cwsecurities(symbol) <> 0
          AND TIMETYPE='G'
          AND STATUS NOT IN ('C','E');

    --'Back up FOMAST--> FOMASTHIST
    INSERT INTO FOMASTHIST SELECT * FROM FOMAST
        WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY=0 OR STATUS='C'; --Day xuong hist trang thai la C
    DELETE FROM FOMAST
        WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY=0 OR STATUS='C'; --Xoa trang thai la C
*/

    --'Back up FOMAST--> FOMASTHIST
    INSERT INTO FOMASTHIST
      SELECT *
        FROM FOMAST
       WHERE EXPDATE < TO_DATE(INDATE, 'DD/MM/YYYY')
          OR DELTD = 'Y'
          OR REMAINQTTY = 0;
    DELETE FROM FOMAST
     WHERE EXPDATE < TO_DATE(INDATE, 'DD/MM/YYYY')
        OR DELTD = 'Y'
        OR REMAINQTTY = 0;
    --End CW NamTv

    UPDATE FOMAST
       SET STATUS = 'P'
     WHERE REMAINQTTY > 0
       AND DELTD <> 'Y';
    INSERT INTO FOMASTLOGALL
      SELECT * FROM FOMASTLOG;
    DELETE FROM FOMASTLOG;

    -- Backup lenh Bloomberg
    INSERT INTO bl_odmasthist
    SELECT * FROM bl_odmast
    WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY+ptbookqtty-ptsentqtty=0;
    -- Xoa lenh cu
    DELETE bl_odmast
    WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY+ptbookqtty-ptsentqtty=0;

    INSERT INTO bl_odmastdtlhist
    SELECT * FROM bl_odmastdtl;
    -- Xoa lenh cu
    DELETE bl_odmastdtl;

    --RUN store sp_sbs_batch_adhoc_bod
    SP_SBS_BATCH_ADHOC_BOD;
    --Ngay 28/11/2016 NamTv them xu ly cuoi ngay xuat du lieu sang Bravo
    gen_gltran_batch('ALL',PREVDATE) ;
    --NamTv End
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_OrderBackUp');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_OrderBackUp');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ORDERBACKUP;

  ---------------------------------pr_ODSettlementReceiveMoney------------------------------------------------
  PROCEDURE PR_ODSETTLEMENTRECEIVEMONEY(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    V_DBLPROFIT     NUMBER(20, 0);
    V_DBLLOSS       NUMBER(20, 0);
    V_DBLAVLRCVAMT  NUMBER(20, 0);
    V_DBLVATRATE    NUMBER(20, 0);
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
    L_RcvCash_Buyin VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementReceiveMoney');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8866';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    --HSX04: buyin
    SELECT NVL(VARVALUE, 'Y')
      INTO L_RCVCASH_BUYIN
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'RCVCASHTIME_BUYIN_CN';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8866';
    V_DBLPROFIT       := 0;
    V_DBLLOSS         := 0;
    FOR REC IN (--ngoc.vu-Jira561: chuyen tu dem so ngay >=Clearday sang dung cleardate
               SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                        CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN  1  ELSE 1END) WITHOUTHOLIDAY,
                       CASE  WHEN CI.COREBANK = 'Y' THEN 1 ELSE 0
                       END COREBANK,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT,0)) AMT, --HSX04 MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(GREATEST(MST.QTTY-ODMST.NETEXECQTTY-ODMST.CFNETEXECQTTY,0)) QTTY, --HSX04 MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE,
                       MIN(ODMST.ACTYPE) ACTYPE
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE <= CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND ODMST.AFACCTNO = CI.AFACCTNO
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND  MST.CLEARDATE <=TO_DATE( v_strCURRDATE,systemnums.c_date_format)
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RM')
                   AND CF.CUSTATCOM = 'Y'
                   AND nvl(odmst.isbuyin , 'N') LIKE decode (L_RcvCash_Buyin, 'Y', 'N', '%')
                 GROUP BY MST.AUTOID,
                          CLR2.SBDATE,
                          MST.AFACCTNO,
                          MST.ACCTNO,
                          CI.COREBANK
                HAVING MIN(MST.CLEARDAY) < (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID
                 ) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;
      V_DBLAVLRCVAMT := REC.AMT;
      V_DBLVATRATE   := REC.VATRATE;
      --Tinh gia tri lai lo cho tu doanh
      IF REC.CUSTODYCD = 'P' THEN
        IF REC.AMT > REC.COSTPRICE * REC.QTTY THEN
          V_DBLPROFIT := ROUND(REC.AMT - REC.COSTPRICE * REC.QTTY, 0);
          V_DBLLOSS   := 0;
        ELSE
          V_DBLPROFIT := 0;
          V_DBLLOSS   := ROUND(REC.COSTPRICE * REC.QTTY - REC.AMT, 0);
        END IF;
      END IF;
      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.ACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   RAMT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'RAMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11   N   AAMT
      L_TXMSG.TXFIELDS('11').DEFNAME := 'AAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.AAMT, 0);
      --12   N   FEEAMT
      L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;
      --13   N   VAT
      L_TXMSG.TXFIELDS('13').DEFNAME := 'VAT';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := 0;
      --14   N   PROFITAMT
      L_TXMSG.TXFIELDS('14').DEFNAME := 'PROFITAMT';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := V_DBLPROFIT;
      --15   N   LOSSAMT
      L_TXMSG.TXFIELDS('15').DEFNAME := 'LOSSAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := V_DBLLOSS;
      --16   N   COSTPRICE
      L_TXMSG.TXFIELDS('16').DEFNAME := 'COSTPRICE';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := REC.COSTPRICE;
      --31   N   COREBANK
      L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
      L_TXMSG.TXFIELDS('31').TYPE := 'N';
      L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_8866 || ' ' ||
                                      TRIM(TO_CHAR(REC.SQTTY,
                                                   '999,999,999,999,999')) || ' ' ||
                                      REC.SYMBOL || ' ' ||
                                      UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                      TO_CHAR(REC.TXDATE, 'DD/MM/RRRR');
      /*If v_blnVietnamese = True Then
          l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
      Else
          l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
      End If;*/
      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

      --53   N   MICD
      L_TXMSG.TXFIELDS('53').DEFNAME := 'MICD';
      L_TXMSG.TXFIELDS('53').TYPE := 'C';
      L_TXMSG.TXFIELDS('53').VALUE := '';

      --60   N   ISMORTAGE
      L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('60').TYPE := 'N';
      L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                        WHEN REC.EXECTYPE = 'MS' THEN
                                         1
                                        ELSE
                                         0
                                      END);
      BEGIN
        IF TXPKS_#8866.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8866: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
          --ELSE
          --txpks_sepitlog.pr_DeductionPIT(rec.ORGORDERID,rec.ACCTNO, rec.AFACCTNO || rec.CODEID, rec.CODEID, rec.QTTY, P_ERR_CODE=>p_err_code);
          --HaiLT bo tinh thue TNCN de tinh o cho khac
          --txpks_sepitlog.pr_SellStockCALog(P_ORDERID=>rec.ORGORDERID, P_ACCTNO=>rec.ACCTNO,
          --P_AFACCTNO=>rec.AFACCTNO, P_SEACCTNO=>rec.AFACCTNO || rec.CODEID, P_CODEID=>rec.CODEID, P_QTTY=>rec.QTTY,
          --P_ACTYPE=>rec.ACTYPE, P_TXDATE=>rec.TXDATE, P_ERR_CODE=>p_err_code);
          --End of HaiLT bo tinh thue TNCN de tinh o cho khac
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveMoney');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveMoney');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTRECEIVEMONEY;
 ---------------------------------pr_ODSettlementReceiveMoney------------------------------------------------
  PROCEDURE pr_ODSltReceiveMoney_temp(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    V_DBLPROFIT     NUMBER(20, 0);
    V_DBLLOSS       NUMBER(20, 0);
    V_DBLAVLRCVAMT  NUMBER(20, 0);
    V_DBLVATRATE    NUMBER(20, 0);
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
    l_CHGBCHORDERSTARTDATE date;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSltReceiveMoney_temp');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8866';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8866';
    V_DBLPROFIT       := 0;
    V_DBLLOSS         := 0;
    FOR REC IN (SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                       CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE
                             WHEN CLR1.HOLIDAY = 'Y' THEN
                              0
                             ELSE
                              1
                           END) WITHHOLIDAY,
                       SUM(CASE
                             WHEN CLR1.HOLIDAY = 'Y' THEN
                              1
                             ELSE
                              1
                           END) WITHOUTHOLIDAY,
                       CASE
                         WHEN CI.COREBANK = 'Y' THEN
                          1
                         ELSE
                          0
                       END COREBANK,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE,
                       MIN(ODMST.ACTYPE) ACTYPE
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE < CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND ODMST.AFACCTNO = CI.AFACCTNO
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RM')
                   AND CF.CUSTATCOM = 'Y'
                    and mst.txdate < l_CHGBCHORDERSTARTDATE -- T10/2015 TTBT T+2 Begin
                 GROUP BY MST.AUTOID,
                          CLR2.SBDATE,
                          MST.AFACCTNO,
                          MST.ACCTNO,
                          CI.COREBANK
                HAVING MIN(MST.CLEARDAY) <= (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;
      V_DBLAVLRCVAMT := REC.AMT;
      V_DBLVATRATE   := REC.VATRATE;
      --Tinh gia tri lai lo cho tu doanh
      IF REC.CUSTODYCD = 'P' THEN
        IF REC.AMT > REC.COSTPRICE * REC.QTTY THEN
          V_DBLPROFIT := ROUND(REC.AMT - REC.COSTPRICE * REC.QTTY, 0);
          V_DBLLOSS   := 0;
        ELSE
          V_DBLPROFIT := 0;
          V_DBLLOSS   := ROUND(REC.COSTPRICE * REC.QTTY - REC.AMT, 0);
        END IF;
      END IF;
      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.ACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   RAMT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'RAMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11   N   AAMT
      L_TXMSG.TXFIELDS('11').DEFNAME := 'AAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.AAMT, 0);
      --12   N   FEEAMT
      L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;
      --13   N   VAT
      L_TXMSG.TXFIELDS('13').DEFNAME := 'VAT';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := 0;
      --14   N   PROFITAMT
      L_TXMSG.TXFIELDS('14').DEFNAME := 'PROFITAMT';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := V_DBLPROFIT;
      --15   N   LOSSAMT
      L_TXMSG.TXFIELDS('15').DEFNAME := 'LOSSAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := V_DBLLOSS;
      --16   N   COSTPRICE
      L_TXMSG.TXFIELDS('16').DEFNAME := 'COSTPRICE';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := REC.COSTPRICE;
      --31   N   COREBANK
      L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
      L_TXMSG.TXFIELDS('31').TYPE := 'N';
      L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_8866 || ' ' ||
                                      TRIM(TO_CHAR(REC.SQTTY,
                                                   '999,999,999,999,999')) || ' ' ||
                                      REC.SYMBOL || ' ' ||
                                      UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                      TO_CHAR(REC.TXDATE, 'DD/MM/RRRR');
      /*If v_blnVietnamese = True Then
          l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
      Else
          l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
      End If;*/
      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

      --53   N   MICD
      L_TXMSG.TXFIELDS('53').DEFNAME := 'MICD';
      L_TXMSG.TXFIELDS('53').TYPE := 'C';
      L_TXMSG.TXFIELDS('53').VALUE := '';

      --60   N   ISMORTAGE
      L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('60').TYPE := 'N';
      L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                        WHEN REC.EXECTYPE = 'MS' THEN
                                         1
                                        ELSE
                                         0
                                      END);
      BEGIN
        IF TXPKS_#8866.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8866: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
          --ELSE
          --txpks_sepitlog.pr_DeductionPIT(rec.ORGORDERID,rec.ACCTNO, rec.AFACCTNO || rec.CODEID, rec.CODEID, rec.QTTY, P_ERR_CODE=>p_err_code);
          --HaiLT bo tinh thue TNCN de tinh o cho khac
          --txpks_sepitlog.pr_SellStockCALog(P_ORDERID=>rec.ORGORDERID, P_ACCTNO=>rec.ACCTNO,
          --P_AFACCTNO=>rec.AFACCTNO, P_SEACCTNO=>rec.AFACCTNO || rec.CODEID, P_CODEID=>rec.CODEID, P_QTTY=>rec.QTTY,
          --P_ACTYPE=>rec.ACTYPE, P_TXDATE=>rec.TXDATE, P_ERR_CODE=>p_err_code);
          --End of HaiLT bo tinh thue TNCN de tinh o cho khac
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSltReceiveMoney_temp');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSltReceiveMoney_temp');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END pr_ODSltReceiveMoney_temp;
  ---------------------------------pr_ODReleaseBlockAdvanced------------------------------------------------
  PROCEDURE PR_ODRELEASEBLOCKADVANCED(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODReleaseBlockAdvanced');
    P_LASTRUN := 'Y';
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8861';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8861';
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
        SELECT CF.CUSTODYCD,MST.AUTOID,MST.ORGORDERID,SB.SYMBOL,MST.QTTY,ODMST.EXECQTTY SQTTY ,MST.AFACCTNO,MST.AAMT-MST.PAIDAMT AMT,MST.FAMT-MST.PAIDFEEAMT FEEAMT,ODMST.TXDATE,ODMST.EXECTYPE
               FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,ODMAST ODMST, AFMAST AF, CFMAST CF,SBSECURITIES SB
               WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID= CF.CUSTID AND DUETYPE='RM' AND MST.STATUS='C' AND MST.AAMT-MST.PAIDAMT+MST.FAMT-MST.PAIDFEEAMT>0
               AND MST.DELTD<>'Y' AND MST.CODEID=SB.CODEID and MST.ORGORDERID=ODMST.ORDERID AND (ODMST.EXECTYPE = 'MS' or ODMST.VIA='W')
               AND GETDUEDATE(MST.TXDATE,MST.CLEARCD,SB.TRADEPLACE,MST.CLEARDAY)>=TO_DATE( v_strCURRDATE,systemnums.c_date_format)
               ORDER BY MST.ORGORDERID
    )
    loop
        --Set txnum
        plog.debug(pkgctx, 'Loop for' || rec.ORGORDERID);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --09   STAUTOID     N
        l_txmsg.txfields ('09').defname   := 'STAUTOID';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.AUTOID;

        --03   ACCTNO       C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --05   ORGORDERID   C
        l_txmsg.txfields ('05').defname   := 'ORGORDERID';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.ORGORDERID;

        --10   PAIDAMT      N
        l_txmsg.txfields ('10').defname   := 'PAIDAMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
        --11   PAIDFEEAMT   N
        l_txmsg.txfields ('11').defname   := 'PAIDFEEAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.FEEAMT,0);
        --12   N   FEEAMT
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := 'Tra UTTB cua lenh' || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;

        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);
        BEGIN
            IF txpks_#8861.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 8861: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;*/
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODReleaseBlockAdvanced');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_ODReleaseBlockAdvanced');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODReleaseBlockAdvanced');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODRELEASEBLOCKADVANCED;

  ---------------------------------pr_ODDayReleaseAdvanced------------------------------------------------
  PROCEDURE PR_ODDAYRELEASEADVANCED(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_ISCOREBANK    NUMBER;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODDayReleaseAdvanced');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM ADSCHD;
    /*IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/

    P_LASTRUN := 'Y';

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8851';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8851';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (SELECT MST.AUTOID,
                       MST.ACCTNO,
                       MST.ISMORTAGE,
                       MST.AMT - MST.PAIDAMT + MST.OVERFEEAMT AMT, --HSX04 MST.AMT - MST.PAIDAMT AMT,
                       MST.FEEAMT - MST.OVERFEEAMT FEEAMT, --HSX04 MST.FEEAMT FEEAMT,
                       MST.VATAMT,
                       TO_CHAR(MST.TXDATE, 'DD/MM/YYYY') TXDATE,
                       MST.RRTYPE,
                       MST.CIACCTNO,
                       MST.CUSTBANK,
                       MST.ODDATE,
                       MST.PAIDDATE,
                       DECODE(MST.RRTYPE, 'O', 1, 0) CIDRAWNDOWN,
                       DECODE(MST.RRTYPE, 'B', 1, 0) BANKDRAWNDOWN,
                       DECODE(MST.RRTYPE, 'C', 1, 0) CMPDRAWNDOWN,
                       (UTF8NUMS.C_CONST_DESC_8851 || ', ' ||
                       UTF8NUMS.C_CONST_DESC_8851_ODDATE || ' ' ||
                       TO_CHAR(MST.TXDATE, 'DD/MM/RRRR') || ', ' ||
                       UTF8NUMS.C_CONST_DESC_8851_TXDATE || ' ' ||
                       TO_CHAR(MST.ODDATE, 'DD/MM/RRRR') || '') TXDESC,
                       MST.TXNUM
                /*FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM ADSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST*/
                  FROM ADSCHD MST
                 WHERE STATUS = 'N'
                   AND DELTD <> 'Y'
                   AND CLEARDT <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                 ORDER BY MST.AUTOID) LOOP
      SELECT (CASE
               WHEN COREBANK = 'Y' THEN
                1
               ELSE
                0
             END)
        INTO L_ISCOREBANK
        FROM CIMAST
       WHERE ACCTNO = REC.ACCTNO;
      --Set txnum
      PLOG.DEBUG(PKGCTX, 'Loop for autoid:' || REC.AUTOID);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);
      --Set cac field giao dich

      --09   STAUTOID     N
      L_TXMSG.TXFIELDS('09').DEFNAME := 'STAUTOID';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.AUTOID;

      --03   ACCTNO       C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --10   PAIDAMT      N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'PAIDAMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11   PAIDFEEAMT   N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'PAIDFEEAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.FEEAMT, 0);
      --12   N   OVERFEEAMT
        l_txmsg.txfields ('12').defname   := 'OVERFEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;

      --60   N   ISMORTAGE
      L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('60').TYPE := 'N';
      L_TXMSG.TXFIELDS('60').VALUE := REC.ISMORTAGE;

      --44   C   RRTYPE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'RRTYPE';
      L_TXMSG.TXFIELDS('44').TYPE := 'C';
      L_TXMSG.TXFIELDS('44').VALUE := REC.RRTYPE;

      --04   C   CIACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.CIACCTNO;

      --05   C   CUSTBANK
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CUSTBANK';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.CUSTBANK;

      --94   N   ISCOREBANK
      L_TXMSG.TXFIELDS('94').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('94').TYPE := 'N';
      L_TXMSG.TXFIELDS('94').VALUE := L_ISCOREBANK; --1: la tai khoan corebank; 0: la tai khoan tai CTchung khoan

      --96   C   CIDRAWNDOWN
      L_TXMSG.TXFIELDS('96').DEFNAME := 'CIDRAWNDOWN';
      L_TXMSG.TXFIELDS('96').TYPE := 'C';
      L_TXMSG.TXFIELDS('96').VALUE := REC.CIDRAWNDOWN;

      --97   C   BANKDRAWNDOWN
      L_TXMSG.TXFIELDS('97').DEFNAME := 'BANKDRAWNDOWN';
      L_TXMSG.TXFIELDS('97').TYPE := 'C';
      L_TXMSG.TXFIELDS('97').VALUE := REC.BANKDRAWNDOWN;

      --98   C   CMPDRAWNDOWN
      L_TXMSG.TXFIELDS('98').DEFNAME := 'CMPDRAWNDOWN';
      L_TXMSG.TXFIELDS('98').TYPE := 'C';
      L_TXMSG.TXFIELDS('98').VALUE := REC.CMPDRAWNDOWN;

      BEGIN
        IF TXPKS_#8851.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8851: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
      --PhuongHT add
      -- cap nhat vao bang advreslog de biet da hoan ung
      INSERT INTO ADVRESLOGHIST
        (SELECT *
           FROM ADVRESLOG
          WHERE TXNUM = REC.TXNUM
            AND TXDATE = TO_DATE(REC.TXDATE, 'dd/mm/yyyy'));
      DELETE FROM ADVRESLOG
       WHERE TXNUM = REC.TXNUM
         AND TXDATE = TO_DATE(REC.TXDATE, 'dd/mm/yyyy');
      -- end of PhuongHT add
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODDayReleaseAdvanced');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_ODDayReleaseAdvanced');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODDayReleaseAdvanced');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODDAYRELEASEADVANCED;
--T2-NAMNT
  ---------------------------------pr_ODDayReleaseAdvanced_TEMP------------------------------------------------
  PROCEDURE pr_ODDayReleaseAdvanced_TEMP(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_ISCOREBANK    NUMBER;
    l_CHGBCHORDERSTARTDATE date;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODDayReleaseAdvanced_TEMP');
        SELECT COUNT(*) MAXROW into l_MaxRow FROM  ADSCHD;

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM ADSCHD;

    /*IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/

    P_LASTRUN := 'Y';

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8851';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8851';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (SELECT MST.AUTOID,
                       MST.ACCTNO,
                       MST.ISMORTAGE,
                       MST.AMT - MST.PAIDAMT AMT,
                       MST.FEEAMT FEEAMT,
                       MST.VATAMT,
                       TO_CHAR(MST.TXDATE, 'DD/MM/YYYY') TXDATE,
                       MST.RRTYPE,
                       MST.CIACCTNO,
                       MST.CUSTBANK,
                       MST.ODDATE,
                       MST.PAIDDATE,
                       DECODE(MST.RRTYPE, 'O', 1, 0) CIDRAWNDOWN,
                       DECODE(MST.RRTYPE, 'B', 1, 0) BANKDRAWNDOWN,
                       DECODE(MST.RRTYPE, 'C', 1, 0) CMPDRAWNDOWN,
                       (UTF8NUMS.C_CONST_DESC_8851 || ', ' ||
                       UTF8NUMS.C_CONST_DESC_8851_ODDATE || ' ' ||
                       TO_CHAR(MST.TXDATE, 'DD/MM/RRRR') || ', ' ||
                       UTF8NUMS.C_CONST_DESC_8851_TXDATE || ' ' ||
                       TO_CHAR(MST.ODDATE, 'DD/MM/RRRR') || '') TXDESC,
                       MST.TXNUM
                /*FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM ADSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST*/
                  FROM ADSCHD MST
                 WHERE STATUS = 'N'
                   AND DELTD <> 'Y'
                    and mst.oddate < l_CHGBCHORDERSTARTDATE -- T10/2015 TTBT T+2 Begin
                   AND CLEARDT <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                 ORDER BY MST.AUTOID) LOOP
      SELECT (CASE
               WHEN COREBANK = 'Y' THEN
                1
               ELSE
                0
             END)
        INTO L_ISCOREBANK
        FROM CIMAST
       WHERE ACCTNO = REC.ACCTNO;
      --Set txnum
      PLOG.DEBUG(PKGCTX, 'Loop for autoid:' || REC.AUTOID);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);
      --Set cac field giao dich

      --09   STAUTOID     N
      L_TXMSG.TXFIELDS('09').DEFNAME := 'STAUTOID';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.AUTOID;

      --03   ACCTNO       C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --10   PAIDAMT      N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'PAIDAMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11   PAIDFEEAMT   N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'PAIDFEEAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.FEEAMT, 0);
      --12   N   OVERFEEAMT
        l_txmsg.txfields ('12').defname   := 'OVERFEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;

      --60   N   ISMORTAGE
      L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('60').TYPE := 'N';
      L_TXMSG.TXFIELDS('60').VALUE := REC.ISMORTAGE;

      --44   C   RRTYPE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'RRTYPE';
      L_TXMSG.TXFIELDS('44').TYPE := 'C';
      L_TXMSG.TXFIELDS('44').VALUE := REC.RRTYPE;

      --04   C   CIACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.CIACCTNO;

      --05   C   CUSTBANK
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CUSTBANK';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.CUSTBANK;

      --94   N   ISCOREBANK
      L_TXMSG.TXFIELDS('94').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('94').TYPE := 'N';
      L_TXMSG.TXFIELDS('94').VALUE := L_ISCOREBANK; --1: la tai khoan corebank; 0: la tai khoan tai CTchung khoan

      --96   C   CIDRAWNDOWN
      L_TXMSG.TXFIELDS('96').DEFNAME := 'CIDRAWNDOWN';
      L_TXMSG.TXFIELDS('96').TYPE := 'C';
      L_TXMSG.TXFIELDS('96').VALUE := REC.CIDRAWNDOWN;

      --97   C   BANKDRAWNDOWN
      L_TXMSG.TXFIELDS('97').DEFNAME := 'BANKDRAWNDOWN';
      L_TXMSG.TXFIELDS('97').TYPE := 'C';
      L_TXMSG.TXFIELDS('97').VALUE := REC.BANKDRAWNDOWN;

      --98   C   CMPDRAWNDOWN
      L_TXMSG.TXFIELDS('98').DEFNAME := 'CMPDRAWNDOWN';
      L_TXMSG.TXFIELDS('98').TYPE := 'C';
      L_TXMSG.TXFIELDS('98').VALUE := REC.CMPDRAWNDOWN;

      BEGIN
        IF TXPKS_#8851.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8851: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
      --PhuongHT add
      -- cap nhat vao bang advreslog de biet da hoan ung
      INSERT INTO ADVRESLOGHIST
        (SELECT *
           FROM ADVRESLOG
          WHERE TXNUM = REC.TXNUM
            AND TXDATE = TO_DATE(REC.TXDATE, 'dd/mm/yyyy'));
      DELETE FROM ADVRESLOG
       WHERE TXNUM = REC.TXNUM
         AND TXDATE = TO_DATE(REC.TXDATE, 'dd/mm/yyyy');
      -- end of PhuongHT add
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODDayReleaseAdvanced_TEMP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_ODDayReleaseAdvanced_TEMP');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODDayReleaseAdvanced_TEMP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END pr_ODDayReleaseAdvanced_TEMP;
--END T2-NAMNT
  /* ---------------------------------pr_CIAutoAdvance------------------------------------------------
  PROCEDURE pr_CIAutoAdvance(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_dblamount number(20,0);
      l_dblbalance number(20,0);
      l_dblcmpfee number(20,0);
      l_dblbnkfee number(20,0);
      l_dbladvamount number(20,0);
      l_ADTXNUM      VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIAutoAdvance');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1153';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1153';
    plog.debug(pkgctx, 'Begin loop');
    l_dblamount:=0;
    l_dblbalance:=0;

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan

    for rec in
    (
        select sts.*, aft.adtype,AD.VATRATE, AD.ADVRATE AINTRATE,
            AD.ADVMINAMT AMINBAL,AD.ADVMINBANK AMINBANK, AD.ADVBANKRATE AFEEBANK,0 ADVMINFEE,0 AMINFEEBANK,
            'Ung truoc tien lenh ban ngay:' || sts.txdate DES,
            CF.address, cf.idcode license, ad.ADVMAXFEE,CASE WHEN STS.ISVSD = 'N' THEN 0 ELSE 1 END ISVSDFAKE
        FROM vw_advanceschedule sts, afmast af,
            (select * from (select a.*, rownum id from cimast a)) ci,
            cfmast cf, aftype aft, adtype ad
        where sts.acctno =af.acctno and af.custid=cf.custid
            and ci.afacctno=af.acctno and ci.balance<0
            and af.actype = aft.actype  and aft.adtype = ad.actype
            AND sts.isvsd <> 'Y' -- HaiLT them de chan UT doi voi lenh ban cam co VSD
            --and substr(sts.custodycd ,1,3) = (select varvalue from sysvar where grname ='SYSTEM' and varname ='COMPANYCD')
            AND af.autoadv='Y'
        order by sts.acctno, sts.days
    )
    loop
        --l_dblamount :=rec.DEPOAMT;
        l_dbladvamount:=round(rec.maxavlamt,0);
        select round(ci.balance,0) into l_dblbalance from cimast CI where CI.acctno =rec.acctno;
        l_dblbalance:=-l_dblbalance;
        --l_dblbalance:= round(greatest (
        --    l_dblbalance + rec.ADVMINFEE + rec.AMINFEEBANK,
        --    l_dblbalance/(1- rec.DAYS*(rec.AINTRATE+rec.AFEEBANK)/100/360),
        --    l_dblbalance/(1- rec.DAYS*(rec.AINTRATE)/100/360) + rec.AMINFEEBANK,
        --    l_dblbalance/(1- rec.DAYS*(rec.AFEEBANK)/100/360) + rec.ADVMINFEE
        --),0); --Ung truoc tu dong khong tinh phi Min
        l_dblbalance:= ceil(greatest (
            l_dblbalance + rec.ADVMINFEE ,
            l_dblbalance/(1- rec.DAYS*rec.AINTRATE/100/360)
        )); --Ung truoc tu dong khong tinh phi Min

        l_dbladvamount:= round(least(l_dbladvamount,l_dblbalance),0);


        l_dblcmpfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE));
        l_dblbnkfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AFEEBANK/100/360,rec.AMINFEEBANK));
        --l_dblamount:= round(l_dbladvamount-l_dblcmpfee-l_dblbnkfee,0);
        l_dblamount:= round(l_dbladvamount-l_dblcmpfee,0);

        --Ung truoc tu dong khong ting gia tri Ung Min
        IF l_dblamount>0 then --AND l_dbladvamount >= ROUND(REC.AMINBAL+REC.AMINBANK,0) THEN
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(rec.cleardate));
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich
            l_txmsg.txfields ('60').defname   := 'ISVSD';
            l_txmsg.txfields ('60').TYPE      := 'C';
            l_txmsg.txfields ('60').VALUE     := rec.ISVSDFAKE;

            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
            --06    ADTYPE      C
            l_txmsg.txfields ('06').defname   := 'ADTYPE';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := 'AUTO';
            --08    DUEDATE      C
            l_txmsg.txfields ('08').defname   := 'DUEDATE';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := to_char(rec.CLEARDATE,'DD/MM/RRRR');
             --09   ADVAMT          N
            l_txmsg.txfields ('09').defname   := 'ADVAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_dblamount + l_dblcmpfee + l_dblbnkfee;
            --10    AMT         N
            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := l_dblamount;
            --11    FEEAMT      N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_dblcmpfee;

            --12    INTRATE     N
            l_txmsg.txfields ('12').defname   := 'INTRATE';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.AINTRATE;
            --13    DAYS        N
            l_txmsg.txfields ('13').defname   := 'DAYS';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.DAYS;
            --14    BNKFEEAMT   N
            l_txmsg.txfields ('14').defname   := 'BNKFEEAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := l_dblbnkfee;
            --15    BNKRATE     N
            l_txmsg.txfields ('15').defname   := 'BNKRATE';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := rec.AFEEBANK;
            --16    CMPMINBAL   N
            l_txmsg.txfields ('16').defname   := 'CMPMINBAL';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.ADVMINFEE;
            --17    BNKMINBAL   N
            l_txmsg.txfields ('17').defname   := 'BNKMINBAL';
            l_txmsg.txfields ('17').TYPE      := 'N';
            l_txmsg.txfields ('17').VALUE     := rec.AMINFEEBANK;
            --18    VATAMT  N
            l_txmsg.txfields ('18').defname   := 'VATAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := rec.VATRATE * (l_dblcmpfee+l_dblbnkfee)/100;
            --19    VAT     N
            l_txmsg.txfields ('19').defname   := 'VAT';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     := rec.VATRATE;
            --20    MAXAMT      N
            l_txmsg.txfields ('20').defname   := 'MAXAMT';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := round(rec.MAXAVLAMT,0);
            --21    AMINBAL      N
            l_txmsg.txfields ('21').defname   := 'AMINBAL';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := 0;
            --22   ADVMAXFEE         N
            l_txmsg.txfields ('22').defname   := 'ADVMAXFEE';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := rec.ADVMAXFEE;
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.DES;
            --40    3600        C
            l_txmsg.txfields ('40').defname   := '3600';
            l_txmsg.txfields ('40').TYPE      := 'C';
            l_txmsg.txfields ('40').VALUE     := 36000;
            --41    100         C
            l_txmsg.txfields ('41').defname   := '100';
            l_txmsg.txfields ('41').TYPE      := 'C';
            l_txmsg.txfields ('41').VALUE     := 100;
            --42    MATCHDATE         C
            l_txmsg.txfields ('42').defname   := 'MATCHDATE';
            l_txmsg.txfields ('42').TYPE      := 'C';
            l_txmsg.txfields ('42').VALUE     := rec.txdate;
            --88    CUSTODYCD    C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --89    ACTYPE    C
            l_txmsg.txfields ('89').defname   := 'ACTYPE';
            l_txmsg.txfields ('89').TYPE      := 'C';
            l_txmsg.txfields ('89').VALUE     := rec.ACTYPE;
            --90    CUSTNAME    C
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;
            --91    ADDRESS     C
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;
            --92    LICENSE     C
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            --93    BANKACCT    C
            l_txmsg.txfields ('93').defname   := 'BANKACCT';
            l_txmsg.txfields ('93').TYPE      := 'C';
            l_txmsg.txfields ('93').VALUE     := rec.BANKACCT;
            --94    COREBANK     C
            l_txmsg.txfields ('94').defname   := 'COREBANK';
            l_txmsg.txfields ('94').TYPE      := 'C';
            l_txmsg.txfields ('94').VALUE     := rec.COREBANK;
            --95    BANKCODE     C
            l_txmsg.txfields ('95').defname   := 'BANKCODE';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

            --96    IDDATE     C
            l_txmsg.txfields ('96').defname   := 'IDDATE';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.txdate;

            --97    IDPLACE     C
            l_txmsg.txfields ('97').defname   := 'IDPLACE';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := '';

            BEGIN
                IF txpks_#1153.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.debug (pkgctx,
                               'got error 1153: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

        END IF;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIAutoAdvance');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_CIAutoAdvance');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_CIAutoAdvance');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIAutoAdvance;*/

  ---------------------------------pr_CIAutoAdvance------------------------------------------------
  PROCEDURE PR_CIAUTOADVANCE(P_BCHMDL   VARCHAR,
                             P_ERR_CODE OUT VARCHAR2,
                             P_FROMROW  NUMBER,
                             P_TOROW    NUMBER,
                             P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_DBLAMOUNT     NUMBER(20, 0);
    L_DBLBALANCE    NUMBER(20, 0);
    L_DBLCMPFEE     NUMBER(20, 0);
    L_DBLBNKFEE     NUMBER(20, 0);
    L_DBLADVAMOUNT  NUMBER(20, 0);
    L_ADTXNUM       VARCHAR2(10);
    L_DBLMINFEE     NUMBER;
    L_OLDACCOUNT    VARCHAR2(10);
    L_DBLBUYAMT     NUMBER(20, 0);
    L_AVLLIMIT      NUMBER(20, 0);
    L_TDAMT         NUMBER(20, 0);
    L_COUNT         NUMBER;
    L_DBLBALANCE_TEMP NUMBER;
    L_DBLADVAMOUNT_TEMP NUMBER;
    L_PROMOTIONRATE number(20,4);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CIAutoAdvance');
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    P_LASTRUN := 'Y';
    --PhuongHT add: them phan check neu ham duoc goi tu buoc UTTB manual 111208
    IF P_BCHMDL = 'CIAUTOADV3' THEN
      SELECT COUNT(*)
        INTO L_COUNT
        FROM (SELECT STS.BCHMDL, 1 COUNT
                FROM SBBATCHSTS STS,
                     SBBATCHCTL CTL,
                     (SELECT *
                        FROM SYSVAR
                       WHERE VARNAME = 'CURRDATE'
                         AND GRNAME = 'SYSTEM') SYS
               WHERE STS.BCHDATE = TO_DATE(SYS.VARVALUE, 'DD/MM/RRRR')
                 AND STS.BCHMDL = CTL.BCHMDL
                 AND CTL.STATUS = 'Y'
                 AND CTL.ACTION = 'BF'
                 AND NVL(TRIM(BCHSTS), 'A') = 'A' -- chua batch giua ngay xong
                 AND EXISTS
               (SELECT 1
                        FROM SBBATCHSTS
                       WHERE BCHDATE = TO_DATE(SYS.VARVALUE, 'DD/MM/RRRR')) -- da sinh trong sbbatchsts
              UNION ALL -- da bat dau batch cuoi ngay
              SELECT 'BATCH' BCHMDL, 2 COUNT
                FROM DUAL
               WHERE EXISTS
               (SELECT 1
                        FROM SBBATCHCTL CTL,
                             SBBATCHSTS STS,
                             (SELECT * FROM SYSVAR WHERE VARNAME = 'CURRDATE') SYS
                       WHERE STS.BCHDATE =
                             TO_DATE(SYS.VARVALUE, 'DD/MM/RRRR')
                         AND STS.BCHMDL = CTL.BCHMDL
                         AND CTL.STATUS = 'Y'
                         AND NVL(CTL.ACTION, 'EOD') <> 'BF'
                         AND NVL(TRIM(BCHSTS), 'A') <> 'A') -- da chay duoc it nhat mot buoc batch cuoi ngay
                  OR NOT EXISTS
               (SELECT 1
                        FROM SBBATCHSTS STS,
                             (SELECT * FROM SYSVAR WHERE VARNAME = 'CURRDATE') SYS
                       WHERE STS.BCHDATE =
                             TO_DATE(SYS.VARVALUE, 'DD/MM/RRRR'))

              );
      IF L_COUNT > 0 THEN
        P_ERR_CODE := '-122202';
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_CIAutoAdvance');
        RETURN;
      END IF;

    END IF;
    --end of PhuongHT add

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1153';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1153';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    L_DBLAMOUNT  := 0;
    L_DBLBALANCE := 0;
    L_DBLMINFEE  := -1;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    /*for recmst in(
       select ci.acctno, depoamt avladvance, ci.balance
       from v_getAccountAvlAdvance adv, cimast ci
       where adv.afacctno = ci.acctno and ci.balance <0

    )
    loop
       --TOng so tien UTTB
       l_dbladvamount:= least (recmst.avladvance, - recmst.balance);

    end loop;*/
    L_OLDACCOUNT := 'XXXXXXXXXX';
    FOR REC IN (SELECT STS.*,
                       AFT.ADTYPE,
                       AD.VATRATE,
                       AD.ADVRATE AINTRATE,
                       AD.ADVMINAMT AMINBAL,
                       AD.ADVMINBANK AMINBANK,
                       AD.ADVBANKRATE AFEEBANK,
                       ADVMINFEE,
                       0 AMINFEEBANK,
                       'Ung truoc tien lenh ban ngay:' ||
                       TO_CHAR(STS.TXDATE, 'DD/MM/RRRR') DES,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AD.ADVMAXFEE,
                       CASE
                         WHEN STS.ISVSD = 'N' THEN
                          0
                         ELSE
                          1
                       END ISVSDFAKE,
                       MRT.MRTYPE,
                       AFT.ISTRFBUY,
                       AFT.ADVPRIO
                  FROM VW_ADVANCESCHEDULE STS,
                       AFMAST             AF,
                       CIMAST             CI,
                       CFMAST             CF,
                       AFTYPE             AFT,
                       ADTYPE             AD,
                       MRTYPE             MRT
                 WHERE STS.ACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND CI.BALANCE - CI.BUYSECAMT < 0
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.ADTYPE = AD.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND STS.ISVSD <> 'Y' -- HaiLT them de chan UT doi voi lenh ban cam co VSD
                      --and substr(sts.custodycd ,1,3) = (select varvalue from sysvar where grname ='SYSTEM' and varname ='COMPANYCD')
                   AND AF.AUTOADV = 'Y'
                 ORDER BY STS.ACCTNO, STS.DAYS) LOOP

    SELECT MIN (FEERATE) into L_PROMOTIONRATE FROM (
        SELECT ADP.AFACCTNO, MST.FEERATE FROM ADPRMFEECF ADP , ADPRMFEEMST MST
        WHERE GETCURRDATE BETWEEN ADP.VALDATE AND ADP.EXPDATE AND ADP.STATUS = 'A'
            AND ADP.AFACCTNO = REC.ACCTNO AND ADP.PROMOTIONID = MST.AUTOID
        );
    L_PROMOTIONRATE := NVL(L_PROMOTIONRATE,1000);

      SELECT ROUND(CI.BALANCE - CI.BUYSECAMT, 0)
        INTO L_DBLBALANCE
        FROM CIMAST CI
       WHERE CI.ACCTNO = REC.ACCTNO;
      L_DBLBALANCE := -L_DBLBALANCE;
      L_DBLBUYAMT  := 0;
      L_AVLLIMIT   := 0;
      --GianhVG Begin xu ly thu thu uu tien Margin roi den UTTB
      --PhuongHT:theo yc VCBS:neu loai hinh AFTYPE khong uu tien UTTB thi bo qua doan nay
      IF REC.ADVPRIO <> 'Y' THEN

        IF P_BCHMDL = 'CIAUTOADV' AND REC.MRTYPE IN ('T', 'S') AND
           REC.ISTRFBUY = 'N' THEN
          --PhuongHT edit: xu ly uu tien mon TD len truoc UTTB
          BEGIN
            SELECT SUM(NVL(MST.BALANCE, 0))
              INTO L_TDAMT
              FROM TDMAST MST, AFMAST AF, TDTYPE TYP, SYSVAR, AFTYPE AFT
             WHERE MST.ACTYPE = TYP.ACTYPE
               AND MST.AFACCTNO = AF.ACCTNO
               AND SYSVAR.VARNAME = 'CURRDATE'
               AND SYSVAR.GRNAME = 'SYSTEM'
               AND MST.DELTD <> 'Y'
               AND MST.STATUS IN ('N', 'A')
               AND MST.BUYINGPOWER = 'Y'
               AND AF.ACTYPE = AFT.ACTYPE /* and aft.mrtype = mrt.actype and mrt.mrtype <> 'T'*/
               AND (MST.BREAKCD = 'Y' OR
                   (MST.BREAKCD = 'N' AND
                   TO_DATE(SYSVAR.VARNAME, 'DD/MM/RRRRR') > MST.TODATE))
               AND AF.ACCTNO = REC.ACCTNO
             GROUP BY AF.ACCTNO;
          EXCEPTION
            WHEN OTHERS THEN
              L_TDAMT := 0;
          END;
          L_DBLBALANCE := GREATEST(L_DBLBALANCE - L_TDAMT, 0);
          -- end of PhuongHT edit: xu ly uu tien mon TD len truoc UTTB
          --Lan UTTD dau tien, neu la tai khoan Margin thi uu tien phat vay Margin truoc tren phan lenh mua, phan con lai moi UTTB
          BEGIN
            SELECT SUM(STS.AMT) + SUM(OD.FEEACR) AMT
              INTO L_DBLBUYAMT
              FROM STSCHD STS, ODMAST OD
             WHERE STS.ORGORDERID = OD.ORDERID
               AND STS.CLEARDATE = V_STRCURRDATE
               AND STS.STATUS = 'C'
               AND STS.DELTD <> 'Y'
               AND STS.AFACCTNO = REC.ACCTNO
               AND STS.DUETYPE = 'SM'
             GROUP BY STS.AFACCTNO;
          EXCEPTION
            WHEN OTHERS THEN
              L_DBLBUYAMT := 0;
          END;
          --l_dblbalance:=greatest(l_dblbalance-l_dblBuyamt,0);
        END IF;

        --Neu vuot qua han muc thi thuc hien UTTB tren phan vuot qua han muc
        BEGIN
          SELECT GREATEST(AF.MRCRLIMITMAX - CI.DFODAMT - CI.ODAMT -
                          CI.DFDEBTAMT - CI.DFINTDEBTAMT - CI.RAMT,
                          0)
            INTO L_AVLLIMIT
            FROM AFMAST AF, CIMAST CI
           WHERE AF.ACCTNO = CI.ACCTNO
             AND AF.ACCTNO = REC.ACCTNO;
        EXCEPTION
          WHEN OTHERS THEN
            L_AVLLIMIT := 0;
        END;
        L_DBLBALANCE := GREATEST(L_DBLBALANCE -
                                 LEAST(L_DBLBUYAMT, L_AVLLIMIT),
                                 0);

        --GianhVG End xu ly thu thu uu tien Margin roi den UTTB
      END IF; --end of PhuongHT theo yc VCBS:neu loai hinh AFTYPE uu tien UTTB thi bo qua doan nay
      IF L_DBLBALANCE > 0 THEN
        IF L_OLDACCOUNT <> REC.ACCTNO THEN
          L_DBLMINFEE := REC.ADVMINFEE;
        END IF;
        --l_dblamount :=rec.DEPOAMT;
        L_DBLADVAMOUNT := ROUND(REC.MAXAVLAMT, 0);
        /*l_dblbalance:= ceil(greatest (
            l_dblbalance + rec.ADVMINFEE ,
            l_dblbalance/(1- rec.DAYS*rec.AINTRATE/100/360)
        )); --Ung truoc tu dong khong tinh phi Min*/
       -- NAMNT KHONG LAM TRON LEN
        L_DBLBALANCE_TEMP:= L_DBLBALANCE *
                               (1 + REC.DAYS * (LEAST(L_PROMOTIONRATE,REC.AINTRATE)) / 100 / 360);
        L_DBLADVAMOUNT_TEMP:= LEAST(ROUND(REC.MAXAVLAMT, 0), L_DBLBALANCE_TEMP);
        ------
        L_DBLBALANCE   := CEIL(L_DBLBALANCE *
                               (1 + REC.DAYS * (LEAST(L_PROMOTIONRATE,REC.AINTRATE)) / 100 / 360));

        L_DBLADVAMOUNT := ROUND(LEAST(L_DBLADVAMOUNT, L_DBLBALANCE), 0);


        --l_dblcmpfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE));
        --l_dblbnkfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AFEEBANK/100/360,rec.AMINFEEBANK));
/*        L_DBLCMPFEE := CEIL(L_DBLADVAMOUNT * REC.DAYS * REC.AINTRATE / 100 / 360 /
                            (1 + REC.DAYS * REC.AINTRATE / 100 / 360));
        L_DBLBNKFEE := CEIL(L_DBLADVAMOUNT * REC.DAYS * REC.AFEEBANK / 100 / 360 /
                            (1 + REC.DAYS * REC.AFEEBANK / 100 / 360));*/

       --NAMNT- TRANH LAM TRON LEN 2 LAN
        L_DBLCMPFEE := CEIL( round( L_DBLADVAMOUNT_TEMP * REC.DAYS * (LEAST(L_PROMOTIONRATE,REC.AINTRATE)) / 100 / 360 /
                            (1 + REC.DAYS * (LEAST(L_PROMOTIONRATE,REC.AINTRATE)) / 100 / 360) ,1));
        L_DBLBNKFEE := CEIL(L_DBLADVAMOUNT_TEMP * REC.DAYS * REC.AFEEBANK / 100 / 360 /
                            (1 + REC.DAYS * REC.AFEEBANK / 100 / 360));


        --l_dblamount:= round(l_dbladvamount-l_dblcmpfee-l_dblbnkfee,0);
        L_DBLAMOUNT := ROUND(L_DBLADVAMOUNT - L_DBLCMPFEE, 0);
        IF L_DBLMINFEE > 0 THEN
          L_DBLMINFEE := GREATEST(L_DBLMINFEE - L_DBLCMPFEE - L_DBLBNKFEE,
                                  0);
          IF ROUND(REC.MAXAVLAMT, 0) > L_DBLADVAMOUNT THEN
            L_DBLCMPFEE := L_DBLCMPFEE +
                           LEAST(L_DBLMINFEE,
                                 ROUND(REC.MAXAVLAMT, 0) - L_DBLADVAMOUNT);
            L_DBLMINFEE := L_DBLMINFEE -
                           LEAST(L_DBLMINFEE,
                                 ROUND(REC.MAXAVLAMT, 0) - L_DBLADVAMOUNT);
          END IF;
        END IF;
        --Ung truoc tu dong khong ting gia tri Ung Min
        IF L_DBLAMOUNT  > 0 THEN
          --AND l_dbladvamount >= ROUND(REC.AMINBAL+REC.AMINBANK,0) THEN
          --Set txnum
          PLOG.DEBUG(PKGCTX,
                     'Loop for account:' || REC.ACCTNO || ' ngay' ||
                     TO_CHAR(REC.CLEARDATE));
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);
          --Set cac field giao dich
          L_TXMSG.TXFIELDS('60').DEFNAME := 'ISVSD';
          L_TXMSG.TXFIELDS('60').TYPE := 'C';
          L_TXMSG.TXFIELDS('60').VALUE := REC.ISVSDFAKE;

          --03   ACCTNO       C
          L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
          --06    ADTYPE      C
          L_TXMSG.TXFIELDS('06').DEFNAME := 'ADTYPE';
          L_TXMSG.TXFIELDS('06').TYPE := 'C';
          L_TXMSG.TXFIELDS('06').VALUE := 'AUTO';
          --08    DUEDATE      C
          L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
          L_TXMSG.TXFIELDS('08').TYPE := 'C';
          L_TXMSG.TXFIELDS('08').VALUE := TO_CHAR(REC.CLEARDATE,
                                                  'DD/MM/RRRR');
          --09   ADVAMT          N
          L_TXMSG.TXFIELDS('09').DEFNAME := 'ADVAMT';
          L_TXMSG.TXFIELDS('09').TYPE := 'N';
          L_TXMSG.TXFIELDS('09').VALUE := L_DBLAMOUNT + L_DBLCMPFEE +
                                          L_DBLBNKFEE;
          --10    AMT         N
          L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := L_DBLAMOUNT;
          --11    FEEAMT      N
          L_TXMSG.TXFIELDS('11').DEFNAME := 'FEEAMT';
          L_TXMSG.TXFIELDS('11').TYPE := 'N';
          L_TXMSG.TXFIELDS('11').VALUE := L_DBLCMPFEE;

          --12    INTRATE     N
          L_TXMSG.TXFIELDS('12').DEFNAME := 'INTRATE';
          L_TXMSG.TXFIELDS('12').TYPE := 'N';
          L_TXMSG.TXFIELDS('12').VALUE := (LEAST(L_PROMOTIONRATE,REC.AINTRATE));
          --13    DAYS        N
          L_TXMSG.TXFIELDS('13').DEFNAME := 'DAYS';
          L_TXMSG.TXFIELDS('13').TYPE := 'N';
          L_TXMSG.TXFIELDS('13').VALUE := REC.DAYS;
          --14    BNKFEEAMT   N
          L_TXMSG.TXFIELDS('14').DEFNAME := 'BNKFEEAMT';
          L_TXMSG.TXFIELDS('14').TYPE := 'N';
          L_TXMSG.TXFIELDS('14').VALUE := L_DBLBNKFEE;
          --15    BNKRATE     N
          L_TXMSG.TXFIELDS('15').DEFNAME := 'BNKRATE';
          L_TXMSG.TXFIELDS('15').TYPE := 'N';
          L_TXMSG.TXFIELDS('15').VALUE := REC.AFEEBANK;
          --16    CMPMINBAL   N
          L_TXMSG.TXFIELDS('16').DEFNAME := 'CMPMINBAL';
          L_TXMSG.TXFIELDS('16').TYPE := 'N';
          L_TXMSG.TXFIELDS('16').VALUE := REC.ADVMINFEE;
          --17    BNKMINBAL   N
          L_TXMSG.TXFIELDS('17').DEFNAME := 'BNKMINBAL';
          L_TXMSG.TXFIELDS('17').TYPE := 'N';
          L_TXMSG.TXFIELDS('17').VALUE := REC.AMINFEEBANK;
          --18    VATAMT  N
          L_TXMSG.TXFIELDS('18').DEFNAME := 'VATAMT';
          L_TXMSG.TXFIELDS('18').TYPE := 'N';
          L_TXMSG.TXFIELDS('18').VALUE := REC.VATRATE *
                                          (L_DBLCMPFEE + L_DBLBNKFEE) / 100;
          --19    VAT     N
          L_TXMSG.TXFIELDS('19').DEFNAME := 'VAT';
          L_TXMSG.TXFIELDS('19').TYPE := 'N';
          L_TXMSG.TXFIELDS('19').VALUE := REC.VATRATE;
          --20    MAXAMT      N
          L_TXMSG.TXFIELDS('20').DEFNAME := 'MAXAMT';
          L_TXMSG.TXFIELDS('20').TYPE := 'N';
          L_TXMSG.TXFIELDS('20').VALUE := ROUND(REC.MAXAVLAMT, 0);
          --21    AMINBAL      N
          L_TXMSG.TXFIELDS('21').DEFNAME := 'AMINBAL';
          L_TXMSG.TXFIELDS('21').TYPE := 'N';
          L_TXMSG.TXFIELDS('21').VALUE := 0;
          --22   ADVMAXFEE         N
          L_TXMSG.TXFIELDS('22').DEFNAME := 'ADVMAXFEE';
          L_TXMSG.TXFIELDS('22').TYPE := 'N';
          L_TXMSG.TXFIELDS('22').VALUE := REC.ADVMAXFEE;
          --30    DESC        C
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := REC.DES;
          --40    3600        C
          L_TXMSG.TXFIELDS('40').DEFNAME := '3600';
          L_TXMSG.TXFIELDS('40').TYPE := 'C';
          L_TXMSG.TXFIELDS('40').VALUE := 36000;
          --41    100         C
          L_TXMSG.TXFIELDS('41').DEFNAME := '100';
          L_TXMSG.TXFIELDS('41').TYPE := 'C';
          L_TXMSG.TXFIELDS('41').VALUE := 100;
          --42    MATCHDATE         C
          L_TXMSG.TXFIELDS('42').DEFNAME := 'MATCHDATE';
          L_TXMSG.TXFIELDS('42').TYPE := 'C';
          L_TXMSG.TXFIELDS('42').VALUE := REC.TXDATE;
          --88    CUSTODYCD    C
          L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
          L_TXMSG.TXFIELDS('88').TYPE := 'C';
          L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
          --89    ACTYPE    C
          L_TXMSG.TXFIELDS('89').DEFNAME := 'ACTYPE';
          L_TXMSG.TXFIELDS('89').TYPE := 'C';
          L_TXMSG.TXFIELDS('89').VALUE := REC.ACTYPE;
          --90    CUSTNAME    C
          L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
          L_TXMSG.TXFIELDS('90').TYPE := 'C';
          L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;
          --91    ADDRESS     C
          L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
          L_TXMSG.TXFIELDS('91').TYPE := 'C';
          L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;
          --92    LICENSE     C
          L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
          L_TXMSG.TXFIELDS('92').TYPE := 'C';
          L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

          --93    BANKACCT    C
          L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCT';
          L_TXMSG.TXFIELDS('93').TYPE := 'C';
          L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCT;
          --94    COREBANK     C
          L_TXMSG.TXFIELDS('94').DEFNAME := 'COREBANK';
          L_TXMSG.TXFIELDS('94').TYPE := 'C';
          L_TXMSG.TXFIELDS('94').VALUE := REC.COREBANK;
          --95    BANKCODE     C
          L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKCODE';
          L_TXMSG.TXFIELDS('95').TYPE := 'C';
          L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

          --96    IDDATE     C
          L_TXMSG.TXFIELDS('96').DEFNAME := 'IDDATE';
          L_TXMSG.TXFIELDS('96').TYPE := 'C';
          L_TXMSG.TXFIELDS('96').VALUE := REC.TXDATE;

          --97    IDPLACE     C
          L_TXMSG.TXFIELDS('97').DEFNAME := 'IDPLACE';
          L_TXMSG.TXFIELDS('97').TYPE := 'C';
          L_TXMSG.TXFIELDS('97').VALUE := '';

          BEGIN
            IF TXPKS_#1153.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 1153: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;

        END IF;
      END IF;
    END LOOP;
    --PhuongHT add: phan bo nguon
    --NAMNT : sua thu tu uu tien
    FOR REC IN (
    SELECT * FROM (
            SELECT tl.*, '0'||adl.odr odr
                          FROM TLLOG TL,afmast af ,
                             ( SELECT adlnk.custid,  to_char( listagg ( cfl.odr,'') within group(order by cfl.odr)) odr
                              FROM advreslnk  adlnk,cflimit cfl
                                WHERE adlnk.custbank = cfl.bankid
                                AND getcurrdate BETWEEN   adlnk.valdate AND adlnk.expdate
                                AND CFL.LMSUBTYPE='ADV'
                                AND CFL.RRTYPE <> 'C' and nvl(adlnk.chstatus,'C') <> 'A'
                                GROUP BY adlnk.custid)adl

                         WHERE TLTXCD = '1153'
                           AND DELTD <> 'Y'
                           AND tl.msgacct = af.acctno
                           AND af.custid = adl.custid(+)
                           AND NOT EXISTS (SELECT *
                                  FROM ADVRESLOG
                                 WHERE TXNUM = TL.TXNUM
                                   AND TXDATE = TL.TXDATE)
                     )

                 ORDER BY odr, MSGAMT) LOOP
      CSPKS_CIPROC.PR_ADVRESALLOC(REC.MSGACCT,
                                  REC.MSGAMT,
                                  REC.TXDATE,
                                  REC.TXNUM);
    END LOOP;
    --end if
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CIAutoAdvance');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_CIAutoAdvance');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CIAutoAdvance');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CIAUTOADVANCE;

  ---------------------------------pr_CIDebtAutoPayment------------------------------------------------
  PROCEDURE PR_CIDEBTAUTOPAYMENT(P_BCHMDL   VARCHAR,
                                 P_ERR_CODE OUT VARCHAR2,
                                 P_FROMROW  NUMBER,
                                 P_TOROW    NUMBER,
                                 P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);

    L_DBLAMOUNT NUMBER;
    V_AVLPAID   NUMBER;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CIDebtAutoPayment');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM CIMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1116';

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1116';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    L_DBLAMOUNT := 0;

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE,
                       CI.ACCTNO,
                       CI.DFDEBTAMT
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM CIMAST A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) CI,
                       CFMAST CF
                 WHERE CI.DFDEBTAMT > 0
                   AND CF.CUSTID = CI.CUSTID
                   AND CI.STATUS IN ('A', 'N', 'T')) LOOP
      L_DBLAMOUNT := ROUND(REC.DFDEBTAMT, 0);

      /*SELECT nvl(adv.avladvance,0) + balance - odamt  - ramt - nvl(b.execbuyamt,0)
      INTO v_avlpaid
       from cimast inner join afmast af on cimast.acctno=af.acctno
       left join (select * from v_getbuyorderinfo where afacctno = rec.ACCTNO) b
       on cimast.acctno = b.afacctno
       left join
       (select sum(depoamt) avladvance,afacctno
           from v_getAccountAvlAdvance where afacctno = rec.ACCTNO group by afacctno) adv
       on adv.afacctno=cimast.acctno
       WHERE cimast.acctno = rec.ACCTNO;*/
      SELECT ROUND(LEAST(NVL(ADV.AVLADVANCE, 0) + BALANCE - BUYSECAMT,
                         NVL(ADV.AVLADVANCE, 0) + BALANCE - BUYSECAMT +
                         AF.ADVANCELINE - NVL(B.EXECBUYAMT, 0)),
                   0)
        INTO V_AVLPAID
        FROM CIMAST
       INNER JOIN AFMAST AF
          ON CIMAST.ACCTNO = AF.ACCTNO
        LEFT JOIN (SELECT *
                     FROM V_GETBUYORDERINFO
                    WHERE AFACCTNO = REC.ACCTNO) B
          ON CIMAST.ACCTNO = B.AFACCTNO
        LEFT JOIN (SELECT SUM(ADVAMT) AVLADVANCE, AFACCTNO
                     FROM V_GETACCOUNTAVLADVANCE
                    WHERE AFACCTNO = REC.ACCTNO
                    GROUP BY AFACCTNO) ADV
          ON ADV.AFACCTNO = CIMAST.ACCTNO
       WHERE CIMAST.ACCTNO = REC.ACCTNO;

      V_AVLPAID   := ROUND(NVL(V_AVLPAID, 0), 0);
      L_DBLAMOUNT := GREATEST(LEAST(L_DBLAMOUNT, V_AVLPAID), 0);
      IF L_DBLAMOUNT > 0 THEN
        --Set txnum
        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.ACCTNO || ' ngay' ||
                   TO_CHAR(V_STRCURRDATE));
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);
        --Set cac field giao dich
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        --10  AMT         N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := L_DBLAMOUNT;
        --11  FAMT         N
        L_TXMSG.TXFIELDS('11').DEFNAME := 'FAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := 0;
        --12  FRATE         N
        L_TXMSG.TXFIELDS('12').DEFNAME := 'FRATE';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := 0;
        --89  AVLCASH     N
        L_TXMSG.TXFIELDS('89').DEFNAME := 'AVLCASH';
        L_TXMSG.TXFIELDS('89').TYPE := 'N';
        L_TXMSG.TXFIELDS('89').VALUE := ROUND(V_AVLPAID + REC.DFDEBTAMT, 0);
        --30  DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
        --88  CUSTODYCD   C
        L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
        L_TXMSG.TXFIELDS('88').TYPE := 'C';
        L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
        --90    CUSTNAME    C
        L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('90').TYPE := 'C';
        L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;
        --91    ADDRESS     C
        L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
        L_TXMSG.TXFIELDS('91').TYPE := 'C';
        L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;
        --92    LICENSE     C
        L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
        L_TXMSG.TXFIELDS('92').TYPE := 'C';
        L_TXMSG.TXFIELDS('92').VALUE := REC.IDCODE;

        BEGIN
          IF TXPKS_#1116.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 1116: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

      END IF;

    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CIDebtAutoPayment');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CIDebtAutoPayment');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CIDebtAutoPayment');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CIDEBTAUTOPAYMENT;

  ---------------------------------pr_TransferSellFee------------------------------------------------
  PROCEDURE PR_TRANSFERSELLFEE(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_STRORGORDERID VARCHAR2(100);
    V_BLNVIETNAMESE BOOLEAN;
    V_DBLPROFIT     NUMBER(20, 0);
    V_DBLLOSS       NUMBER(20, 0);
    V_DBLAVLRCVAMT  NUMBER(20, 0);
    V_DBLVATRATE    NUMBER(20, 0);
    V_DBLAVLFEEAMT  NUMBER(20, 0);
    V_DBLFEETEMP    NUMBER(20, 0);
    V_DBLFEEAMT     NUMBER(20, 0);
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_RcvCash_Buyin VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TransferSellFee');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8856';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    --hsx04: Buyin
    SELECT NVL(VARVALUE, 'Y')
      INTO L_RCVCASH_BUYIN
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'RCVCASHTIME_BUYIN_CN';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8856';
    V_STRORGORDERID   := 'orderid';
    V_DBLAVLFEEAMT    := 0;
    V_DBLPROFIT       := 0;
    V_DBLLOSS         := 0;
    FOR REC IN (--ngoc.vu-Jira561: chuyen tu dem so ngay >=Clearday sang dung cleardate
               SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                       CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
                       CASE WHEN CI.COREBANK = 'Y' THEN 1 ELSE 0 END COREBANK,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE,
                       UTF8NUMS.C_CONST_TLTX_TXDESC_8856 || ' ' ||
                       MIN(ODMST.EXECQTTY) || ' ' || MIN(SEC.SYMBOL) || ' ' ||
                       UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                       TO_CHAR(MAX(ODMST.TXDATE), SYSTEMNUMS.C_DATE_FORMAT) TXDESC
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE <= CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND AF.ACCTNO = CI.AFACCTNO
                      --GianhVG add khong thu phi tai khoan ben ngoai
                   AND CF.CUSTATCOM = 'Y'
                      --End GianhVG
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                      TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.CLEARDATE <=TO_DATE(v_strCURRDATE,systemnums.c_date_format)
                   AND ODMST.FEEACR > ODMST.FEEAMT
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RM')
                   AND nvl(ODMST.isbuyin , 'N') like decode (L_RcvCash_Buyin, 'Y', 'N', '%') --HSX04
                 GROUP BY MST.AUTOID,
                          CLR2.SBDATE,
                          MST.AFACCTNO,
                          MST.ACCTNO,
                          CI.COREBANK
                HAVING MIN(MST.CLEARDAY) < (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;
      IF V_STRORGORDERID <> REC.ORGORDERID THEN
        V_STRORGORDERID := REC.ORGORDERID;
        V_DBLAVLFEEAMT  := REC.AVLFEEAMT;
      END IF;
      V_DBLAVLRCVAMT := REC.AMT;
      V_DBLVATRATE   := REC.VATRATE;
      IF V_DBLAVLFEEAMT <= V_DBLAVLRCVAMT THEN
        V_DBLFEETEMP := V_DBLAVLFEEAMT;
      ELSE
        V_DBLFEETEMP := V_DBLAVLRCVAMT;
      END IF;
      IF V_DBLFEETEMP > 0 THEN
        --Set cac field giao dich

        --01   N   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'N';
        L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

        --03   C   ORGORDERID
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
        --04   C   AFACCTNO
        L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('04').TYPE := 'C';
        L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.ACCTNO;
        --06   C   SEACCTNO
        L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
        L_TXMSG.TXFIELDS('06').TYPE := 'C';
        L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
        --07   C   SYMBOL
        L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
        --08   N   AMT
        L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := 0;
        --09   N   QTTY
        L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
        --10   N   RAMT
        L_TXMSG.TXFIELDS('10').DEFNAME := 'RAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := 0;
        --11   N   AAMT
        L_TXMSG.TXFIELDS('11').DEFNAME := 'AAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := 0;
        --12   N   FEEAMT
        L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        IF V_DBLAVLFEEAMT <= V_DBLAVLRCVAMT THEN
          V_DBLFEEAMT    := V_DBLAVLFEEAMT;
          V_DBLAVLFEEAMT := 0;
        ELSE
          V_DBLFEEAMT    := V_DBLAVLRCVAMT;
          V_DBLAVLFEEAMT := V_DBLAVLFEEAMT - V_DBLAVLRCVAMT;
        END IF;
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(V_DBLFEEAMT, 0);

        --13   N   VAT
        L_TXMSG.TXFIELDS('13').DEFNAME := 'VAT';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := ROUND(V_DBLVATRATE * V_DBLFEEAMT, 0);
        --14   N   PROFITAMT
        L_TXMSG.TXFIELDS('14').DEFNAME := 'PROFITAMT';
        L_TXMSG.TXFIELDS('14').TYPE := 'N';
        L_TXMSG.TXFIELDS('14').VALUE := V_DBLPROFIT;
        --15   N   LOSSAMT
        L_TXMSG.TXFIELDS('15').DEFNAME := 'LOSSAMT';
        L_TXMSG.TXFIELDS('15').TYPE := 'N';
        L_TXMSG.TXFIELDS('15').VALUE := V_DBLLOSS;
        --16   N   COSTPRICE
        L_TXMSG.TXFIELDS('16').DEFNAME := 'COSTPRICE';
        L_TXMSG.TXFIELDS('16').TYPE := 'N';
        L_TXMSG.TXFIELDS('16').VALUE := REC.COSTPRICE;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
        L_TXMSG.TXFIELDS('44').TYPE := 'N';
        L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

        --53   N   MICD
        L_TXMSG.TXFIELDS('53').DEFNAME := 'MICD';
        L_TXMSG.TXFIELDS('53').TYPE := 'C';
        L_TXMSG.TXFIELDS('53').VALUE := '';

        --60   N   ISMORTAGE
        L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                          WHEN REC.EXECTYPE = 'MS' THEN
                                           1
                                          ELSE
                                           0
                                        END);

        --31   N   COREBANK
        L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;

        BEGIN
          IF TXPKS_#8856.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 8856: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;
    if P_LASTRUN = 'Y' then
        ---PR_RevertVoucherSellFee
        TXPKS_BATCH.PR_RevertVoucherSellFee(P_BCHMDL,P_ERR_CODE);
    end if;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TransferSellFee');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer sell money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TransferSellFee');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TRANSFERSELLFEE;
--T2-NAMNT
  PROCEDURE PR_TRANSFERSELLFEE_TEMP(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_STRORGORDERID VARCHAR2(100);
    V_BLNVIETNAMESE BOOLEAN;
    V_DBLPROFIT     NUMBER(20, 0);
    V_DBLLOSS       NUMBER(20, 0);
    V_DBLAVLRCVAMT  NUMBER(20, 0);
    V_DBLVATRATE    NUMBER(20, 0);
    V_DBLAVLFEEAMT  NUMBER(20, 0);
    V_DBLFEETEMP    NUMBER(20, 0);
    V_DBLFEEAMT     NUMBER(20, 0);
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
     l_CHGBCHORDERSTARTDATE date;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_TRANSFERSELLFEE_TEMP');
       select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8856';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8856';
    V_STRORGORDERID   := 'orderid';
    V_DBLAVLFEEAMT    := 0;
    V_DBLPROFIT       := 0;
    V_DBLLOSS         := 0;
    FOR REC IN (SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                       CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE
                             WHEN CLR1.HOLIDAY = 'Y' THEN
                              0
                             ELSE
                              1
                           END) WITHHOLIDAY,
                       SUM(CASE
                             WHEN CLR1.HOLIDAY = 'Y' THEN
                              1
                             ELSE
                              1
                           END) WITHOUTHOLIDAY,
                       CASE
                         WHEN CI.COREBANK = 'Y' THEN
                          1
                         ELSE
                          0
                       END COREBANK,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE,
                       UTF8NUMS.C_CONST_TLTX_TXDESC_8856 || ' ' ||
                       MIN(ODMST.EXECQTTY) || ' ' || MIN(SEC.SYMBOL) || ' ' ||
                       UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                       TO_CHAR(MAX(ODMST.TXDATE), SYSTEMNUMS.C_DATE_FORMAT) TXDESC
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE < CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND AF.ACCTNO = CI.AFACCTNO
                      --GianhVG add khong thu phi tai khoan ben ngoai
                   AND CF.CUSTATCOM = 'Y'
                      --End GianhVG
                    and ODMST.TXDATE < l_CHGBCHORDERSTARTDATE -- T10/2015 TTBT T+2 Begin
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND ODMST.FEEACR > ODMST.FEEAMT
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RM')
                 GROUP BY MST.AUTOID,
                          CLR2.SBDATE,
                          MST.AFACCTNO,
                          MST.ACCTNO,
                          CI.COREBANK
                HAVING MIN(MST.CLEARDAY) <= (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;
      IF V_STRORGORDERID <> REC.ORGORDERID THEN
        V_STRORGORDERID := REC.ORGORDERID;
        V_DBLAVLFEEAMT  := REC.AVLFEEAMT;
      END IF;
      V_DBLAVLRCVAMT := REC.AMT;
      V_DBLVATRATE   := REC.VATRATE;
      IF V_DBLAVLFEEAMT <= V_DBLAVLRCVAMT THEN
        V_DBLFEETEMP := V_DBLAVLFEEAMT;
      ELSE
        V_DBLFEETEMP := V_DBLAVLRCVAMT;
      END IF;
      IF V_DBLFEETEMP > 0 THEN
        --Set cac field giao dich

        --01   N   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'N';
        L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

        --03   C   ORGORDERID
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
        --04   C   AFACCTNO
        L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('04').TYPE := 'C';
        L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.ACCTNO;
        --06   C   SEACCTNO
        L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
        L_TXMSG.TXFIELDS('06').TYPE := 'C';
        L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
        --07   C   SYMBOL
        L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
        --08   N   AMT
        L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := 0;
        --09   N   QTTY
        L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
        --10   N   RAMT
        L_TXMSG.TXFIELDS('10').DEFNAME := 'RAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := 0;
        --11   N   AAMT
        L_TXMSG.TXFIELDS('11').DEFNAME := 'AAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := 0;
        --12   N   FEEAMT
        L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        IF V_DBLAVLFEEAMT <= V_DBLAVLRCVAMT THEN
          V_DBLFEEAMT    := V_DBLAVLFEEAMT;
          V_DBLAVLFEEAMT := 0;
        ELSE
          V_DBLFEEAMT    := V_DBLAVLRCVAMT;
          V_DBLAVLFEEAMT := V_DBLAVLFEEAMT - V_DBLAVLRCVAMT;
        END IF;
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(V_DBLFEEAMT, 0);

        --13   N   VAT
        L_TXMSG.TXFIELDS('13').DEFNAME := 'VAT';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := ROUND(V_DBLVATRATE * V_DBLFEEAMT, 0);
        --14   N   PROFITAMT
        L_TXMSG.TXFIELDS('14').DEFNAME := 'PROFITAMT';
        L_TXMSG.TXFIELDS('14').TYPE := 'N';
        L_TXMSG.TXFIELDS('14').VALUE := V_DBLPROFIT;
        --15   N   LOSSAMT
        L_TXMSG.TXFIELDS('15').DEFNAME := 'LOSSAMT';
        L_TXMSG.TXFIELDS('15').TYPE := 'N';
        L_TXMSG.TXFIELDS('15').VALUE := V_DBLLOSS;
        --16   N   COSTPRICE
        L_TXMSG.TXFIELDS('16').DEFNAME := 'COSTPRICE';
        L_TXMSG.TXFIELDS('16').TYPE := 'N';
        L_TXMSG.TXFIELDS('16').VALUE := REC.COSTPRICE;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
        L_TXMSG.TXFIELDS('44').TYPE := 'N';
        L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

        --53   N   MICD
        L_TXMSG.TXFIELDS('53').DEFNAME := 'MICD';
        L_TXMSG.TXFIELDS('53').TYPE := 'C';
        L_TXMSG.TXFIELDS('53').VALUE := '';

        --60   N   ISMORTAGE
        L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                          WHEN REC.EXECTYPE = 'MS' THEN
                                           1
                                          ELSE
                                           0
                                        END);

        --31   N   COREBANK
        L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;

        BEGIN
          IF TXPKS_#8856.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 8856: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;

    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_TRANSFERSELLFEE_TEMP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer sell money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_TRANSFERSELLFEE_TEMP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TRANSFERSELLFEE_TEMP;
--END T2-NAMT
  ---------------------------------pr_ODSettlementtransferMoney------------------------------------------------
  PROCEDURE PR_ODSETTLEMENTTRANSFERMONEY(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2,
                                         P_FROMROW  NUMBER,
                                         P_TOROW    NUMBER,
                                         P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
    L_BUYSECAMT     NUMBER(25, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementtransferMoney');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8865';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8865';
    -- Thuc hien 8865 can theo CLEARDATE
    FOR REC IN (SELECT SUBSTR(CUSTODYCD, 4, 1) CUSTODYCD,
                       MST.AUTOID,
                       MST.DUETYPE,
                       MST.TXDATE,
                       MST.ORGORDERID,
                       MST.CLEARCD,
                       MST.CLEARDAY,
                       MST.AFACCTNO,
                       MST.ACCTNO,
                       CI.ACCTNO CIACCTNO,
                       ROUND(CI.BALANCE, 4) CIBALANCE,
                       ROUND(CI.BAMT, 4) CIBAMT,
                       LEAST(CI.BUYSECAMT, MST.AMT) BUYSECAMT,
                       GREATEST(MST.AMT - OD.NETEXECAMT - OD.CFNETEXECAMT, 0) CIAMT, -- HSX04 MST.AMT CIAMT,
                       OD.FEEAMT,
                       OD.ORDERQTTY ORGORDERQTTY,
                       OD.QUOTEPRICE ORGQUOTEPRICE,
                       OD.FEEACR,
                       TYP.FEERATE,
                       TYP.VATRATE,
                       SEC.PARVALUE,
                       SEC.CODEID,
                       OD.SECUREDAMT,
                       OD.RLSSECURED,
                       SEC.SYMBOL,
                       GREATEST(MST.AMT - OD.NETEXECAMT - OD.CFNETEXECAMT, 0) AMT, -- HSX04 MST.AMT,
                       MST.AAMT,
                       MST.FAMT,
                       GREATEST(MST.QTTY - OD.NETEXECQTTY - OD.CFNETEXECQTTY, 0) QTTY, -- HSX04 MST.QTTY,
                       OD.EXECQTTY SQTTY,
                       MST.AQTTY
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       SBSECURITIES SEC,
                       AFMAST AF,
                       CIMAST CI,
                       CFMAST CF,
                       ODMAST OD,
                       ODTYPE TYP
                 WHERE AF.CUSTID = CF.CUSTID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND MST.DUETYPE = 'SM'
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND CF.CUSTATCOM = 'Y'
                   AND MST.AFACCTNO = AF.ACCTNO
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND MST.ORGORDERID = OD.ORDERID
                   AND OD.ACTYPE = TYP.ACTYPE
                   AND MST.CLEARDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                 ORDER BY CIACCTNO, ORGORDERID, DUETYPE) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      SELECT GREATEST(BUYSECAMT, 0)
        INTO L_BUYSECAMT
        FROM CIMAST
       WHERE ACCTNO = REC.CIACCTNO;
      --Set cac field giao dich
      --01   AUTOID       N
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.CIACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --11   TRFAMT       N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TRFAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.AMT, 0);
      --12   TRFFEE       N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'TRFFEE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.FEEACR, 0);

      --15   CIAMT       N
      L_TXMSG.TXFIELDS('15').DEFNAME := 'CIAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := ROUND(REC.CIAMT, 0);

      --16   BUYSECAMT       N
      L_TXMSG.TXFIELDS('16').DEFNAME := 'BUYSECAMT';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := LEAST(L_BUYSECAMT, REC.CIAMT); --round(rec.BUYSECAMT,0);

      --13   LATE       N
      L_TXMSG.TXFIELDS('13').DEFNAME := 'LATE';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := CASE
                                        WHEN REC.CLEARDAY > 0 THEN
                                         1
                                        ELSE
                                         0
                                      END; -- Neu rec.CLEARDAY -> co tra cham.
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_8865 || ' ' ||
                                      TRIM(TO_CHAR(REC.SQTTY,
                                                   '999,999,999,999,999')) || ' ' ||
                                      REC.SYMBOL || ' ' ||
                                      UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                      TO_CHAR(REC.TXDATE, 'DD/MM/RRRR');
      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

      BEGIN
        IF TXPKS_#8865.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8865: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementtransferMoney');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementtransferMoney');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTTRANSFERMONEY;

  ---------------------------------pr_ODPreSettlementTrfMoney------------------------------------------------
  PROCEDURE PR_ODPRESETTLEMENTTRFMONEY(P_BCHMDL   VARCHAR,
                                       P_ERR_CODE OUT VARCHAR2,
                                       P_FROMROW  NUMBER,
                                       P_TOROW    NUMBER,
                                       P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODPreSettlementTrfMoney');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8889';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8889';
    -- Thuc hien 8865 can theo CLEARDATE - va lenh chua sinh giao dich 8889 trong tllog
    FOR REC IN (SELECT *
                  FROM (SELECT SUBSTR(CUSTODYCD, 4, 1) CUSTODYCD,
                               MST.AUTOID,
                               MST.DUETYPE,
                               MST.TXDATE,
                               MST.ORGORDERID,
                               MST.CLEARCD,
                               MST.CLEARDAY,
                               MST.AFACCTNO,
                               MST.ACCTNO,
                               CI.ACCTNO CIACCTNO,
                               ROUND(CI.BALANCE, 4) CIBALANCE,
                               ROUND(CI.BAMT, 4) CIBAMT,
                               OD.FEEAMT,
                               OD.ORDERQTTY ORGORDERQTTY,
                               OD.QUOTEPRICE ORGQUOTEPRICE,
                               OD.FEEACR,
                               TYP.FEERATE,
                               TYP.VATRATE,
                               SEC.PARVALUE,
                               SEC.CODEID,
                               OD.SECUREDAMT,
                               OD.RLSSECURED,
                               SEC.SYMBOL,
                               --MST.AMT,
                               MST.AMT - OD.Netexecamt - OD.Cfnetexecamt AMT, -- HSX04
                               MST.AAMT,
                               MST.FAMT,
                               --MST.QTTY,
                               MST.QTTY - OD.Netexecqtty - OD.Cfnetexecqtty QTTY, --HSX04
                               OD.EXECQTTY SQTTY,
                               MST.AQTTY
                          FROM (SELECT *
                                  FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                                 WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                               SBSECURITIES SEC,
                               AFMAST AF,
                               CIMAST CI,
                               CFMAST CF,
                               ODMAST OD,
                               ODTYPE TYP
                         WHERE AF.CUSTID = CF.CUSTID
                           AND MST.CODEID = SEC.CODEID
                           AND SEC.TRADEPLACE <> '003'
                           AND MST.DUETYPE = 'SM'
                           AND MST.STATUS = 'N'
                           AND MST.DELTD <> 'Y'
                           AND CF.CUSTATCOM = 'Y'
                           AND MST.AFACCTNO = AF.ACCTNO
                           AND AF.ACCTNO = CI.AFACCTNO
                           AND MST.ORGORDERID = OD.ORDERID
                           AND OD.ACTYPE = TYP.ACTYPE
                           AND MST.TXDATE =
                               TO_DATE(V_STRCURRDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)
                           AND NOT EXISTS
                         (SELECT 1
                                  FROM TLLOG
                                 WHERE TLLOG.TLTXCD = '8889'
                                   AND TLLOG.MSGACCT = MST.ORGORDERID)
                        --ORDER BY CIACCTNO, ORGORDERID, DUETYPE
                        UNION
                        SELECT SUBSTR(CUSTODYCD, 4, 1) CUSTODYCD,
                               MST.AUTOID,
                               MST.DUETYPE,
                               MST.TXDATE,
                               MST.ORGORDERID,
                               MST.CLEARCD,
                               MST.CLEARDAY,
                               MST.AFACCTNO,
                               MST.ACCTNO,
                               CI.ACCTNO CIACCTNO,
                               ROUND(CI.BALANCE, 4) CIBALANCE,
                               ROUND(CI.BAMT, 4) CIBAMT,
                               OD.FEEAMT,
                               OD.ORDERQTTY ORGORDERQTTY,
                               OD.QUOTEPRICE ORGQUOTEPRICE,
                               OD.FEEACR,
                               TYP.FEERATE,
                               TYP.VATRATE,
                               SEC.PARVALUE,
                               SEC.CODEID,
                               OD.SECUREDAMT,
                               OD.RLSSECURED,
                               SEC.SYMBOL,
                               --MST.AMT,
                               MST.AMT- OD.Netexecamt - OD.Cfnetexecamt AMT, -- HSX04
                               MST.AAMT,
                               MST.FAMT,
                               --MST.QTTY,
                               MST.QTTY - OD.Netexecqtty - OD.Cfnetexecqtty QTTY, -- HSX04
                               OD.EXECQTTY SQTTY,
                               MST.AQTTY
                          FROM (SELECT *
                                  FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                                 WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                               SBSECURITIES SEC,
                               AFMAST AF,
                               CIMAST CI,
                               CFMAST CF,
                               ODMAST OD,
                               ODTYPE TYP,
                               TLLOG TL
                         WHERE AF.CUSTID = CF.CUSTID
                           AND MST.CODEID = SEC.CODEID
                           AND SEC.TRADEPLACE <> '003'
                           AND MST.DUETYPE = 'SM'
                           AND MST.STATUS = 'N'
                           AND MST.DELTD <> 'Y'
                           AND CF.CUSTATCOM = 'Y'
                           AND MST.AFACCTNO = AF.ACCTNO
                           AND AF.ACCTNO = CI.AFACCTNO
                           AND MST.ORGORDERID = OD.ORDERID
                           AND OD.ACTYPE = TYP.ACTYPE
                              --and MST.txdate = TO_DATE (v_strCURRDATE, systemnums.c_date_format)
                           AND OD.TXNUM = TL.TXNUM
                           AND OD.TXDATE = TL.TXDATE
                           AND OD.TXDATE <
                               TO_DATE(V_STRCURRDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)
                           AND NOT EXISTS
                         (SELECT 1
                                  FROM TLLOG
                                 WHERE TLLOG.TLTXCD = '8889'
                                   AND TLLOG.MSGACCT = MST.ORGORDERID)
                        --ORDER BY CIACCTNO, ORGORDERID, DUETYPE
                        )
                 ORDER BY CIACCTNO, ORGORDERID, DUETYPE) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      --Set cac field giao dich
      --01   AUTOID       N
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.CIACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --11   TRFAMT       N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TRFAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.AMT, 0);
      --12   TRFFEE       N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'TRFFEE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.FEEACR, 0);
      --13   LATE       N
      L_TXMSG.TXFIELDS('13').DEFNAME := 'LATE';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := CASE
                                        WHEN REC.CLEARDAY > 0 THEN
                                         1
                                        ELSE
                                         0
                                      END; -- Neu rec.CLEARDAY -> co tra cham.
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_8865 || ' ' ||
                                      TRIM(TO_CHAR(REC.SQTTY,
                                                   '999,999,999,999,999')) || ' ' ||
                                      REC.SYMBOL || ' ' ||
                                      UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                      TO_CHAR(REC.TXDATE, 'DD/MM/RRRR');
      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

      BEGIN
        IF TXPKS_#8889.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8889: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODPreSettlementTrfMoney');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on Pre transfer money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODPreSettlementTrfMoney');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODPRESETTLEMENTTRFMONEY;

  ---------------------------------pr_DFDealDrawndown------------------------------------------------
  PROCEDURE PR_DFDEALDRAWNDOWN(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG          TX.MSG_RECTYPE;
    V_STRCURRDATE    VARCHAR2(20);
    V_STRDESC        VARCHAR2(1000);
    V_STREN_DESC     VARCHAR2(1000);
    V_BLNVIETNAMESE  BOOLEAN;
    V_STRDFACCTNO    VARCHAR2(50);
    L_ERR_PARAM      VARCHAR2(300);
    L_MAXROW         NUMBER(20, 0);
    V_DBLREMAINLIMIT NUMBER(20, 4);
    V_DBLDFAMT       NUMBER(20, 4);
    V_DBLDFQTTY      NUMBER(20);
    V_DBLDFRATE      NUMBER;
    V_DBLDFPRICE     NUMBER(20, 4);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFDealDrawndown');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2670';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2670';
    FOR REC IN (SELECT MST.*,
                       NVL(BSK.REFPRICE, 0) REFPRICE,
                       NVL(BSK.DFPRICE, 0) DFPRICE,
                       NVL(BSK.TRIGGERPRICE, 0) TRIGGERPRICE,
                       NVL(BSK.DFRATE, 0) DFRATE,
                       NVL(BSK.IRATE, 0) IRATE,
                       NVL(BSK.MRATE, 0) MRATE,
                       NVL(BSK.LRATE, 0) LRATE,
                       NVL(BSK.CALLTYPE, 'P') CALLTYPE
                  FROM (SELECT CF.CUSTODYCD,
                               CF.FULLNAME,
                               CF.ADDRESS,
                               CF.IDCODE,
                               DFT.ACTYPE DFTYPE,
                               DFT.BASKETID,
                               STS.AFACCTNO,
                               STS.CODEID,
                               STS.CLEARDAY,
                               QTTY - AQTTY QTTY,
                               ROUND(AMT / QTTY * (QTTY - AQTTY), 0) AMT,
                               ROUND(AMT / QTTY, 0) PRICE,
                               STS.AUTOID,
                               (CASE
                                 WHEN DFT.RRTYPE = 'O' THEN
                                  1
                                 ELSE
                                  0
                               END) CIDRAWNDOWN,
                               (CASE
                                 WHEN DFT.RRTYPE = 'B' THEN
                                  1
                                 ELSE
                                  0
                               END) BANKDRAWNDOWN,
                               (CASE
                                 WHEN DFT.RRTYPE = 'C' THEN
                                  1
                                 ELSE
                                  0
                               END) CMPDRAWNDOWN,
                               (CASE
                                 WHEN DFT.LIMITCHK = 'Y' THEN
                                  1
                                 ELSE
                                  0
                               END) LIMITCHECK,
                               (CASE
                                 WHEN DFT.RRTYPE = 'C' THEN
                                  ''
                                 WHEN DFT.RRTYPE = 'O' THEN
                                  DFT.CIACCTNO
                                 WHEN DFT.RRTYPE = 'B' THEN
                                  DFT.CUSTBANK
                                 ELSE
                                  ''
                               END) RRID
                          FROM VW_STSCHD_DEALGROUP STS,
                               AFMAST              AF,
                               AFTYPE              AFT,
                               DFTYPE              DFT,
                               MRTYPE              MRT,
                               CFMAST              CF
                         WHERE STS.AFACCTNO = AF.ACCTNO
                           AND AF.ACTYPE = AFT.ACTYPE
                           AND AF.CUSTID = CF.CUSTID
                           AND AFT.DFTYPE = DFT.ACTYPE
                           AND AFT.MRTYPE = MRT.ACTYPE --and sts.deltd <> 'Y'
                           AND MRT.MRTYPE = 'L'
                           AND STS.DUETYPE = 'RS'
                           AND STS.TXDATE =
                               TO_DATE(V_STRCURRDATE,
                                       SYSTEMNUMS.C_DATE_FORMAT)
                           AND QTTY - AQTTY > 0) MST,
                       (SELECT DF.*, SB.CODEID
                          FROM DFBASKET DF, SBSECURITIES SB
                         WHERE DF.SYMBOL = SB.SYMBOL) BSK
                 WHERE MST.BASKETID = BSK.BASKETID
                   AND MST.CODEID = BSK.CODEID
                   AND BSK.DFRATE > 0

                ) LOOP
      -- AnhVT Added
      V_DBLDFRATE  := ROUND(LEAST(REC.DFRATE, REC.DFPRICE / REC.PRICE * 100),
                            4);
      V_DBLDFPRICE := LEAST(ROUND(REC.PRICE * REC.DFRATE / 100, 4),
                            REC.DFPRICE);
      V_DBLDFQTTY  := REC.QTTY;
      SELECT ROUND(GREATEST(LEAST(AF.MRCRLIMITMAX - DFODAMT,
                                  AF.MRCRLIMITMAX - DFODAMT + AF.ADVANCELINE -
                                  ODAMT),
                            0),
                   0) DEALLIMIT
        INTO V_DBLREMAINLIMIT
        FROM AFMAST AF, CIMAST CI
       WHERE AF.ACCTNO = CI.AFACCTNO
         AND AF.ACCTNO = REC.AFACCTNO;

      --if v_dblRemainLimit < rec.amt then
      --    v_dblDFAmt := v_dblRemainLimit;
      --    v_dblDFQtty := floor(v_dblDFAmt/least(rec.dfprice, rec.price*rec.dfrate/100));
      --else
      --    v_dblDFAmt := rec.amt;
      --    v_dblDFQtty := rec.qtty;
      --end if;
      IF V_DBLREMAINLIMIT < ROUND(V_DBLDFPRICE * V_DBLDFQTTY, 0) THEN
        V_DBLDFAMT   := V_DBLREMAINLIMIT;
        V_DBLDFQTTY := CASE
                         WHEN V_DBLDFPRICE <= 0 THEN
                          0
                         ELSE
                          CEIL(V_DBLDFAMT / V_DBLDFPRICE)
                       END;
        V_DBLDFPRICE := CASE
                          WHEN V_DBLDFQTTY <= 0 THEN
                           0
                          ELSE
                           ROUND(V_DBLDFAMT / V_DBLDFQTTY, 4)
                        END;
        V_DBLDFAMT   := ROUND(V_DBLDFPRICE * V_DBLDFQTTY, 0);
      ELSE
        V_DBLDFAMT := ROUND(V_DBLDFPRICE * V_DBLDFQTTY, 0);
      END IF;
      -- AnhVT Ended
      IF V_DBLDFAMT > 0 THEN
        --Neu co giai Ngan thi fill vao giao dich thuc hien giai ngan.
        --Set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
        --Xac dinh tai khoan DF
        SELECT SEQ_DFMAST.NEXTVAL DFACCTNO INTO V_STRDFACCTNO FROM DUAL;
        V_STRDFACCTNO := SUBSTR('000000' || V_STRDFACCTNO,
                                LENGTH('000000' || V_STRDFACCTNO) - 5,
                                6);
        V_STRDFACCTNO := L_TXMSG.BRID || SUBSTR(TO_CHAR(L_TXMSG.TXDATE,
                                                        SYSTEMNUMS.C_DATE_FORMAT),
                                                1,
                                                2) ||
                         SUBSTR(TO_CHAR(L_TXMSG.TXDATE,
                                        SYSTEMNUMS.C_DATE_FORMAT),
                                4,
                                2) || SUBSTR(TO_CHAR(L_TXMSG.TXDATE,
                                                     SYSTEMNUMS.C_DATE_FORMAT),
                                             9,
                                             2) || V_STRDFACCTNO;
        --Set cac field giao dich
        --01   CODEID         C
        L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
        L_TXMSG.TXFIELDS('01').TYPE := 'C';
        L_TXMSG.TXFIELDS('01').VALUE := REC.CODEID;
        --02    ACCTNO      C
        L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('02').TYPE := 'C';
        L_TXMSG.TXFIELDS('02').VALUE := V_STRDFACCTNO;
        --03   AFACCTNO       C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;
        --04   ACTYPE         C
        L_TXMSG.TXFIELDS('04').DEFNAME := 'ACTYPE';
        L_TXMSG.TXFIELDS('04').TYPE := 'C';
        L_TXMSG.TXFIELDS('04').VALUE := REC.DFTYPE;
        --05   SEACCTNO       C
        L_TXMSG.TXFIELDS('05').DEFNAME := 'SEACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO || REC.CODEID;
        --06   PRICE          N
        L_TXMSG.TXFIELDS('06').DEFNAME := 'PRICE';
        L_TXMSG.TXFIELDS('06').TYPE := 'N';
        L_TXMSG.TXFIELDS('06').VALUE := REC.PRICE;
        --07   DFRATE         N
        L_TXMSG.TXFIELDS('07').DEFNAME := 'DFRATE';
        L_TXMSG.TXFIELDS('07').TYPE := 'N';
        L_TXMSG.TXFIELDS('07').VALUE := V_DBLDFRATE;
        --08   MRATE          N
        L_TXMSG.TXFIELDS('08').DEFNAME := 'MRATE';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := REC.MRATE;
        --09   LRATE          N
        L_TXMSG.TXFIELDS('09').DEFNAME := 'LRATE';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := REC.LRATE;
        --10   DFPRICE        N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'DFPRICE';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := V_DBLDFPRICE;
        --11   TRIGGERPRICE   N
        L_TXMSG.TXFIELDS('11').DEFNAME := 'TRIGGERPRICE';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := CASE
                                          WHEN REC.TRIGGERPRICE > 0 THEN
                                           REC.TRIGGERPRICE
                                          ELSE
                                           ROUND(REC.PRICE * REC.LRATE / 100, 4)
                                        END;
        --12   AVLQTTY        N
        L_TXMSG.TXFIELDS('12').DEFNAME := 'AVLQTTY';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := 0;
        --13   RCVQTTY        N
        L_TXMSG.TXFIELDS('13').DEFNAME := 'RCVQTTY';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := V_DBLDFQTTY;
        --14   IRATE          N
        L_TXMSG.TXFIELDS('14').DEFNAME := 'IRATE';
        L_TXMSG.TXFIELDS('14').TYPE := 'N';
        L_TXMSG.TXFIELDS('14').VALUE := REC.IRATE;
        --15   CALLTYPE       C
        L_TXMSG.TXFIELDS('15').DEFNAME := 'CALLTYPE';
        L_TXMSG.TXFIELDS('15').TYPE := 'C';
        L_TXMSG.TXFIELDS('15').VALUE := REC.CALLTYPE;
        --16   AUTODRAWNDOWN       C
        L_TXMSG.TXFIELDS('16').DEFNAME := 'AUTODRAWNDOWN';
        L_TXMSG.TXFIELDS('16').TYPE := 'C';
        L_TXMSG.TXFIELDS('16').VALUE := 1;
        --18   RLSAMT        N
        L_TXMSG.TXFIELDS('18').DEFNAME := 'RLSAMT';
        L_TXMSG.TXFIELDS('18').TYPE := 'N';
        L_TXMSG.TXFIELDS('18').VALUE := V_DBLDFAMT;
        --22   BLOCKQTTY      N
        L_TXMSG.TXFIELDS('22').DEFNAME := 'BLOCKQTTY';
        L_TXMSG.TXFIELDS('22').TYPE := 'N';
        L_TXMSG.TXFIELDS('22').VALUE := 0;
        --23   CARCVQTTY      N
        L_TXMSG.TXFIELDS('23').DEFNAME := 'CARCVQTTY';
        L_TXMSG.TXFIELDS('23').TYPE := 'N';
        L_TXMSG.TXFIELDS('23').VALUE := 0;
        --25   REFPRICETYPE      C
        L_TXMSG.TXFIELDS('25').DEFNAME := 'REFPRICETYPE';
        L_TXMSG.TXFIELDS('25').TYPE := 'C';
        L_TXMSG.TXFIELDS('25').VALUE := 'BP';
        --29   REF            C
        L_TXMSG.TXFIELDS('29').DEFNAME := 'REF';
        L_TXMSG.TXFIELDS('29').TYPE := 'C';
        L_TXMSG.TXFIELDS('29').VALUE := V_STRCURRDATE || REC.AFACCTNO ||
                                        REC.CODEID || REC.CLEARDAY; --rec.autoid;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := 'Giai ngan vay ML ' ||
                                        V_STRDFACCTNO;

        --40    QTTY            N
        L_TXMSG.TXFIELDS('40').DEFNAME := 'QTTY';
        L_TXMSG.TXFIELDS('40').TYPE := 'N';
        L_TXMSG.TXFIELDS('40').VALUE := V_DBLDFQTTY;

        --41    AMT             N
        L_TXMSG.TXFIELDS('41').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('41').TYPE := 'N';
        L_TXMSG.TXFIELDS('41').VALUE := V_DBLDFAMT;
        --50    RRID            C
        L_TXMSG.TXFIELDS('50').DEFNAME := 'RRID';
        L_TXMSG.TXFIELDS('50').TYPE := 'C';
        L_TXMSG.TXFIELDS('50').VALUE := REC.RRID;
        --51    CIDRAWNDOWN     C
        L_TXMSG.TXFIELDS('51').DEFNAME := 'CIDRAWNDOWN';
        L_TXMSG.TXFIELDS('51').TYPE := 'C';
        L_TXMSG.TXFIELDS('51').VALUE := REC.CIDRAWNDOWN;
        --52    BANKDRAWNDOWN   C
        L_TXMSG.TXFIELDS('52').DEFNAME := 'BANKDRAWNDOWN';
        L_TXMSG.TXFIELDS('52').TYPE := 'C';
        L_TXMSG.TXFIELDS('52').VALUE := REC.BANKDRAWNDOWN;
        --53    CMPDRAWNDOWN    C
        L_TXMSG.TXFIELDS('53').DEFNAME := 'CMPDRAWNDOWN';
        L_TXMSG.TXFIELDS('53').TYPE := 'C';
        L_TXMSG.TXFIELDS('53').VALUE := REC.CMPDRAWNDOWN;
        --57    CUSTNAME        C
        L_TXMSG.TXFIELDS('57').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('57').TYPE := 'C';
        L_TXMSG.TXFIELDS('57').VALUE := REC.FULLNAME;
        --58    ADDRESS         C
        L_TXMSG.TXFIELDS('58').DEFNAME := 'ADDRESS';
        L_TXMSG.TXFIELDS('58').TYPE := 'C';
        L_TXMSG.TXFIELDS('58').VALUE := REC.ADDRESS;
        --59    LICENSE         C
        L_TXMSG.TXFIELDS('59').DEFNAME := 'LICENSE';
        L_TXMSG.TXFIELDS('59').TYPE := 'C';
        L_TXMSG.TXFIELDS('59').VALUE := REC.IDCODE;
        --88    CUSTODYCD         C
        L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
        L_TXMSG.TXFIELDS('88').TYPE := 'C';
        L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
        --99    LIMITCHECK    C
        L_TXMSG.TXFIELDS('99').DEFNAME := 'LIMITCHECK';
        L_TXMSG.TXFIELDS('99').TYPE := 'C';
        L_TXMSG.TXFIELDS('99').VALUE := REC.LIMITCHECK;

        BEGIN
          IF TXPKS_#2670.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 2670: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;

    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFDealDrawndown');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFDealDrawndown');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFDEALDRAWNDOWN;

  ---------------------------------pr_DFPayment------------------------------------------------
  PROCEDURE PR_DFPAYMENT(P_BCHMDL   VARCHAR,
                         P_ERR_CODE OUT VARCHAR2,
                         P_FROMROW  NUMBER,
                         P_TOROW    NUMBER,
                         P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_DBLPPRINOVD   NUMBER(20, 4);
    V_DBLPPRINNML   NUMBER(20, 4);
    V_DBLPINTNMLOVD NUMBER(20, 4);
    V_DBLPINTOVDACR NUMBER(20, 4);
    V_DBLPINTDUE    NUMBER(20, 4);
    V_DBLPINTNMLACR NUMBER(20, 4);
    V_DBLPFEEPAID   NUMBER(20, 4);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFPayment');
    P_LASTRUN := 'Y';
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2660';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2660';
    FOR REC IN (SELECT STS.AUTOID,
                       DF.FULLNAME,
                       DF.ADDRESS,
                       DF.IDCODE,
                       DF.RRID,
                       DF.CIDRAWNDOWN,
                       DF.BANKDRAWNDOWN,
                       DF.CMPDRAWNDOWN,
                       DF.LIMITCHECK,
                       DF.ACCTNO,
                       DF.BQTTY,
                       DF.LNACCTNO,
                       DF.AFACCTNO,
                       DF.LNTYPE,
                       STS.QTTY - STS.AQTTY QTTY,
                       DF.ODAMT,
                       DF.PRINOVD,
                       DF.PRINNML,
                       DF.INTNMLOVD,
                       DF.INTOVDACR,
                       DF.INTDUE,
                       DF.INTNMLACR,
                       DF.AVLFEEAMT FEEPAID,
                       ROUND((STS.QTTY - STS.AQTTY + DF.RLSQTTY) * DF.AMT /
                             (DF.REMAINQTTY + DF.RLSQTTY) - DF.RLSAMT +
                             DF.DEALFEE,
                             4) PAIDAMT,
                       UTF8NUMS.C_CONST_TLTX_TXDESC_2660 || ' ' ||
                       DF.DESCRIPTION DES
                  FROM STSCHD STS, ODMAST OD, V_GETDEALINFO DF
                 WHERE DF.BQTTY > 0
                   AND STS.ORGORDERID = OD.ORDERID
                   AND STS.QTTY - STS.AQTTY > 0
                   AND OD.DFACCTNO = DF.ACCTNO
                   AND STS.STATUS = 'C'
                   AND STS.DUETYPE = 'RM'
                   AND STS.DELTD <> 'Y'
                   AND OD.EXECTYPE = 'MS') LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh cac gia tri tra no
      --1.Uu tien tra lai qua han
      V_DBLPINTNMLOVD := ROUND(GREATEST(LEAST(REC.PAIDAMT, REC.INTNMLOVD),
                                        0),
                               0);
      --2.Tra lai cong don qua han
      V_DBLPINTOVDACR := ROUND(GREATEST(LEAST(REC.PAIDAMT - V_DBLPINTNMLOVD,
                                              REC.INTOVDACR),
                                        0),
                               0);
      --3.Tra lai den han
      V_DBLPINTDUE := ROUND(GREATEST(LEAST(REC.PAIDAMT - V_DBLPINTNMLOVD -
                                           V_DBLPINTOVDACR,
                                           REC.INTDUE),
                                     0),
                            0);
      --4.Tra lai cong don
      V_DBLPINTNMLACR := ROUND(GREATEST(LEAST(REC.PAIDAMT - V_DBLPINTNMLOVD -
                                              V_DBLPINTOVDACR -
                                              V_DBLPINTDUE,
                                              REC.INTNMLACR),
                                        0),
                               0);
      --5.Tra goc qua han
      V_DBLPPRINOVD := ROUND(GREATEST(LEAST(REC.PAIDAMT - V_DBLPINTNMLOVD -
                                            V_DBLPINTOVDACR - V_DBLPINTDUE -
                                            V_DBLPINTNMLACR,
                                            REC.PRINOVD),
                                      0),
                             0);
      --6.Tra goc trong han
      V_DBLPPRINNML := ROUND(GREATEST(LEAST(REC.PAIDAMT - V_DBLPINTNMLOVD -
                                            V_DBLPINTOVDACR - V_DBLPINTDUE -
                                            V_DBLPINTNMLACR - V_DBLPPRINOVD,
                                            REC.PRINNML),
                                      0),
                             0);
      --7.Tra phi
      V_DBLPFEEPAID := ROUND(GREATEST(LEAST(REC.PAIDAMT - V_DBLPINTNMLOVD -
                                            V_DBLPINTOVDACR - V_DBLPINTDUE -
                                            V_DBLPINTNMLACR - V_DBLPPRINOVD -
                                            V_DBLPPRINNML,
                                            REC.PRINNML),
                                      0),
                             0);
      --Set cac field giao dich
      --01   AUTOID       N
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;
      --02   ACCTNO       C
      L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.ACCTNO;
      --03   LNACCTNO     C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'LNACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.LNACCTNO;
      --05   AFACCTNO     C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --07   LNTYPE       C
      L_TXMSG.TXFIELDS('07').DEFNAME := 'LNTYPE';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.LNTYPE;
      --10   QTTY       N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.QTTY;
      --41   ODAMT          N
      L_TXMSG.TXFIELDS('41').DEFNAME := 'ODAMT';
      L_TXMSG.TXFIELDS('41').TYPE := 'N';
      L_TXMSG.TXFIELDS('41').VALUE := ROUND(REC.ODAMT, 0);
      --45   AMT          N
      L_TXMSG.TXFIELDS('45').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('45').TYPE := 'N';
      L_TXMSG.TXFIELDS('45').VALUE := ROUND(REC.PAIDAMT, 0);
      --63   PPRINOVD     N
      L_TXMSG.TXFIELDS('63').DEFNAME := 'PPRINOVD';
      L_TXMSG.TXFIELDS('63').TYPE := 'N';
      L_TXMSG.TXFIELDS('63').VALUE := V_DBLPPRINOVD;
      --65   PPRINNML     N
      L_TXMSG.TXFIELDS('65').DEFNAME := 'PPRINNML';
      L_TXMSG.TXFIELDS('65').TYPE := 'N';
      L_TXMSG.TXFIELDS('65').VALUE := V_DBLPPRINNML;
      --72   PINTNMLOVD   N
      L_TXMSG.TXFIELDS('72').DEFNAME := 'PINTNMLOVD';
      L_TXMSG.TXFIELDS('72').TYPE := 'N';
      L_TXMSG.TXFIELDS('72').VALUE := V_DBLPINTNMLOVD;
      --74   PINTOVDACR   N
      L_TXMSG.TXFIELDS('74').DEFNAME := 'PINTOVDACR';
      L_TXMSG.TXFIELDS('74').TYPE := 'N';
      L_TXMSG.TXFIELDS('74').VALUE := V_DBLPINTOVDACR;
      --77   PINTDUE      N
      L_TXMSG.TXFIELDS('77').DEFNAME := 'PINTDUE';
      L_TXMSG.TXFIELDS('77').TYPE := 'N';
      L_TXMSG.TXFIELDS('77').VALUE := V_DBLPINTDUE;
      --80   PINTNMLACR   N
      L_TXMSG.TXFIELDS('80').DEFNAME := 'PINTNMLACR';
      L_TXMSG.TXFIELDS('80').TYPE := 'N';
      L_TXMSG.TXFIELDS('80').VALUE := V_DBLPINTNMLACR;
      --90   PFEEPAID     N
      L_TXMSG.TXFIELDS('90').DEFNAME := 'PFEEPAID';
      L_TXMSG.TXFIELDS('90').TYPE := 'N';
      L_TXMSG.TXFIELDS('90').VALUE := V_DBLPFEEPAID;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := REC.DES;
      --95    RRID            C
      L_TXMSG.TXFIELDS('95').DEFNAME := 'RRID';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.RRID;
      --96    CIDRAWNDOWN     C
      L_TXMSG.TXFIELDS('96').DEFNAME := 'CIDRAWNDOWN';
      L_TXMSG.TXFIELDS('96').TYPE := 'C';
      L_TXMSG.TXFIELDS('96').VALUE := REC.CIDRAWNDOWN;
      --97    BANKDRAWNDOWN   C
      L_TXMSG.TXFIELDS('97').DEFNAME := 'BANKDRAWNDOWN';
      L_TXMSG.TXFIELDS('97').TYPE := 'C';
      L_TXMSG.TXFIELDS('97').VALUE := REC.BANKDRAWNDOWN;
      --98    CMPDRAWNDOWN    C
      L_TXMSG.TXFIELDS('98').DEFNAME := 'CMPDRAWNDOWN';
      L_TXMSG.TXFIELDS('98').TYPE := 'C';
      L_TXMSG.TXFIELDS('98').VALUE := REC.CMPDRAWNDOWN;
      --98    LIMITCHECK    C
      L_TXMSG.TXFIELDS('99').DEFNAME := 'LIMITCHECK';
      L_TXMSG.TXFIELDS('99').TYPE := 'C';
      L_TXMSG.TXFIELDS('99').VALUE := REC.LIMITCHECK;

      BEGIN
        IF TXPKS_#2660.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2660: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFPayment');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFPayment');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFPAYMENT;

  ---------------------------------pr_DFDueAutoPayment------------------------------------------------
  PROCEDURE PR_DFDUEAUTOPAYMENT(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_DBLPPRINOVD   NUMBER(20, 4);
    L_DBLPPRINNML   NUMBER(20, 4);
    L_DBLPINTNMLOVD NUMBER(20, 4);
    L_DBLPINTOVDACR NUMBER(20, 4);
    L_DBLPINTDUE    NUMBER(20, 4);
    L_DBLPINTNMLACR NUMBER(20, 4);
    L_DBLPFEEPAID   NUMBER(20, 4);
    L_DBLPDFQTTY    NUMBER(20, 4);
    L_DBLPRCVQTTY   NUMBER(20, 4);
    L_DBLPCARCVQTTY NUMBER(20, 4);
    L_DBLPBLOCKQTTY NUMBER(20, 4);
    L_DBLQTTY       NUMBER(20, 4);
    L_DBLRLSQTTY    NUMBER(20, 4);
    L_DBLAMOUNT     NUMBER;
    L_DBLPRINAMOUNT NUMBER;
    L_DBLINTAMOUNT  NUMBER;
    V_DBLCIBAL      NUMBER;

    L_CIMASTCHECK_ARR TXPKS_CHECK.CIMASTCHECK_ARRTYPE;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFDueAutoPayment');
    P_LASTRUN := 'Y';
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM LNMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2642';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2642';
    FOR REC IN (SELECT SB.TRADELOT,
                       TO_CHAR(DF.RLSDATE, 'DD/MM/YYYY') RLSDATE,
                       DF.DEALPRINAMT,
                       DF.TXDATE,
                       DF.ACCTNO,
                       DF.CODEID,
                       DF.LNACCTNO,
                       DF.AFACCTNO,
                       DF.LNTYPE,
                       DF.PRINOVD,
                       DF.PRINNML,
                       DF.INTNMLOVD,
                       DF.INTOVDACR,
                       DF.DFREF,
                       CHD.OVERDUEDATE,
                       DF.INTDUE,
                       DF.INTNMLACR,
                       DF.AVLFEEAMT,
                       DF.DFQTTY DFTRADING,
                       DF.RCVQTTY,
                       DF.CARCVQTTY,
                       DF.BLOCKQTTY,
                       DF.ODAMT,
                       DF.BQTTY,
                       0 SECURED,
                       DF.REMAINQTTY,
                       DF.RLSQTTY,
                       DF.RLSAMT,
                       DF.DEALAMT,
                       DF.DEALFEE,
                       DF.FULLNAME,
                       DF.ADDRESS,
                       DF.IDCODE,
                       DF.CUSTODYCD,
                       DF.RRID,
                       DF.CIDRAWNDOWN,
                       DF.BANKDRAWNDOWN,
                       DF.CMPDRAWNDOWN,
                       ROUND(DF.INTNMLACR + DF.INTNMLOVD + DF.INTOVDACR +
                             DF.INTDUE + DF.PRINOVD + DF.PRINNML +
                             DF.AVLFEEAMT,
                             0) AMOUNT,
                       DF.PRINNML + DF.PRINOVD PRINAMOUNT,
                       DF.INTNMLACR + DF.INTNMLOVD + DF.INTOVDACR +
                       DF.INTDUE + DF.AVLFEEAMT INTAMOUNT
                  FROM (SELECT V.*, NVL(NML, 0) DUEAMT
                          FROM V_GETDEALINFO V,
                               (SELECT S.ACCTNO, SUM(NML) NML, M.TRFACCTNO
                                  FROM LNSCHD S,
                                       (SELECT *
                                          FROM (SELECT A.*, ROWNUM ID
                                                  FROM LNMAST A)
                                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) M
                                 WHERE S.OVERDUEDATE =
                                       TO_DATE((SELECT VARVALUE
                                                 FROM SYSVAR
                                                WHERE GRNAME = 'SYSTEM'
                                                  AND VARNAME = 'CURRDATE'),
                                               'DD/MM/YYYY')
                                   AND S.NML > 0
                                   AND S.REFTYPE IN ('P')
                                   AND S.ACCTNO = M.ACCTNO
                                   AND M.STATUS NOT IN ('P', 'R', 'C')
                                 GROUP BY S.ACCTNO, M.TRFACCTNO
                                 ORDER BY S.ACCTNO) STS
                         WHERE V.LNACCTNO = STS.ACCTNO(+)) DF,
                       CIMAST CI,
                       SECURITIES_INFO SB,
                       LNSCHD CHD,
                       (SELECT SUM(ADVAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV
                 WHERE (DF.PRINOVD + DF.OPRINOVD + DF.DUEAMT > 0 OR
                       SB.BASICPRICE <= DF.TRIGGERPRICE OR
                       DF.FLAGTRIGGER = 'T')
                      --AND DF.TXDATE>=TO_DATE('31/05/2010','DD/MM/YYYY') --CHI XU LY CHO DU LIEU SAU CONVERT
                   AND DF.AFACCTNO = CI.ACCTNO
                   AND CI.BALANCE + NVL(ADV.AVLADVANCE, 0) > 0
                   AND DF.INTNMLACR + DF.INTNMLOVD + DF.INTOVDACR +
                       DF.INTDUE + DF.PRINOVD + DF.PRINNML + DF.AVLFEEAMT > 0
                   AND DF.CODEID = SB.CODEID
                   AND DF.LNACCTNO = CHD.ACCTNO
                   AND CHD.REFTYPE IN ('P', 'GP')
                   AND CI.ACCTNO = ADV.AFACCTNO(+)
                 ORDER BY (CASE
                            WHEN (SB.BASICPRICE <= DF.TRIGGERPRICE OR
                                 DF.FLAGTRIGGER = 'T') THEN
                             0
                            ELSE
                             1
                          END), --Neu trigger thi nam dau tien
                          GREATEST((DF.TRIGGERPRICE - SB.BASICPRICE) /
                                   GREATEST(SB.BASICPRICE, 1) * 100,
                                   0) DESC, --Neu trigger thi uu tien order theo GAP gia
                          CHD.OVERDUEDATE, -- Theo ngay den han tang dan
                          DF.PRINNML + DF.PRINOVD -- Theo gia tri goc phai tra giam dan

                ) LOOP
      V_DBLCIBAL := 0;
      /*select ci.balance+nvl(adv.avladvance,0) into v_dblcibal from cimast ci,
                  (select sum(depoamt) avladvance,afacctno
                      from v_getAccountAvlAdvance group by afacctno) adv
      where ci.acctno=adv.afacctno(+) and ci.acctno = rec.afacctno;*/
      --l_CIMASTcheck_arr := txpks_check.fn_CIMASTcheck(rec.AFACCTNO,'CIMAST','ACCTNO');
      --v_dblcibal := least(l_CIMASTcheck_arr(0).BALDEFOVD,l_CIMASTcheck_arr(0).PP);

      SELECT ROUND(NVL(ADV.AVLADVANCE, 0) + BALANCE - ODAMT - DFDEBTAMT -
                   DFINTDEBTAMT - NVL(B.EXECBUYAMT, 0),
                   0)
        INTO V_DBLCIBAL
        FROM CIMAST
       INNER JOIN AFMAST AF
          ON CIMAST.ACCTNO = AF.ACCTNO
        LEFT JOIN (SELECT *
                     FROM V_GETBUYORDERINFO
                    WHERE AFACCTNO = REC.AFACCTNO) B
          ON CIMAST.ACCTNO = B.AFACCTNO
        LEFT JOIN (SELECT SUM(ADVAMT) AVLADVANCE, AFACCTNO
                     FROM V_GETACCOUNTAVLADVANCE
                    WHERE AFACCTNO = REC.AFACCTNO
                    GROUP BY AFACCTNO) ADV
          ON ADV.AFACCTNO = CIMAST.ACCTNO
       WHERE CIMAST.ACCTNO = REC.AFACCTNO;

      IF V_DBLCIBAL > 0 AND REC.AMOUNT > 0 AND REC.PRINAMOUNT > 0 THEN
        L_DBLAMOUNT     := LEAST(V_DBLCIBAL, REC.AMOUNT);
        L_DBLPRINAMOUNT := L_DBLAMOUNT * REC.PRINAMOUNT / REC.AMOUNT;
        L_DBLINTAMOUNT  := L_DBLAMOUNT -
                           L_DBLAMOUNT * REC.PRINAMOUNT / REC.AMOUNT;
        --Set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
        --Cac dinh cac gia tri tra no
        --63  45--72--74--77--80--90                              13
        L_DBLPPRINOVD := ROUND(GREATEST(LEAST(L_DBLAMOUNT,
                                              REC.PRINOVD * L_DBLPRINAMOUNT /
                                              REC.PRINAMOUNT),
                                        0),
                               0);
        --65  45--72--74--77--80--90--63                          15
        L_DBLPPRINNML := ROUND(GREATEST(LEAST(L_DBLAMOUNT - L_DBLPPRINOVD,
                                              REC.PRINNML * L_DBLPRINAMOUNT /
                                              REC.PRINAMOUNT),
                                        0),
                               0);
        --72  45                                                  23**16//14
        L_DBLPINTNMLOVD := ROUND(GREATEST(LEAST(L_DBLAMOUNT - L_DBLPPRINOVD -
                                                L_DBLPPRINNML,
                                                REC.INTNMLOVD *
                                                L_DBLPRINAMOUNT /
                                                REC.PRINAMOUNT),
                                          0),
                                 0);
        --74  45--72                                              26**16//14
        L_DBLPINTOVDACR := ROUND(GREATEST(LEAST(L_DBLAMOUNT - L_DBLPPRINOVD -
                                                L_DBLPPRINNML -
                                                L_DBLPINTNMLOVD,
                                                REC.INTOVDACR *
                                                L_DBLPRINAMOUNT /
                                                REC.PRINAMOUNT),
                                          0),
                                 0);
        --77  45--72--74                                          31**16//14
        L_DBLPINTDUE := ROUND(GREATEST(LEAST(L_DBLAMOUNT - L_DBLPPRINOVD -
                                             L_DBLPPRINNML -
                                             L_DBLPINTNMLOVD -
                                             L_DBLPINTOVDACR,
                                             REC.INTDUE * L_DBLPRINAMOUNT /
                                             REC.PRINAMOUNT),
                                       0),
                              0);
        --80  45--72--74--77                                      35**16//14
        L_DBLPINTNMLACR := ROUND(GREATEST(LEAST(L_DBLAMOUNT - L_DBLPPRINOVD -
                                                L_DBLPPRINNML -
                                                L_DBLPINTNMLOVD -
                                                L_DBLPINTOVDACR -
                                                L_DBLPINTDUE,
                                                REC.INTNMLACR *
                                                L_DBLPRINAMOUNT /
                                                REC.PRINAMOUNT),
                                          0),
                                 0);
        --90  45--72--74--77--80                                  36**16//14
        L_DBLPFEEPAID := ROUND(GREATEST(LEAST(L_DBLAMOUNT - L_DBLPPRINOVD -
                                              L_DBLPPRINNML -
                                              L_DBLPINTNMLOVD -
                                              L_DBLPINTOVDACR -
                                              L_DBLPINTDUE -
                                              L_DBLPINTNMLACR,
                                              REC.AVLFEEAMT *
                                              L_DBLPRINAMOUNT /
                                              REC.PRINAMOUNT),
                                        0),
                               0);
        --48  ((51++16))//52**((43++37++38++39++40++50++42))--50  37++38++39++40
        --l_dblQTTY:=round(greatest(least((rec.RLSAMT + l_dblamount - rec.DEALFEE)/rec.DEALAMT * (rec.SECURED+rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY+rec.RLSQTTY+rec.BQTTY),rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY),0));
        L_DBLQTTY := ROUND(GREATEST(LEAST((REC.RLSAMT + L_DBLPPRINOVD +
                                          L_DBLPPRINNML) / REC.DEALAMT *
                                          (REC.SECURED + REC.DFTRADING +
                                          REC.RCVQTTY + REC.CARCVQTTY +
                                          REC.BLOCKQTTY + REC.RLSQTTY +
                                          REC.BQTTY) - REC.RLSQTTY,
                                          REC.DFTRADING + REC.RCVQTTY +
                                          REC.CARCVQTTY + REC.BLOCKQTTY),
                                    0));

        IF REC.DFTRADING + REC.RCVQTTY + REC.CARCVQTTY + REC.BLOCKQTTY >
           L_DBLQTTY THEN
          L_DBLRLSQTTY := FLOOR(L_DBLQTTY / REC.TRADELOT) * REC.TRADELOT;
        ELSE
          L_DBLRLSQTTY := L_DBLQTTY;
        END IF;
        --91  46                                                  37
        L_DBLPDFQTTY := GREATEST(LEAST(L_DBLRLSQTTY, REC.DFTRADING), 0);
        --92  46--91                                              38
        L_DBLPRCVQTTY := GREATEST(LEAST(L_DBLRLSQTTY - L_DBLPDFQTTY,
                                        REC.RCVQTTY),
                                  0);
        --93  46--91--92                                          39
        L_DBLPCARCVQTTY := GREATEST(LEAST(L_DBLRLSQTTY - L_DBLPDFQTTY -
                                          L_DBLPRCVQTTY,
                                          REC.CARCVQTTY),
                                    0);
        --94  46--91--92--93                                      40
        L_DBLPBLOCKQTTY := GREATEST(LEAST(L_DBLRLSQTTY - L_DBLPDFQTTY -
                                          L_DBLPRCVQTTY - L_DBLPCARCVQTTY,
                                          REC.BLOCKQTTY),
                                    0);

        --01    CODEID          C
        L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
        L_TXMSG.TXFIELDS('01').TYPE := 'C';
        L_TXMSG.TXFIELDS('01').VALUE := REC.CODEID;
        --02    ACCTNO          C
        L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('02').TYPE := 'C';
        L_TXMSG.TXFIELDS('02').VALUE := REC.ACCTNO;
        --03   LNACCTNO     C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'LNACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.LNACCTNO;
        --05   AFACCTNO     C
        L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
        --06   SEACCTNO     C
        L_TXMSG.TXFIELDS('06').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('06').TYPE := 'C';
        L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
        --07   LNTYPE       C
        L_TXMSG.TXFIELDS('07').DEFNAME := 'LNTYPE';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := REC.LNTYPE;
        --08   GLMAST       C
        L_TXMSG.TXFIELDS('08').DEFNAME := 'GLMAST';
        L_TXMSG.TXFIELDS('08').TYPE := 'C';
        L_TXMSG.TXFIELDS('08').VALUE := '';
        --13    PRINOVD         N   02PRINOVD
        L_TXMSG.TXFIELDS('13').DEFNAME := 'PRINOVD';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := ROUND(REC.PRINOVD, 0);

        --14  DEALPRINAMT N
        L_TXMSG.TXFIELDS('14').DEFNAME := 'DEALPRINAMT';
        L_TXMSG.TXFIELDS('14').TYPE := 'N';
        L_TXMSG.TXFIELDS('14').VALUE := ROUND(REC.DEALPRINAMT, 0);

        --15    PRINNML         N   02PRINNML
        L_TXMSG.TXFIELDS('15').DEFNAME := 'PRINNML';
        L_TXMSG.TXFIELDS('15').TYPE := 'N';
        L_TXMSG.TXFIELDS('15').VALUE := ROUND(REC.PRINNML, 0);

        --16  PRINPAIDAMT N
        L_TXMSG.TXFIELDS('16').DEFNAME := 'PRINPAIDAMT';
        L_TXMSG.TXFIELDS('16').TYPE := 'N';
        L_TXMSG.TXFIELDS('16').VALUE := ROUND(L_DBLPPRINOVD + L_DBLPPRINNML,
                                              0);
        --18  DEALFEE         N
        L_TXMSG.TXFIELDS('18').DEFNAME := 'DEALFEE';
        L_TXMSG.TXFIELDS('18').TYPE := 'N';
        L_TXMSG.TXFIELDS('18').VALUE := ROUND(REC.DEALFEE, 0);

        --19  DEALINTPAIDAMT  N
        L_TXMSG.TXFIELDS('19').DEFNAME := 'DEALINTPAIDAMT';
        L_TXMSG.TXFIELDS('19').TYPE := 'N';
        L_TXMSG.TXFIELDS('19').VALUE := CASE
                                          WHEN REC.DEALPRINAMT = 0 THEN
                                           0
                                          ELSE
                                           ROUND(REC.DEALFEE *
                                                 (L_DBLPPRINOVD + L_DBLPPRINNML) /
                                                 REC.DEALPRINAMT,
                                                 0)
                                        END;

        --23    INTNMLOVD       N   02INTNMLOVD
        L_TXMSG.TXFIELDS('23').DEFNAME := 'INTNMLOVD';
        L_TXMSG.TXFIELDS('23').TYPE := 'N';
        L_TXMSG.TXFIELDS('23').VALUE := ROUND(REC.INTNMLOVD, 0);
        --26    INTOVDACR       N   02INTOVDACR
        L_TXMSG.TXFIELDS('26').DEFNAME := 'INTOVDACR';
        L_TXMSG.TXFIELDS('26').TYPE := 'N';
        L_TXMSG.TXFIELDS('26').VALUE := ROUND(REC.INTOVDACR, 0);
        --29    DFREF           C   02DFREF
        L_TXMSG.TXFIELDS('29').DEFNAME := 'DFREF';
        L_TXMSG.TXFIELDS('29').TYPE := 'C';
        L_TXMSG.TXFIELDS('29').VALUE := REC.DFREF;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
        --31    INTDUE          N   02INTDUE
        L_TXMSG.TXFIELDS('31').DEFNAME := 'INTDUE';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := ROUND(REC.INTDUE, 0);

        --35    INTNMLACR       N   02INTNMLACR
        L_TXMSG.TXFIELDS('35').DEFNAME := 'INTNMLACR';
        L_TXMSG.TXFIELDS('35').TYPE := 'N';
        L_TXMSG.TXFIELDS('35').VALUE := ROUND(REC.INTNMLACR, 0);

        --36    FEEPAID         N   02AVLFEEAMT
        L_TXMSG.TXFIELDS('36').DEFNAME := 'FEEPAID';
        L_TXMSG.TXFIELDS('36').TYPE := 'N';
        L_TXMSG.TXFIELDS('36').VALUE := ROUND(REC.AVLFEEAMT, 0);

        --37    DFQTTY          N   02DFTRADING
        L_TXMSG.TXFIELDS('37').DEFNAME := 'DFQTTY';
        L_TXMSG.TXFIELDS('37').TYPE := 'N';
        L_TXMSG.TXFIELDS('37').VALUE := REC.DFTRADING;

        --38    RCVQTTY         N   02RCVQTTY
        L_TXMSG.TXFIELDS('38').DEFNAME := 'RCVQTTY';
        L_TXMSG.TXFIELDS('38').TYPE := 'N';
        L_TXMSG.TXFIELDS('38').VALUE := REC.RCVQTTY;

        --39    CARCVQTTY       N   02CARCVQTTY
        L_TXMSG.TXFIELDS('39').DEFNAME := 'CARCVQTTY';
        L_TXMSG.TXFIELDS('39').TYPE := 'N';
        L_TXMSG.TXFIELDS('39').VALUE := REC.CARCVQTTY;

        --40    BLOCKQTTY       N   02BLOCKQTTY
        L_TXMSG.TXFIELDS('40').DEFNAME := 'BLOCKQTTY';
        L_TXMSG.TXFIELDS('40').TYPE := 'N';
        L_TXMSG.TXFIELDS('40').VALUE := REC.BLOCKQTTY;

        --41    ODAMT           N   02ODAMT
        L_TXMSG.TXFIELDS('41').DEFNAME := 'ODAMT';
        L_TXMSG.TXFIELDS('41').TYPE := 'N';
        L_TXMSG.TXFIELDS('41').VALUE := ROUND(REC.ODAMT, 0);

        --42    BQTTY           N   02BQTTY
        L_TXMSG.TXFIELDS('42').DEFNAME := 'BQTTY';
        L_TXMSG.TXFIELDS('42').TYPE := 'N';
        L_TXMSG.TXFIELDS('42').VALUE := REC.BQTTY;
        --43    SECURED         N   02SECURED
        L_TXMSG.TXFIELDS('43').DEFNAME := 'SECURED';
        L_TXMSG.TXFIELDS('43').TYPE := 'N';
        L_TXMSG.TXFIELDS('43').VALUE := REC.SECURED;
        --45    AMT             N   02ODAMT
        L_TXMSG.TXFIELDS('45').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('45').TYPE := 'N';
        L_TXMSG.TXFIELDS('45').VALUE := ROUND(L_DBLAMOUNT, 0);
        --46    QTTY            N   02REMAINQTTY
        L_TXMSG.TXFIELDS('46').DEFNAME := 'QTTY';
        L_TXMSG.TXFIELDS('46').TYPE := 'N';
        L_TXMSG.TXFIELDS('46').VALUE := L_DBLRLSQTTY;

        --47  TRADELOT    N
        L_TXMSG.TXFIELDS('47').DEFNAME := 'TRADELOT';
        L_TXMSG.TXFIELDS('47').TYPE := 'N';
        L_TXMSG.TXFIELDS('47').VALUE := REC.TRADELOT;
        --48  MAXQTTY     N
        L_TXMSG.TXFIELDS('48').DEFNAME := 'MAXQTTY';
        L_TXMSG.TXFIELDS('48').TYPE := 'N';
        L_TXMSG.TXFIELDS('48').VALUE := L_DBLQTTY;
        --49  RLSDATE C
        L_TXMSG.TXFIELDS('49').DEFNAME := 'RLSDATE';
        L_TXMSG.TXFIELDS('49').TYPE := 'C';
        L_TXMSG.TXFIELDS('49').VALUE := REC.RLSDATE;

        --50    RLSQTTY         N   02RLSQTTY
        L_TXMSG.TXFIELDS('50').DEFNAME := 'RLSQTTY';
        L_TXMSG.TXFIELDS('50').TYPE := 'N';
        L_TXMSG.TXFIELDS('50').VALUE := REC.RLSQTTY;
        --51    RLSAMT          N   02RLSAMT
        L_TXMSG.TXFIELDS('51').DEFNAME := 'RLSAMT';
        L_TXMSG.TXFIELDS('51').TYPE := 'N';
        L_TXMSG.TXFIELDS('51').VALUE := ROUND(REC.RLSAMT, 0);
        --52    DEALAMT         N   02DEALAMT
        L_TXMSG.TXFIELDS('52').DEFNAME := 'DEALAMT';
        L_TXMSG.TXFIELDS('52').TYPE := 'N';
        L_TXMSG.TXFIELDS('52').VALUE := ROUND(REC.DEALAMT, 0);

        --53    DEALFEE         N   02DEALFEE
        L_TXMSG.TXFIELDS('53').DEFNAME := 'DEALFEE';
        L_TXMSG.TXFIELDS('53').TYPE := 'N';
        L_TXMSG.TXFIELDS('53').VALUE := ROUND(REC.DEALFEE, 0);
        --57    CUSTNAME        C   02FULLNAME
        L_TXMSG.TXFIELDS('57').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('57').TYPE := 'C';
        L_TXMSG.TXFIELDS('57').VALUE := REC.FULLNAME;
        --58    ADDRESS         C   02ADDRESS
        L_TXMSG.TXFIELDS('58').DEFNAME := 'ADDRESS';
        L_TXMSG.TXFIELDS('58').TYPE := 'C';
        L_TXMSG.TXFIELDS('58').VALUE := REC.ADDRESS;
        --59    LICENSE         C   02IDCODE
        L_TXMSG.TXFIELDS('59').DEFNAME := 'LICENSE';
        L_TXMSG.TXFIELDS('59').TYPE := 'C';
        L_TXMSG.TXFIELDS('59').VALUE := REC.IDCODE;

        --88    CUSTODYCD       C   02CUSTODYCD
        L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
        L_TXMSG.TXFIELDS('88').TYPE := 'C';
        L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
        --95    RRID            C   02RRID
        L_TXMSG.TXFIELDS('95').DEFNAME := 'RRID';
        L_TXMSG.TXFIELDS('95').TYPE := 'C';
        L_TXMSG.TXFIELDS('95').VALUE := REC.RRID;
        --96    CIDRAWNDOWN     C   02CIDRAWNDOWN
        L_TXMSG.TXFIELDS('96').DEFNAME := 'CIDRAWNDOWN';
        L_TXMSG.TXFIELDS('96').TYPE := 'C';
        L_TXMSG.TXFIELDS('96').VALUE := REC.CIDRAWNDOWN;
        --97    BANKDRAWNDOWN   C   02BANKDRAWNDOWN
        L_TXMSG.TXFIELDS('97').DEFNAME := 'BANKDRAWNDOWN';
        L_TXMSG.TXFIELDS('97').TYPE := 'C';
        L_TXMSG.TXFIELDS('97').VALUE := REC.BANKDRAWNDOWN;
        --98    CMPDRAWNDOWN    C   02CMPDRAWNDOWN
        L_TXMSG.TXFIELDS('98').DEFNAME := 'CMPDRAWNDOWN';
        L_TXMSG.TXFIELDS('98').TYPE := 'C';
        L_TXMSG.TXFIELDS('98').VALUE := REC.CMPDRAWNDOWN;
        --99    LIMITCHECK  C
        L_TXMSG.TXFIELDS('99').DEFNAME := 'LIMITCHECK';
        L_TXMSG.TXFIELDS('99').TYPE := 'C';
        L_TXMSG.TXFIELDS('99').VALUE := '1';
        --63    PPRINOVD        N
        L_TXMSG.TXFIELDS('63').DEFNAME := 'PPRINOVD';
        L_TXMSG.TXFIELDS('63').TYPE := 'N';
        L_TXMSG.TXFIELDS('63').VALUE := ROUND(L_DBLPPRINOVD, 0);

        --65    PPRINNML        N
        L_TXMSG.TXFIELDS('65').DEFNAME := 'PPRINNML';
        L_TXMSG.TXFIELDS('65').TYPE := 'N';
        L_TXMSG.TXFIELDS('65').VALUE := ROUND(L_DBLPPRINNML, 0);
        --72    PINTNMLOVD      N
        L_TXMSG.TXFIELDS('72').DEFNAME := 'PINTNMLOVD';
        L_TXMSG.TXFIELDS('72').TYPE := 'N';
        L_TXMSG.TXFIELDS('72').VALUE := ROUND(L_DBLPINTNMLOVD, 0);

        --74    PINTOVDACR      N
        L_TXMSG.TXFIELDS('74').DEFNAME := 'PINTOVDACR';
        L_TXMSG.TXFIELDS('74').TYPE := 'N';
        L_TXMSG.TXFIELDS('74').VALUE := ROUND(L_DBLPINTOVDACR, 0);

        --77    PINTDUE         N
        L_TXMSG.TXFIELDS('77').DEFNAME := 'PINTDUE';
        L_TXMSG.TXFIELDS('77').TYPE := 'N';
        L_TXMSG.TXFIELDS('77').VALUE := ROUND(L_DBLPINTDUE, 0);
        --80    PINTNMLACR      N
        L_TXMSG.TXFIELDS('80').DEFNAME := 'PINTNMLACR';
        L_TXMSG.TXFIELDS('80').TYPE := 'N';
        L_TXMSG.TXFIELDS('80').VALUE := ROUND(L_DBLPINTNMLACR, 0);

        --90    PFEEPAID        N
        L_TXMSG.TXFIELDS('90').DEFNAME := 'PFEEPAID';
        L_TXMSG.TXFIELDS('90').TYPE := 'N';
        L_TXMSG.TXFIELDS('90').VALUE := ROUND(L_DBLPFEEPAID, 0);

        --91    PDFQTTY         N
        L_TXMSG.TXFIELDS('91').DEFNAME := 'PDFQTTY';
        L_TXMSG.TXFIELDS('91').TYPE := 'N';
        L_TXMSG.TXFIELDS('91').VALUE := L_DBLPDFQTTY;

        --92    PRCVQTTY        N
        L_TXMSG.TXFIELDS('92').DEFNAME := 'PRCVQTTY';
        L_TXMSG.TXFIELDS('92').TYPE := 'N';
        L_TXMSG.TXFIELDS('92').VALUE := L_DBLPRCVQTTY;
        --93    PCARCVQTTY      N
        L_TXMSG.TXFIELDS('93').DEFNAME := 'PCARCVQTTY';
        L_TXMSG.TXFIELDS('93').TYPE := 'N';
        L_TXMSG.TXFIELDS('93').VALUE := L_DBLPCARCVQTTY;
        --94    PBLOCKQTTY      N
        L_TXMSG.TXFIELDS('94').DEFNAME := 'PBLOCKQTTY';
        L_TXMSG.TXFIELDS('94').TYPE := 'N';
        L_TXMSG.TXFIELDS('94').VALUE := L_DBLPBLOCKQTTY;

        BEGIN
          IF TXPKS_#2642.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 2642: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;

    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFDueAutoPayment');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_DFDueAutoPayment');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFDueAutoPayment');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFDUEAUTOPAYMENT;
  ---------------------------------pr_DFCleanDeal------------------------------------------------
  PROCEDURE PR_DFCLEANDEAL(P_ERR_CODE OUT VARCHAR2) IS

  BEGIN
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFCleanDeal');
    UPDATE DFMAST
       SET PSTATUS = PSTATUS || STATUS, STATUS = 'C'
     WHERE DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY <= 0
       AND STATUS = 'A'
       AND NOT EXISTS
     (SELECT ACCTNO FROM LNMAST WHERE ACCTNO = DFMAST.LNACCTNO);
    INSERT INTO DFMASTHIST
      SELECT *
        FROM DFMAST
       WHERE DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY <= 0
         AND STATUS IN ('C', 'R')
         AND NOT EXISTS
       (SELECT ACCTNO FROM LNMAST WHERE ACCTNO = DFMAST.LNACCTNO);
    DELETE DFMAST
     WHERE DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY <= 0
       AND STATUS IN ('C', 'R')
       AND NOT EXISTS
     (SELECT ACCTNO FROM LNMAST WHERE ACCTNO = DFMAST.LNACCTNO);
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFCleanDeal');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFCleanDeal');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFCLEANDEAL;

  ---------------------------------pr_ODSettlementtransferMoney------------------------------------------------
  PROCEDURE PR_TRANSFERBUYFEE(P_BCHMDL   VARCHAR,
                              P_ERR_CODE OUT VARCHAR2,
                              P_FROMROW  NUMBER,
                              P_TOROW    NUMBER,
                              P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_BUYSECAMT     NUMBER(25, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TransferBuyFee');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM ODMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8855';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8855';
    FOR REC IN (SELECT SUBSTR(CF.CUSTODYCD, 4, 1) CUSTODYCD,
                       MST.TXDATE,
                       MST.ORDERID ORGORDERID,
                       MST.AFACCTNO,
                       CI.ACCTNO CIACCTNO,
                       STS.CLEARDATE,
                       STS.CLEARDAY,
                       MST.ORDERQTTY ORGORDERQTTY,
                       MST.QUOTEPRICE ORGQUOTEPRICE,
                       MST.FEEACR,
                       TYP.FEERATE,
                       TYP.VATRATE,
                       SEC.PARVALUE,
                       SEC.CODEID,
                       MST.SECUREDAMT,
                       MST.RLSSECURED,
                       SEC.SYMBOL,
                       MST.EXECQTTY SQTTY,
                       ROUND(GREATEST(MST.FEEACR - MST.FEEAMT, 0), 0) FEEAMT,
                       ROUND(TYP.VATRATE / 100 *
                             GREATEST(MST.FEEACR - MST.FEEAMT, 0),
                             0) VATAMT,
                       LEAST(CI.BUYSECAMT,
                             ROUND(GREATEST(MST.FEEACR - MST.FEEAMT, 0), 0)) BUYSECAMT,
                       ROUND(GREATEST(MST.FEEACR - MST.FEEAMT, 0), 0) CIAMT,
                       UTF8NUMS.C_CONST_TLTX_TXDESC_8855 || ' ' ||
                       TRIM(TO_CHAR(MST.EXECQTTY, '999,999,999,999,999')) || ' ' ||
                       SEC.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                       TO_CHAR(MST.TXDATE, SYSTEMNUMS.C_DATE_FORMAT) TXDESC
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM ODMAST A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       SBSECURITIES SEC,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       ODTYPE TYP,
                       STSCHD STS
                 WHERE AF.CUSTID = CF.CUSTID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND MST.FEEACR > MST.FEEAMT
                   AND MST.DELTD <> 'Y'
                   AND CF.CUSTATCOM = 'Y'
                   AND STS.DUETYPE = 'SM'
                   AND STS.ACCTNO = MST.AFACCTNO
                   AND STS.TXDATE = MST.TXDATE
                   AND STS.ORGORDERID = MST.ORDERID
                   AND STS.DELTD <> 'Y'
                   AND MST.AFACCTNO = AF.ACCTNO
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND MST.ACTYPE = TYP.ACTYPE
                   AND FEEACR > FEEAMT
                   AND MST.EXECTYPE IN ('NB', 'BC')
                   AND STS.CLEARDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND NOT EXISTS
                 (SELECT LF.CVALUE
                          FROM TLLOG TL, TLLOGFLD LF
                         WHERE TL.TLTXCD = '8855'
                           AND TL.TXNUM = LF.TXNUM
                           AND TL.TXDATE = LF.TXDATE
                           AND LF.FLDCD = '03'
                           AND LF.CVALUE = MST.ORDERID)
                 ORDER BY CIACCTNO, MST.ORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      SELECT GREATEST(BUYSECAMT, 0)
        INTO L_BUYSECAMT
        FROM CIMAST
       WHERE ACCTNO = REC.CIACCTNO;

      --Set cac field giao dich
      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.CIACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --12   FEEAMT       N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.FEEAMT;
      --13   VATAMT       N
      L_TXMSG.TXFIELDS('13').DEFNAME := 'VATAMT';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.VATAMT;
      --14   LATE       N
      L_TXMSG.TXFIELDS('14').DEFNAME := 'LATE';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := CASE
                                        WHEN REC.CLEARDAY > 0 THEN
                                         1
                                        ELSE
                                         0
                                      END; -- neu rec.CLEARDAY > 0 -> la lenh tra cham.

      --15   CIAMT       N
      L_TXMSG.TXFIELDS('15').DEFNAME := 'CIAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := ROUND(REC.CIAMT, 0);

      --16   BUYSECAMT       N
      L_TXMSG.TXFIELDS('16').DEFNAME := 'BUYSECAMT';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := LEAST(REC.CIAMT, L_BUYSECAMT); --round(rec.BUYSECAMT,0);

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;
      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

      BEGIN
        IF TXPKS_#8855.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8855: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    if P_LASTRUN = 'Y' then
        ---PR_RevertVoucherBuyFee
        TXPKS_BATCH.PR_RevertVoucherBuyFee(P_BCHMDL,P_ERR_CODE);
    end if;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TransferBuyFee');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer buy fee');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TransferBuyFee');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TRANSFERBUYFEE;
---------------PR_RevertVoucherBuyFee-------------------------
PROCEDURE PR_RevertVoucherBuyFee(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2) is
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_BUYSECAMT     NUMBER(25, 0);
    V_voucherAUTOID VARCHAR2(20);
    v_VOUCHERAMT    NUMBER(25, 0);
    V_CIAMT         NUMBER(25, 0);
    v_ODFEEAMT      NUMBER(25, 0);
begin
        PLOG.SETBEGINSECTION(PKGCTX, 'PR_RevertVoucherBuyFee');
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8831';
    INSERT INTO VOUCHERLOG (AUTOID, CUSTODYCD,FULLNAME,TXDATE,ACCTNO,NAMT,TXDESC,CUSTID,ORDERNUM,TLTXCD,STATUS)
        SELECT seq_VOUCHERLOG.NEXTVAL, CUSTODYCD, FULLNAME, TXDATE, ACCTNO, NAMT, TXDESC, CUSTID, ORDERNUM, '8855' TLTXCD, 'P' STATUS
        FROM (
        SELECT CF.CUSTODYCD, CF.FULLNAME,
            TR.TXDATE TXDATE, TR.ACCTNO, SUM(TR.NAMT) NAMT,
            'HOAN PHI MUA' TXDESC, CF.CUSTID,
            (CASE WHEN aft.producttype = 'NM' then 0  when aft.producttype = 'QM' then 1
                when aft.producttype = 'NN' then 2 else 3 end) ordernum
        FROM CITRAN TR, CFMAST CF, AFMAST AF,
            (SELECT custid, max(voucheramt) amt FROM VOUCHERODFEE WHERE STATUS = 'A' AND VOUCHERAMT - PRINPAID > 0
            AND GETCURRDATE BETWEEN VALDATE AND EXPDATE AND VOUCHERTYPE = '01' group by custid) MST,
            AFTYPE AFT
        WHERE TR.DELTD = 'N' AND TR.TLTXCD = '8855' AND TR.TXCD = '0011'
            AND MST.CUSTID = CF.CUSTID  AND CF.CUSTID = AF.CUSTID
            AND TR.ACCTNO = AF.ACCTNO AND AF.ACTYPE = AFT.ACTYPE
        GROUP BY TR.TXDATE, TR.ACCTNO, CF.CUSTODYCD, CF.FULLNAME,CF.CUSTID,
            (CASE WHEN aft.producttype = 'NM' then 0  when aft.producttype = 'QM' then 1
                when aft.producttype = 'NN' then 2 else 3 end)
            );

    FOR REC IN (
            SELECT  AUTOID, CUSTODYCD, FULLNAME, TXDATE, ACCTNO, NAMT, TXDESC, CUSTID, ORDERNUM, STATUS
            FROM VOUCHERLOG WHERE TLTXCD = '8855' AND STATUS = 'P'
            ORDER BY ORDERNUM
    ) LOOP
        v_ODFEEAMT := rec.NAMT;
        FOR VC IN (
            SELECT AUTOID, VOUCHERAMT - PRINPAID VOUCHERAMT, VALDATE, EXPDATE
            FROM VOUCHERODFEE
            WHERE STATUS = 'A' AND VOUCHERAMT - PRINPAID > 0
                AND GETCURRDATE BETWEEN VALDATE AND EXPDATE AND CUSTID = REC.CUSTID
            ORDER BY EXPDATE, AUTOID ASC
        )
        LOOP
            IF v_odfeeamt <= 0 THEN
                EXIT;
            END IF;
            V_voucherAUTOID := vc.AUTOID;
            v_VOUCHERAMT := vc.VOUCHERAMT;
            if v_VOUCHERAMT > 0 then
                V_CIAMT := LEAST(v_VOUCHERAMT,v_ODFEEAMT);
              --Set txnum
              SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                     LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
                INTO L_TXMSG.TXNUM
                FROM DUAL;
              L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

              --Set cac field giao dich
              --88   C   CUSTODYCD
              L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
              L_TXMSG.TXFIELDS('88').TYPE := 'C';
              L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
              --03   C   ACCTNO
              L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
              L_TXMSG.TXFIELDS('03').TYPE := 'C';
              L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
              --90   C   CUSTNAME
              L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
              L_TXMSG.TXFIELDS('90').TYPE := 'C';
              L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

              --16   C   VOUCHERKEY
              L_TXMSG.TXFIELDS('16').DEFNAME := 'VOUCHERKEY';
              L_TXMSG.TXFIELDS('16').TYPE := 'C';
              L_TXMSG.TXFIELDS('16').VALUE := V_voucherAUTOID;

              --10   CIAMT       N
              L_TXMSG.TXFIELDS('10').DEFNAME := 'CIAMT';
              L_TXMSG.TXFIELDS('10').TYPE := 'N';
              L_TXMSG.TXFIELDS('10').VALUE := V_CIAMT;
              --14   VOUCHERAMT       N
              L_TXMSG.TXFIELDS('14').DEFNAME := 'VOUCHERAMT';
              L_TXMSG.TXFIELDS('14').TYPE := 'N';
              L_TXMSG.TXFIELDS('14').VALUE := v_VOUCHERAMT;
              --15   ODFEEAMT       N
              L_TXMSG.TXFIELDS('15').DEFNAME := 'ODFEEAMT';
              L_TXMSG.TXFIELDS('15').TYPE := 'N';
              L_TXMSG.TXFIELDS('15').VALUE := REC.NAMT;

              --30   C   DESC
              L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
              L_TXMSG.TXFIELDS('30').TYPE := 'C';
              L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;

              BEGIN
                IF TXPKS_#8831.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
                   SYSTEMNUMS.C_SUCCESS THEN
                  PLOG.DEBUG(PKGCTX, 'got error 8831: ' || P_ERR_CODE);
                  ROLLBACK;
                  RETURN;
                END IF;
              END;
              v_odfeeamt := v_odfeeamt - V_CIAMT;
            end if;
        END LOOP;
        if v_odfeeamt <= 0 then
            update VOUCHERLOG set status = 'A' where autoid = rec.autoid;
        else
            update VOUCHERLOG set status = 'C' where autoid = rec.autoid;
        end if;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TransferBuyFee');
EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on Revert Voucher buy fee');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_RevertVoucherBuyFee');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
END PR_RevertVoucherBuyFee;

---------------PR_RevertVoucherSellFee-------------------------
PROCEDURE PR_RevertVoucherSellFee(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2) is
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_BUYSECAMT     NUMBER(25, 0);
    V_voucherAUTOID VARCHAR2(20);
    v_VOUCHERAMT    NUMBER(25, 0);
    V_CIAMT         NUMBER(25, 0);
    v_odfeeamt      NUMBER(25, 0);
begin
        PLOG.SETBEGINSECTION(PKGCTX, 'PR_RevertVoucherSellFee');
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8831';

    INSERT INTO VOUCHERLOG (AUTOID, CUSTODYCD,FULLNAME,TXDATE,ACCTNO,NAMT,TXDESC,CUSTID,ORDERNUM,TLTXCD,STATUS)
    SELECT seq_voucherlog.nextval, CUSTODYCD, FULLNAME, TXDATE, ACCTNO, NAMT, TXDESC, CUSTID, ORDERNUM, '8856' TLTXCD, 'P' STATUS
        FROM (
            SELECT CF.CUSTODYCD, CF.FULLNAME,
                TR.TXDATE TXDATE, TR.ACCTNO, SUM(TR.NAMT) NAMT,
                'HOAN PHI BAN' TXDESC, CF.CUSTID,
                (CASE WHEN aft.producttype = 'NM' then 0  when aft.producttype = 'QM' then 1
                when aft.producttype = 'NN' then 2 else 3 end) ordernum
            FROM CITRAN TR, CFMAST CF, AFMAST AF,
                (SELECT custid, max(voucheramt) amt FROM VOUCHERODFEE WHERE STATUS = 'A' AND VOUCHERAMT - PRINPAID > 0
            AND GETCURRDATE BETWEEN VALDATE AND EXPDATE AND VOUCHERTYPE = '01' group by custid) MST,
                AFTYPE AFT
            WHERE TR.DELTD = 'N' AND TR.TLTXCD = '8856' AND TR.TXCD = '0028'
                AND MST.CUSTID = CF.CUSTID  AND CF.CUSTID = AF.CUSTID
                AND TR.ACCTNO = AF.ACCTNO AND AF.ACTYPE = AFT.ACTYPE
            GROUP BY TR.TXDATE, TR.ACCTNO, CF.CUSTODYCD, CF.FULLNAME, CF.CUSTID,
            (CASE WHEN aft.producttype = 'NM' then 0  when aft.producttype = 'QM' then 1
                when aft.producttype = 'NN' then 2 else 3 end)
        );

    FOR REC IN (
        SELECT AUTOID, CUSTODYCD, FULLNAME, TXDATE, ACCTNO, NAMT, TXDESC, CUSTID, ORDERNUM
        FROM VOUCHERLOG
        where tltxcd = '8856' and status = 'P'
        ORDER BY ORDERNUM
    ) LOOP

    v_odfeeamt := rec.namt;
        FOR VC IN (
            SELECT AUTOID, VOUCHERAMT - PRINPAID VOUCHERAMT, VALDATE, EXPDATE
            FROM VOUCHERODFEE
            WHERE STATUS = 'A' AND VOUCHERAMT - PRINPAID > 0
                AND GETCURRDATE BETWEEN VALDATE AND EXPDATE AND CUSTID = REC.CUSTID
            ORDER BY EXPDATE, AUTOID ASC
        )
        LOOP
            IF v_odfeeamt <= 0 THEN
                EXIT;
            END IF;
            V_voucherAUTOID := vc.AUTOID;
            v_VOUCHERAMT    := vc.VOUCHERAMT;

            if v_VOUCHERAMT > 0 then
                V_CIAMT := LEAST(v_VOUCHERAMT,v_odfeeamt);

                --Set txnum
                SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                     LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
                INTO L_TXMSG.TXNUM
                FROM DUAL;
                L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

                  --Set cac field giao dich
                  --88   C   CUSTODYCD
                  L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
                  L_TXMSG.TXFIELDS('88').TYPE := 'C';
                  L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
                  --03   C   ACCTNO
                  L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
                  L_TXMSG.TXFIELDS('03').TYPE := 'C';
                  L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
                  --90   C   CUSTNAME
                  L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
                  L_TXMSG.TXFIELDS('90').TYPE := 'C';
                  L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

                  --16   C   VOUCHERKEY
                  L_TXMSG.TXFIELDS('16').DEFNAME := 'VOUCHERKEY';
                  L_TXMSG.TXFIELDS('16').TYPE := 'C';
                  L_TXMSG.TXFIELDS('16').VALUE := V_voucherAUTOID;

                  --10   CIAMT       N
                  L_TXMSG.TXFIELDS('10').DEFNAME := 'CIAMT';
                  L_TXMSG.TXFIELDS('10').TYPE := 'N';
                  L_TXMSG.TXFIELDS('10').VALUE := V_CIAMT;
                  --14   VOUCHERAMT       N
                  L_TXMSG.TXFIELDS('14').DEFNAME := 'VOUCHERAMT';
                  L_TXMSG.TXFIELDS('14').TYPE := 'N';
                  L_TXMSG.TXFIELDS('14').VALUE := v_VOUCHERAMT;
                  --15   ODFEEAMT       N
                  L_TXMSG.TXFIELDS('15').DEFNAME := 'ODFEEAMT';
                  L_TXMSG.TXFIELDS('15').TYPE := 'N';
                  L_TXMSG.TXFIELDS('15').VALUE := REC.NAMT;

                  --30   C   DESC
                  L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
                  L_TXMSG.TXFIELDS('30').TYPE := 'C';
                  L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;

                  BEGIN
                    IF TXPKS_#8831.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
                       SYSTEMNUMS.C_SUCCESS THEN
                      PLOG.DEBUG(PKGCTX, 'got error 8831: ' || P_ERR_CODE);
                      ROLLBACK;
                      RETURN;
                    END IF;
                  END;
                v_odfeeamt := v_odfeeamt - V_CIAMT;
            end if;
        END LOOP;
        if v_odfeeamt <= 0 then
            update VOUCHERLOG set status = 'A' where autoid = rec.autoid;
        else
            update VOUCHERLOG set status = 'C' where autoid = rec.autoid;
        end if;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TransferSellFee');
EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on Revert Voucher sell fee');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_RevertVoucherSellFee');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
END PR_RevertVoucherSellFee;
---------------PR_RevertVoucherSellFee-------------------------
PROCEDURE PR_CompleteVoucher(P_BCHMDL   VARCHAR, P_ERR_CODE OUT VARCHAR2) is
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_BUYSECAMT     NUMBER(25, 0);
begin
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_CompleteVoucher');
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8832';

    FOR REC IN (
        SELECT CF.CUSTODYCD, CF.FULLNAME, MST.AUTOID, MST.VOUCHERTYPE,
            (case when MST.VOUCHERTYPE = '01' then (MST.VOUCHERAMT-NVL(MST.PRINPAID,0)) else 0 end) AMT ,
            'Tat toan voucher' TXDESC, mst.VOUCHERAMT VOUCHERAMT, NVL(MST.PRINPAID,0) PRINPAID
        FROM VOUCHERODFEE MST, CFMAST CF
        WHERE MST.STATUS = 'A' AND (GETCURRDATE >= MST.EXPDATE or MST.VOUCHERAMT-NVL(MST.PRINPAID,0) = 0)
            AND MST.CUSTID = CF.CUSTID
    ) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := '0001';

      --Set cac field giao dich
      --88   C   CUSTODYCD
      L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('88').TYPE := 'C';
      L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
      --90   C   CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --16   C   VOUCHERKEY
      L_TXMSG.TXFIELDS('16').DEFNAME := 'VOUCHERKEY';
      L_TXMSG.TXFIELDS('16').TYPE := 'C';
      L_TXMSG.TXFIELDS('16').VALUE := REC.AUTOID;

      --10   CIAMT       N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'CIAMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMT;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;
    if rec.AMT = (rec.VOUCHERAMT-rec.PRINPAID) then
      BEGIN
        IF TXPKS_#8832.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8832: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    end if;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_CompleteVoucher');
EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on Complete Voucher');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || dbms_utility.format_error_backtrace);
      PLOG.SETENDSECTION(PKGCTX, 'PR_CompleteVoucher');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
END PR_CompleteVoucher;
  ---------------------------------pr_ODSettlementtransferSec------------------------------------------------
  PROCEDURE PR_ODSETTLEMENTTRANSFERSEC(P_BCHMDL   VARCHAR,
                                       P_ERR_CODE OUT VARCHAR2,
                                       P_FROMROW  NUMBER,
                                       P_TOROW    NUMBER,
                                       P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementtransferSec');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8867';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8867';
    FOR REC IN (SELECT SUBSTR(CF.CUSTODYCD, 4, 1) CUSTODYCD,
                       MST.AUTOID,
                       MST.DUETYPE,
                       MST.TXDATE,
                       MST.ORGORDERID,
                       MST.CLEARCD,
                       MST.CLEARDAY,
                       MST.AFACCTNO,
                       OD.ORDERQTTY ORGORDERQTTY,
                       OD.QUOTEPRICE ORGQUOTEPRICE,
                       MST.ACCTNO,
                       SEC.PARVALUE,
                       SEC.SYMBOL,
                       SEC.CODEID,
                       GREATEST(MST.AMT - OD.NETEXECAMT - OD.CFNETEXECAMT, 0) AMT, -- HSX04 MST.AMT,
                       MST.AAMT,
                       MST.FAMT,
                       GREATEST(MST.QTTY - OD.NETEXECQTTY - OD.CFNETEXECQTTY, 0) QTTY, -- HSX04 MST.QTTY,
                       OD.EXECQTTY SQTTY,
                       OD.EXECTYPE,
                       MST.AQTTY,
                       OD.TAXSELLAMT,
                       OD.FEEACR
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       SBSECURITIES SEC,
                       ODMAST OD,
                       AFMAST AF,
                       CFMAST CF
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND MST.CODEID = SEC.CODEID
                   AND MST.ORGORDERID = OD.ORDERID
                   AND SEC.TRADEPLACE <> '003'
                   AND MST.DUETYPE = 'SS'
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND CF.CUSTATCOM = 'Y'
                   AND OD.EXECTYPE NOT IN ('CS', 'CB')
                 ORDER BY ORGORDERID, DUETYPE) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      --Set cac field giao dich
      --01   AUTOID       N
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   AMT          N
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   QTTY         N
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   PARVALUE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.PARVALUE;
      --11   TRFQTTY      N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TRFQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.QTTY;
      --13   FEEACR      N
      L_TXMSG.TXFIELDS('13').DEFNAME := 'FEEACR';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.FEEACR;

      --14   TAXSELLAMT      N
      L_TXMSG.TXFIELDS('14').DEFNAME := 'TAXSELLAMT';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := REC.TAXSELLAMT;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF V_BLNVIETNAMESE = TRUE THEN
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := V_STREN_DESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      END IF;
      --60   N   ISMORTAGE
      L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('60').TYPE := 'N';
      L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                        WHEN REC.EXECTYPE = 'MS' THEN
                                         1
                                        ELSE
                                         0
                                      END);

      BEGIN
        IF TXPKS_#8867.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8867: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementtransferSec');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer securities');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementtransferSec');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTTRANSFERSEC;

  ---------------------------------pr_ODDealAllocate------------------------------------------------
  PROCEDURE PR_ODDEALALLOCATE(P_BCHMDL   VARCHAR,
                              P_ERR_CODE OUT VARCHAR2,
                              P_FROMROW  NUMBER,
                              P_TOROW    NUMBER,
                              P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG           TX.MSG_RECTYPE;
    V_STRCURRDATE     VARCHAR2(20);
    V_STRPREVDATE     VARCHAR2(20);
    V_STRNEXTDATE     VARCHAR2(20);
    V_STRDESC         VARCHAR2(1000);
    V_STREN_DESC      VARCHAR2(1000);
    V_BLNVIETNAMESE   BOOLEAN;
    L_ERR_PARAM       VARCHAR2(300);
    L_MAXROW          NUMBER(20, 0);
    V_OVERDFQTTY      NUMBER(20, 0);
    V_DFQTTY          NUMBER(20, 0);
    V_DFRLSQTTY       NUMBER(20, 0);
    V_TOTALPAIDAMT    NUMBER(20, 4);
    V_PAIDAMT         NUMBER(20, 4);
    V_ADVAMT          NUMBER(20, 4);
    V_OLDSEACCTNO     VARCHAR2(20);
    V_CURR_DFQTTY     NUMBER(20, 0);
    V_CURR_OVERDFQTTY NUMBER(20, 0);
    V_CURR_DFTRADING  NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODDealAllocate');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    V_OVERDFQTTY  := 0;
    V_DFQTTY      := 0;
    L_TXMSG.TLID  := SYSTEMNUMS.C_SYSTEM_USERID;
    L_TXMSG.TXNUM := '0000000000';
    V_OLDSEACCTNO := 'XXX';
    FOR REC IN (SELECT B.ORDERID,
                       C.AUTOID,
                       A.AFACCTNO,
                       A.CODEID,
                       A.TRADE - NVL(VSE.SECUREAMT, 0) TRADING,
                       C.QTTY ORDERQTTY,
                       NVL(VDF.OVERDFTRADING, 0) OVERDFQTTY,
                       NVL(VDF.DFTRADING, 0) DFQTTY
                  FROM SEMAST A,
                       ODMAST B,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) C,
                       V_GETSELLORDERINFO VSE,
                       (SELECT V.AFACCTNO,
                               V.CODEID,
                               SUM(CASE
                                     WHEN OVERAMT > 0 OR
                                          (V.BASICPRICE <= V.TRIGGERPRICE OR
                                          V.FLAGTRIGGER = 'T') THEN
                                      V.DFTRADING
                                     ELSE
                                      0
                                   END) OVERDFTRADING,
                               SUM(CASE
                                     WHEN OVERAMT > 0 OR
                                          (V.BASICPRICE <= V.TRIGGERPRICE OR
                                          V.FLAGTRIGGER = 'T') THEN
                                      0
                                     ELSE
                                      V.DFTRADING
                                   END) DFTRADING
                          FROM (SELECT V.*,
                                       NVL(NML, 0) DUEAMT,
                                       V.PRINOVD + V.OPRINOVD + NVL(NML, 0) OVERAMT
                                  FROM V_GETDEALINFO V,
                                       (SELECT S.ACCTNO,
                                               SUM(NML) NML,
                                               M.TRFACCTNO
                                          FROM LNSCHD S, LNMAST M
                                         WHERE S.OVERDUEDATE <= V_STRCURRDATE
                                           AND S.NML > 0
                                           AND S.REFTYPE IN ('P')
                                           AND S.ACCTNO = M.ACCTNO
                                           AND M.STATUS NOT IN ('P', 'R', 'C')
                                         GROUP BY S.ACCTNO, M.TRFACCTNO
                                         ORDER BY S.ACCTNO) STS
                                 WHERE V.LNACCTNO = STS.ACCTNO(+)) V
                         WHERE V.STATUS = 'A'
                         GROUP BY V.AFACCTNO, V.CODEID) VDF
                 WHERE A.ACCTNO = B.SEACCTNO
                   AND B.ORDERID = C.ORGORDERID
                   AND B.VIA = 'W' --Lenh quan ETS
                      --and a.acctno='0021085668000103'
                   AND C.DUETYPE = 'RM'
                   AND C.STATUS = 'N'
                   AND C.DELTD <> 'Y'
                   AND A.ACCTNO = VSE.SEACCTNO(+)
                   AND B.TXDATE = V_STRCURRDATE
                   AND A.AFACCTNO = VDF.AFACCTNO
                   AND A.CODEID = VDF.CODEID
                   AND VDF.OVERDFTRADING + DFTRADING > 0
                 ORDER BY A.AFACCTNO, A.CODEID, SUBSTR(B.ORDERID, 11, 6)) LOOP
      IF V_OLDSEACCTNO <> REC.AFACCTNO || REC.CODEID THEN
        V_OLDSEACCTNO     := REC.AFACCTNO || REC.CODEID;
        V_CURR_DFQTTY     := REC.DFQTTY;
        V_CURR_OVERDFQTTY := REC.OVERDFQTTY;
        V_CURR_DFTRADING  := REC.TRADING;
      END IF;
      --v_overdfqtty:=least(rec.orderqtty,rec.overdfqtty);
      V_OVERDFQTTY := LEAST(REC.ORDERQTTY, V_CURR_OVERDFQTTY);
      PLOG.DEBUG(PKGCTX, 'v_overdfqtty ' || V_OVERDFQTTY);
      --v_dfqtty:=least(rec.orderqtty-v_overdfqtty,rec.dfqtty,-v_overdfqtty-rec.trading);
      V_DFQTTY := LEAST(REC.ORDERQTTY - V_OVERDFQTTY,
                        V_CURR_DFQTTY,
                        -V_OVERDFQTTY - V_CURR_DFTRADING);
      PLOG.DEBUG(PKGCTX, 'v_dfqtty ' || V_DFQTTY);
      V_TOTALPAIDAMT := 0;
      --1.Tra no cho cac deal den va qua han
      IF V_OVERDFQTTY > 0 THEN
        FOR REC1 IN (SELECT V.*
                       FROM V_GETDEALINFO V, LNSCHD S, LNMAST M
                      WHERE V.LNACCTNO = M.ACCTNO
                        AND M.ACCTNO = S.ACCTNO
                        AND S.REFTYPE IN ('P')
                        AND (S.OVERDUEDATE <=
                            TO_DATE((SELECT VARVALUE
                                       FROM SYSVAR
                                      WHERE GRNAME = 'SYSTEM'
                                        AND VARNAME = 'CURRDATE'),
                                     'DD/MM/YYYY') OR
                            V.PRINOVD + V.OPRINOVD > 0 OR
                            (V.BASICPRICE <= V.TRIGGERPRICE OR
                            V.FLAGTRIGGER = 'T'))
                        AND V.AFACCTNO = REC.AFACCTNO
                        AND V.CODEID = REC.CODEID
                      ORDER BY (CASE
                                 WHEN (V.BASICPRICE <= V.TRIGGERPRICE OR
                                      V.FLAGTRIGGER = 'T') THEN
                                  (V.TRIGGERPRICE - V.BASICPRICE) /
                                  GREATEST(V.BASICPRICE, 1)
                                 ELSE
                                  0
                               END) DESC,
                               S.OVERDUEDATE,
                               V.TXDATE,
                               SUBSTR(V.ACCTNO, 5, 6)) LOOP
          IF V_OVERDFQTTY > REC1.DFTRADING THEN
            V_DFRLSQTTY := REC1.DFTRADING;
          ELSE
            V_DFRLSQTTY := V_OVERDFQTTY;
          END IF;
          CSPKS_DFPROC.PR_DEALAUTOPAYMENT(L_TXMSG,
                                          REC1.ACCTNO,
                                          REC.AUTOID,
                                          V_DFRLSQTTY,
                                          1,
                                          V_PAIDAMT,
                                          P_ERR_CODE);
          PLOG.DEBUG(PKGCTX, 'v_paidamt ' || V_PAIDAMT);
          V_TOTALPAIDAMT := V_TOTALPAIDAMT + V_PAIDAMT;

          V_OVERDFQTTY      := V_OVERDFQTTY - V_DFRLSQTTY;
          V_CURR_OVERDFQTTY := V_CURR_OVERDFQTTY - V_DFRLSQTTY;
          V_CURR_DFTRADING  := V_CURR_DFTRADING + V_DFRLSQTTY;
          EXIT WHEN V_OVERDFQTTY <= 0;
        END LOOP;
      END IF;
      --2.Tra no cho cac deal trong han
      IF V_DFQTTY > 0 THEN
        FOR REC1 IN (SELECT V.*
                       FROM V_GETDEALINFO V, LNSCHD S, LNMAST M
                      WHERE V.LNACCTNO = M.ACCTNO
                        AND M.ACCTNO = S.ACCTNO
                        AND S.REFTYPE IN ('P')
                        AND S.OVERDUEDATE >
                            TO_DATE((SELECT VARVALUE
                                      FROM SYSVAR
                                     WHERE GRNAME = 'SYSTEM'
                                       AND VARNAME = 'CURRDATE'),
                                    'DD/MM/YYYY')
                        AND V.PRINOVD + V.OPRINOVD <= 0
                        AND V.AFACCTNO = REC.AFACCTNO
                        AND V.CODEID = REC.CODEID
                      ORDER BY S.OVERDUEDATE, TXDATE, SUBSTR(V.ACCTNO, 5, 6)) LOOP
          IF V_DFQTTY > REC1.DFTRADING THEN
            V_DFRLSQTTY := REC1.DFTRADING;
          ELSE
            V_DFRLSQTTY := V_DFQTTY;
          END IF;
          CSPKS_DFPROC.PR_DEALAUTOPAYMENT(L_TXMSG,
                                          REC1.ACCTNO,
                                          REC.AUTOID,
                                          V_DFRLSQTTY,
                                          1,
                                          V_PAIDAMT,
                                          P_ERR_CODE);
          PLOG.DEBUG(PKGCTX, 'v_paidamt ' || V_PAIDAMT);
          V_TOTALPAIDAMT := V_TOTALPAIDAMT + V_PAIDAMT;

          V_DFQTTY         := V_DFQTTY - V_DFRLSQTTY;
          V_CURR_DFQTTY    := V_CURR_DFQTTY - V_DFRLSQTTY;
          V_CURR_DFTRADING := V_CURR_DFTRADING + V_DFRLSQTTY;
          EXIT WHEN V_DFQTTY <= 0;
        END LOOP;
      END IF;
      --Thuc hien ung truoc gop, khong thuc hien ung truoc theo deal nua
    /*--3.Ung truoc tien ban bu cho cac deal
            if v_totalpaidamt>0 then
                plog.debug (pkgctx,'v_totalpaidamt ' || v_totalpaidamt);
                cspks_ciproc.pr_CIAutoAdvance(l_txmsg,rec.orderid,v_totalpaidamt,v_advamt,p_err_code);
                plog.debug (pkgctx,'advance amount ' || v_advamt);
            end if;*/
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODDealAllocate');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer securities');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODDealAllocate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODDEALALLOCATE;

  ---------------------------------pr_DFAutoAdvToPayment------------------------------------------------
  PROCEDURE PR_DFAUTOADVTOPAYMENT(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG            TX.MSG_RECTYPE;
    V_STRCURRDATE      VARCHAR2(20);
    V_STRPREVDATE      VARCHAR2(20);
    V_STRNEXTDATE      VARCHAR2(20);
    V_STRDESC          VARCHAR2(1000);
    V_STRAFACCTNOTMP   VARCHAR2(20);
    V_STRGROUPIDTMP    VARCHAR2(20);
    V_STRCODEIDTMP     VARCHAR2(20);
    V_STREN_DESC       VARCHAR2(1000);
    V_BLNVIETNAMESE    BOOLEAN;
    L_ERR_PARAM        VARCHAR2(300);
    L_MAXROW           NUMBER(20, 0);
    V_TOTALPAIDAMT     NUMBER(20, 0);
    V_PQTTY            NUMBER(20, 0);
    V_PAIDAMT          NUMBER(20, 0);
    V_ADVAMT           NUMBER(20, 0);
    L_DFBLOCKAMT       NUMBER;
    L_VNDSELLDF        NUMBER;
    L_AMTPAID          NUMBER;
    L_TMPAMT           NUMBER;
    L_DAYDUE           NUMBER;
    L_34PAID           NUMBER;
    L_35PAID           NUMBER;
    L_36PAID           NUMBER;
    L_OVD              NUMBER;
    L_NML              NUMBER;
    L_PAID             NUMBER;
    L_INTOVD           NUMBER;
    L_INTPAID          NUMBER;
    L_FEEINTNMLOVD     NUMBER;
    L_FEEINTOVDACR     NUMBER;
    L_INTOVDPRIN       NUMBER;
    L_FEEINTPAID       NUMBER;
    V_STRINTPAIDMETHOD VARCHAR2(1);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFAutoAdvToPayment');
    PLOG.DEBUG(PKGCTX, 'Begin run');
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2648';

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    V_PQTTY        := 0;
    V_TOTALPAIDAMT := 0;

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2648';

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    FOR REC IN (
                /*
                        SELECT v.*, cf.custodycd, cf.fullname, cf.idcode, cf.ADDRESS , df.orgamt, df.rlsamt+df.dfamt dfpaidamt, df.lrate,
                                ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)) sumamt, LEAST (ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)),df.dfblockamt) dfblockamt_least, df.dfblockamt DFBLOCKORG,
                            greatest(getavlciwithdraw (v.afacctno, 'N'),0) CIAVLWITHDRAW, ROUND(ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)) - LEAST (ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)),df.dfblockamt)) CIPAID
                        FROM v_getgrpdealformular v, afmast af, cfmast cf, dfgroup df
                        where af.custid=cf.custid and v.afacctno=af.acctno and v.groupid=df.groupid AND v.VNDSELLDF >0
                        */
                SELECT A.*,
                        LEAST(A.SUMAMT, A.DFBLOCKORG) DFBLOCKAMT_LEAST,
                        ROUND(A.SUMAMT - LEAST(A.SUMAMT, A.DFBLOCKAMT)) CIPAID
                  FROM (SELECT V.*,
                                CF.CUSTODYCD,
                                CF.FULLNAME,
                                CF.IDCODE,
                                CF.ADDRESS,
                                DF.ORGAMT,
                                DF.RLSAMT + DF.DFAMT DFPAIDAMT,
                                ROUND(FN_GETAMT4GRPDEAL(V.GROUPID, 0, 5)) SUMAMT,
                                DF.DFBLOCKAMT DFBLOCKORG,
                                GREATEST(GETAVLCIWITHDRAW(V.AFACCTNO, 'N'), 0) CIAVLWITHDRAW
                           FROM V_GETGRPDEALFORMULAR V,
                                AFMAST               AF,
                                CFMAST               CF,
                                DFGROUP              DF,
                                DFTYPE               DFT
                          WHERE AF.CUSTID = CF.CUSTID
                            AND V.AFACCTNO = AF.ACCTNO
                            AND V.GROUPID = DF.GROUPID
                            AND DF.ACTYPE = DFT.ACTYPE
                            AND DFT.ISVSD <> 'Y'
                            AND V.VNDSELLDF > 0
                            AND AF.AUTOADV = 'Y' --Them vao theo luat cua BSC. Neu khong UTTB tu dong thi phai ung va tra no = tay
                         ) A) LOOP
      -- v_pqtty:=rec.pqtty;
      --plog.debug (pkgctx,'Paid qtty ' || v_pqtty);
      V_TOTALPAIDAMT := 0;
      --1.Tra no cho cac phan deal ban ma chua thanh toan het nghia vu tra no
      --sts.Aqtty: Phan da thanh toan nghia vu tra no
      --sts.qtty: Phan ban khop cua deal
      --sts.qtty-sts.aqtty: Phan chung khoan ban ma  chau thuc hien nghia vu tra no.
      --GIAO DICH 2643

      /*
      HaiLT bo doan nay
      cspks_dfproc.pr_DealAutoPayment(l_txmsg,rec.acctno,rec.autoid ,v_pqtty,0,v_paidamt ,p_err_code);
      plog.debug (pkgctx,'v_paidamt ' || v_paidamt);
      */

      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;

      -- update cimast set balance = balance - rec.VNDSELLDF where acctno = rec.afacctno;

      -- SELECT INTPAIDMETHOD into v_strINTPAIDMETHOD FROM LNMAST WHERE ACCTNO IN (SELECT LNACCTNO FROM DFGROUP WHERE GROUPID=rec.GROUPID);

      -- Neu tra lai thu vao ky tra goc cuoi cung thi treo khoan tra no vao` trong DFGROUP roi lam = tay
      IF NVL(INSTR('L', REC.INTPAIDMETHOD), 0) > 0 AND
         (REC.CURAMT <= (REC.VNDSELLDF + REC.DFBLOCKORG)) AND
         (REC.VNDSELLDF + REC.DFBLOCKORG < REC.SUMAMT) THEN

        --update cimast set balance = balance - rec.VNDSELLDF where acctno = rec.afacctno;

        --INSERT INTO CITRAN (TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,REF,DELTD,ACCTREF,AUTOID,TLTXCD,BKDATE,TRDESC)
        --VALUES(l_txmsg.txnum,TO_DATE(v_strCURRDATE,'DD/MM/RRRR'),rec.afacctno,'0011',0,NULL,NULL,'N',NULL,rec.VNDSELLDF,'',TO_DATE(v_strCURRDATE,'DD/MM/RRRR'),NULL);

        SELECT TO_DATE((SELECT VARVALUE
                         FROM SYSVAR
                        WHERE VARNAME = 'CURRDATE'),
                       'DD/MM/RRRR') - TO_DATE(OVERDUEDATE, 'DD/MM/RRRR')
          INTO L_DAYDUE
          FROM LNSCHD
         WHERE ACCTNO = REC.LNACCTNO
           AND REFTYPE = 'P';

        -- Neu qua han
        IF L_DAYDUE >= 0 THEN
          L_AMTPAID := REC.VNDSELLDF + REC.DFBLOCKORG;

          SELECT LEAST(OVD, L_AMTPAID) L_OVD,
                 LEAST(L_AMTPAID, GREATEST(L_AMTPAID - OVD, 0), NML) L_NML,
                 GREATEST(LEAST(OVD, L_AMTPAID),
                          LEAST(L_AMTPAID, GREATEST(L_AMTPAID - OVD, 0), NML)) L_PAID,
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML, 0),
                       INTOVD) L_INTOVD,
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML - INTOVD, 0),
                       INTOVDPRIN) L_INTOVDPRIN,
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML, 0),
                       INTOVD) +
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML - INTOVD, 0),
                       INTOVDPRIN) L_INTPAID,
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML - INTOVD - INTOVDPRIN,
                                0),
                       FEEINTNMLOVD) L_FEEINTNMLOVD,
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML - INTOVD - INTOVDPRIN -
                                FEEINTNMLOVD,
                                0),
                       FEEINTOVDACR) L_FEEINTOVDACR,
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML - INTOVD - INTOVDPRIN,
                                0),
                       FEEINTNMLOVD) +
                 LEAST(L_AMTPAID,
                       GREATEST(L_AMTPAID - OVD - NML - INTOVD - INTOVDPRIN -
                                FEEINTNMLOVD,
                                0),
                       FEEINTOVDACR) L_FEEINTPAID
            INTO L_OVD,
                 L_NML,
                 L_PAID,
                 L_INTOVD,
                 L_INTOVDPRIN,
                 L_INTPAID,
                 L_FEEINTNMLOVD,
                 L_FEEINTOVDACR,
                 L_FEEINTPAID
            FROM LNSCHD
           WHERE REFTYPE = 'P'
             AND ACCTNO = REC.LNACCTNO;

          -- Tao giao dich 2636
          L_TXMSG.TLTXCD := '2636';
          --03  AFACCTNO        C
          L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

          --05  LNACCTNO         C
          L_TXMSG.TXFIELDS('05').DEFNAME := 'LNACCTNO';
          L_TXMSG.TXFIELDS('05').TYPE := 'C';
          L_TXMSG.TXFIELDS('05').VALUE := REC.LNACCTNO;

          --10  PRINOVD         S? ti?n g?c qu??n
          L_TXMSG.TXFIELDS('10').DEFNAME := 'PRINOVD';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := L_OVD;

          --11  PRINNML         S? ti?n g?c trong h?n
          L_TXMSG.TXFIELDS('11').DEFNAME := 'PRINNML';
          L_TXMSG.TXFIELDS('11').TYPE := 'N';
          L_TXMSG.TXFIELDS('11').VALUE := L_NML;

          --12  PRINPAID        S? ti?n g?c tr?
          L_TXMSG.TXFIELDS('12').DEFNAME := 'PRINPAID';
          L_TXMSG.TXFIELDS('12').TYPE := 'N';
          L_TXMSG.TXFIELDS('12').VALUE := L_PAID;

          --13  INTNMLOVD       S? ti?n l?qu??n
          L_TXMSG.TXFIELDS('13').DEFNAME := 'INTNMLOVD';
          L_TXMSG.TXFIELDS('13').TYPE := 'N';
          L_TXMSG.TXFIELDS('13').VALUE := L_INTOVD;

          --18    INTOVDACR
          L_TXMSG.TXFIELDS('18').DEFNAME := 'INTOVDACR';
          L_TXMSG.TXFIELDS('18').TYPE := 'N';
          L_TXMSG.TXFIELDS('18').VALUE := L_INTOVDPRIN;

          --14  INTPAID         S? ti?n l?tr?
          L_TXMSG.TXFIELDS('14').DEFNAME := 'INTPAID';
          L_TXMSG.TXFIELDS('14').TYPE := 'N';
          L_TXMSG.TXFIELDS('14').VALUE := L_INTPAID;

          --15  FEEINTNMLOVD    S? ti?n ph?u??n
          L_TXMSG.TXFIELDS('15').DEFNAME := 'FEEINTNMLOVD';
          L_TXMSG.TXFIELDS('15').TYPE := 'N';
          L_TXMSG.TXFIELDS('15').VALUE := L_FEEINTNMLOVD;

          --19    l_FEEINTOVDACR
          L_TXMSG.TXFIELDS('19').DEFNAME := 'FEEINTOVDACR';
          L_TXMSG.TXFIELDS('19').TYPE := 'N';
          L_TXMSG.TXFIELDS('19').VALUE := L_FEEINTOVDACR;

          --16  FEEINTPAID      S? ti?n ph?r?
          L_TXMSG.TXFIELDS('16').DEFNAME := 'FEEINTPAID';
          L_TXMSG.TXFIELDS('16').TYPE := 'N';
          L_TXMSG.TXFIELDS('16').VALUE := L_FEEINTPAID;

          SELECT TXDESC INTO V_STRDESC FROM TLTX WHERE TLTXCD = '2636';

          --30  DESC            Di?n gi?i
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

          BEGIN
            IF TXPKS_#2636.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 2636: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;

          /*update lnschd set ovd= ovd - least(ovd, l_amtpaid), nml=nml-least(l_amtpaid, greatest(l_amtpaid-ovd,0),NML),
              paid=paid+ GREATEST(least(ovd, l_amtpaid), least(l_amtpaid, greatest(l_amtpaid-ovd,0),NML)),
              INTOVD = INTOVD - least(l_amtpaid, greatest(l_amtpaid-ovd - nml,0),INTOVD),
              INTPAID=INTPAID + least(l_amtpaid, greatest(l_amtpaid-ovd - nml,0),INTOVD),
              FEEINTNMLOVD = FEEINTNMLOVD - least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD,0),FEEINTNMLOVD),
              feeintpaid =  feeintpaid + least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD,0),FEEINTNMLOVD)
          where reftype='P' and ACCTNO  = rec.LNACCTNO;

          INSERT INTO LNSCHDLOG (AUTOID, TXNUM, TXDATE, OVD, NML, PAID,INTOVD,INTPAID,FEEINTOVD,feeintpaid)
              SELECT AUTOID, l_txmsg.txnum, TO_DATE(l_txmsg.txdate,'DD/MM/RRRR'), -l_ovd, -l_nml, l_paid, -l_INTOVD, l_INTPAID, -l_FEEINTNMLOVD, l_feeintpaid
                  from lnschd
              where reftype='P' and ACCTNO  = rec.LNACCTNO;*/

        ELSE

          -- UPDATE DFGROUP SET DFBLOCKAMT = DFBLOCKAMT + rec.VNDSELLDF WHERE GROUPID = rec.GROUPID;
          -- INSERT INTO DFTRAN(TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,ACCTREF,DELTD,R,AUTOID,TLTXCD,BKDATE,TRDESC)
          --     VALUES (l_txmsg.txnum, TO_DATE (v_strCURRDATE, 'DD/MM/RRRR'),rec.GROUPID,'0080',rec.VNDSELLDF,EFNULL,'','N','',seq_DFTRAN.NEXTVAL,l_txmsg.tltxcd,TO_DATE(v_strCURRDATE,'DD/MM/RRRR'),'');

          -- Tao giao dich 2635
          L_TXMSG.TLTXCD := '2635';
          --03  AFACCTNO        C
          L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

          --20  GROUPID         C
          L_TXMSG.TXFIELDS('20').DEFNAME := 'GROUPID';
          L_TXMSG.TXFIELDS('20').TYPE := 'C';
          L_TXMSG.TXFIELDS('20').VALUE := REC.GROUPID;

          --34  DFBLOCKAMT      N
          L_TXMSG.TXFIELDS('34').DEFNAME := 'DFBLOCKAMT';
          L_TXMSG.TXFIELDS('34').TYPE := 'N';
          L_TXMSG.TXFIELDS('34').VALUE := REC.VNDSELLDF;

          SELECT TXDESC INTO V_STRDESC FROM TLTX WHERE TLTXCD = '2635';

          --30  DESCRIPTION C
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESCRIPTION';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

          BEGIN
            IF TXPKS_#2635.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 2635: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;

        END IF;

      ELSE

        L_TXMSG.TLTXCD := '2648';
        --02  CUSTODYCD       C
        L_TXMSG.TXFIELDS('02').DEFNAME := 'CUSTODYCD';
        L_TXMSG.TXFIELDS('02').TYPE := 'C';
        L_TXMSG.TXFIELDS('02').VALUE := REC.CUSTODYCD;

        --03  AFACCTNO        C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

        --57  CUSTNAME        C
        L_TXMSG.TXFIELDS('57').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('57').TYPE := 'C';
        L_TXMSG.TXFIELDS('57').VALUE := REC.FULLNAME;

        --58  ADDRESS         C
        L_TXMSG.TXFIELDS('58').DEFNAME := 'ADDRESS';
        L_TXMSG.TXFIELDS('58').TYPE := 'C';
        L_TXMSG.TXFIELDS('58').VALUE := REC.ADDRESS;

        --59  LICENSE         C
        L_TXMSG.TXFIELDS('59').DEFNAME := 'LICENSE';
        L_TXMSG.TXFIELDS('59').TYPE := 'C';
        L_TXMSG.TXFIELDS('59').VALUE := REC.IDCODE;

        --05  GROUPID         C
        L_TXMSG.TXFIELDS('05').DEFNAME := 'GROUPID';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.GROUPID;

        --06  ORGAMT          N
        L_TXMSG.TXFIELDS('06').DEFNAME := 'ORGAMT';
        L_TXMSG.TXFIELDS('06').TYPE := 'N';
        L_TXMSG.TXFIELDS('06').VALUE := REC.ORGAMT;

        --07  DFPAIDAMT       N
        L_TXMSG.TXFIELDS('07').DEFNAME := 'DFPAIDAMT';
        L_TXMSG.TXFIELDS('07').TYPE := 'N';
        L_TXMSG.TXFIELDS('07').VALUE := REC.DFPAIDAMT;

        --08  CURAMT          N
        L_TXMSG.TXFIELDS('08').DEFNAME := 'CURAMT';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.CURAMT);

        --09  CURINT          N
        L_TXMSG.TXFIELDS('09').DEFNAME := 'CURINT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := ROUND(REC.CURINT);

        --20  INTMIN          N
        L_TXMSG.TXFIELDS('20').DEFNAME := 'INTMIN';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := ROUND(REC.INTMIN);

        --10  CURFEE          N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'CURFEE';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.CURFEE);

        --21  FEEMIN          N
        L_TXMSG.TXFIELDS('21').DEFNAME := 'FEEMIN';
        L_TXMSG.TXFIELDS('21').TYPE := 'N';
        L_TXMSG.TXFIELDS('21').VALUE := ROUND(REC.FEEMIN);

        --12  TADF            N
        L_TXMSG.TXFIELDS('12').DEFNAME := 'TADF';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := REC.TADF;

        --13  IRATE           N
        L_TXMSG.TXFIELDS('13').DEFNAME := 'IRATE';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := REC.IRATE;

        --14  MRATE           N
        L_TXMSG.TXFIELDS('14').DEFNAME := 'MRATE';
        L_TXMSG.TXFIELDS('14').TYPE := 'N';
        L_TXMSG.TXFIELDS('14').VALUE := REC.MRATE;

        --15  LRATE           N
        L_TXMSG.TXFIELDS('15').DEFNAME := 'LRATE';
        L_TXMSG.TXFIELDS('15').TYPE := 'N';
        L_TXMSG.TXFIELDS('15').VALUE := REC.LRATE;

        --22  SUMAMT          N
        L_TXMSG.TXFIELDS('22').DEFNAME := 'SUMAMT';
        L_TXMSG.TXFIELDS('22').TYPE := 'N';
        L_TXMSG.TXFIELDS('22').VALUE := REC.SUMAMT;

        --16  RTTDF           N
        L_TXMSG.TXFIELDS('16').DEFNAME := 'RTTDF';
        L_TXMSG.TXFIELDS('16').TYPE := 'N';
        L_TXMSG.TXFIELDS('16').VALUE := REC.RTTDF;

        --23  DFBLOCKORG      N
        L_TXMSG.TXFIELDS('23').DEFNAME := 'DFBLOCKORG';
        L_TXMSG.TXFIELDS('23').TYPE := 'N';
        L_TXMSG.TXFIELDS('23').VALUE := REC.DFBLOCKORG;

        --17  DFBLOCKAMT      N
        L_TXMSG.TXFIELDS('17').DEFNAME := 'DFBLOCKAMT';
        L_TXMSG.TXFIELDS('17').TYPE := 'N';
        L_TXMSG.TXFIELDS('17').VALUE := REC.DFBLOCKAMT_LEAST;

        --18  CIAVLWITHDRAW   N
        L_TXMSG.TXFIELDS('18').DEFNAME := 'CIAVLWITHDRAW';
        L_TXMSG.TXFIELDS('18').TYPE := 'N';
        L_TXMSG.TXFIELDS('18').VALUE := REC.CIAVLWITHDRAW;

        --19  CIPAID      N
        L_TXMSG.TXFIELDS('19').DEFNAME := 'CIPAID';
        L_TXMSG.TXFIELDS('19').TYPE := 'N';
        L_TXMSG.TXFIELDS('19').VALUE := LEAST(REC.SUMAMT - REC.DFBLOCKAMT,
                                              REC.VNDSELLDF);

        --- 25  2648    DEFAMT
        L_TXMSG.TXFIELDS('25').DEFNAME := 'DEFAMT';
        L_TXMSG.TXFIELDS('25').TYPE := 'N';
        L_TXMSG.TXFIELDS('25').VALUE := REC.SUMAMT - REC.DFBLOCKAMT;

        --- 26  2648    SUMPAID S? ti?n n?p
        L_TXMSG.TXFIELDS('26').DEFNAME := 'SUMPAID';
        L_TXMSG.TXFIELDS('26').TYPE := 'N';
        L_TXMSG.TXFIELDS('26').VALUE := LEAST(REC.DFBLOCKAMT +
                                              REC.VNDSELLDF,
                                              REC.SUMAMT);

        --- 34  2648    AMTPAID Tr? g?c
        L_TXMSG.TXFIELDS('34').DEFNAME := 'AMTPAID';
        L_TXMSG.TXFIELDS('34').TYPE := 'N';
        L_TXMSG.TXFIELDS('34').VALUE := ROUND(FN_GETAMT4GRPDEAL(REC.GROUPID,
                                                                LEAST(REC.DFBLOCKAMT +
                                                                      REC.VNDSELLDF,
                                                                      REC.SUMAMT),
                                                                0));

        --- 35  2648    INTPAID Tr? l?
        L_TXMSG.TXFIELDS('35').DEFNAME := 'INTPAID';
        L_TXMSG.TXFIELDS('35').TYPE := 'N';
        L_TXMSG.TXFIELDS('35').VALUE := ROUND(FN_GETAMT4GRPDEAL(REC.GROUPID,
                                                                LEAST(REC.DFBLOCKAMT +
                                                                      REC.VNDSELLDF,
                                                                      REC.SUMAMT),
                                                                1));

        --- 36  2648    FEEPAID Tr? ph?
        L_TXMSG.TXFIELDS('36').DEFNAME := 'FEEPAID';
        L_TXMSG.TXFIELDS('36').TYPE := 'N';
        L_TXMSG.TXFIELDS('36').VALUE := ROUND(FN_GETAMT4GRPDEAL(REC.GROUPID,
                                                                LEAST(REC.DFBLOCKAMT +
                                                                      REC.VNDSELLDF,
                                                                      REC.SUMAMT),
                                                                2));

        SELECT TXDESC INTO V_STRDESC FROM TLTX WHERE TLTXCD = '2648';

        --30  DESCRIPTION C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESCRIPTION';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

        BEGIN
          IF TXPKS_#2648.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 2648: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

      END IF;

    /*   if rec.VNDSELLDF > 0  then

                cspks_ciproc.pr_DFAutoAdvance(rec.GROUPID,rec.VNDSELLDF,p_err_code);

            end if;
    */
    --Nhom UTTB vao thanh 1  giao dich nen khong thuc hien UTTB theo tung deal de tra nua.
    /*v_totalpaidamt:=v_totalpaidamt+v_paidamt;
            --2.Ung truoc tien ban bu cho cac deal
            --Phan tien se lay o phan ung truoc. Va ung toi da bang kha nang ung cua lenh ban
            --Neu ung het cua lenh ban ma khong du tra cho deal thi se khau tru tu CI.Balance
            --GIAO DICH 1143
            if v_totalpaidamt>0 then
                plog.debug (pkgctx,'v_totalpaidamt ' || v_totalpaidamt);
                cspks_ciproc.pr_CIAutoAdvance(l_txmsg,rec.orderid,v_totalpaidamt,v_advamt,p_err_code);
                plog.debug (pkgctx,'advance amount ' || v_advamt);
            end if;*/
    END LOOP;

    --- cap nhap giam DFQTTY trong DFMAST doi voi cac lenh ban cam co
    L_TXMSG.TLTXCD := '2684';

    SELECT TXDESC INTO V_STRDESC FROM TLTX WHERE TLTXCD = '2684';

    --for rec1 in ( SELECT * FROM ODMAPEXT WHERE DELTD<>'Y' AND STATUS <> 'Y' AND EXECQTTY>0 AND REFID in (SELECT ACCTNO FROM DFMAST WHERE GROUPID = rec.GROUPID)  )
    FOR REC1 IN (SELECT *
                   FROM ODMAPEXT
                  WHERE DELTD <> 'Y'
                    AND EXECQTTY > 0
                    AND TYPE = 'D') LOOP

      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;

      SELECT AFACCTNO, GROUPID, CODEID
        INTO V_STRAFACCTNOTMP, V_STRGROUPIDTMP, V_STRCODEIDTMP
        FROM DFMAST
       WHERE ACCTNO = REC1.REFID;

      --20  GROUPID     C
      L_TXMSG.TXFIELDS('20').DEFNAME := 'GROUPID';
      L_TXMSG.TXFIELDS('20').TYPE := 'C';
      L_TXMSG.TXFIELDS('20').VALUE := V_STRGROUPIDTMP;

      --05  ACCTNO      C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC1.REFID;

      --08  ACCTNO      C
      L_TXMSG.TXFIELDS('08').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := REC1.ORDERID;

      --03  AFACCTNO    C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := V_STRAFACCTNOTMP;

      --01  CODEID      C
      L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('01').TYPE := 'C';
      L_TXMSG.TXFIELDS('01').VALUE := V_STRCODEIDTMP;

      --75  QTTY        N
      L_TXMSG.TXFIELDS('75').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('75').TYPE := 'N';
      L_TXMSG.TXFIELDS('75').VALUE := REC1.EXECQTTY;

      --55  DEALTYPE    C
      L_TXMSG.TXFIELDS('55').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('55').TYPE := 'C';
      L_TXMSG.TXFIELDS('55').VALUE := 'N';

      --30  DESC        C
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#2684.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2684: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;

    /*
            UPDATE DFMAST SET DFQTTY = DFQTTY - rec1.EXECQTTY, RLSQTTY = RLSQTTY + rec1.EXECQTTY WHERE ACCTNO = rec1.REFID;

            update securities_info
            set syroomused = nvl(syroomused,0) - rec1.EXECQTTY
            where codeid = (select codeid from odmast where orderid = rec1.ORDERID);

            SELECT AFACCTNO, GROUPID INTO v_strAFACCTNOTmp, v_strGROUPIDTmp from dfmast where acctno = rec1.REFID;

            INSERT INTO DFTRAN(TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,ACCTREF,DELTD,REF,AUTOID,TLTXCD,BKDATE,TRDESC)
            VALUES (l_txmsg.txnum, TO_DATE (l_txmsg.txdate, systemnums.C_DATE_FORMAT),v_strGROUPIDTmp,'0011',rec1.EXECQTTY,NULL,v_strAFACCTNOTmp,l_txmsg.deltd,v_strAFACCTNOTmp,seq_DFTRAN.NEXTVAL,l_txmsg.tltxcd,l_txmsg.busdate,'' || '' || '');

            INSERT INTO DFTRAN(TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,ACCTREF,DELTD,REF,AUTOID,TLTXCD,BKDATE,TRDESC)
            VALUES (l_txmsg.txnum, TO_DATE (l_txmsg.txdate, systemnums.C_DATE_FORMAT),v_strGROUPIDTmp,'0016',rec1.EXECQTTY,NULL,v_strAFACCTNOTmp,l_txmsg.deltd,v_strAFACCTNOTmp,seq_DFTRAN.NEXTVAL,l_txmsg.tltxcd,l_txmsg.busdate,'' || '' || '');

            UPDATE ODMAPEXT SET STATUS = 'Y', DELTD = 'Y' WHERE  DELTD<>'Y' AND EXECQTTY= rec1.EXECQTTY AND ORDERID = rec1.ORDERID AND REFID = rec1.REFID;
    */
    END LOOP;

    -- Giai toa chung khoan neu tra het no
    L_TXMSG.TLTXCD := '2649';

    FOR REC2649 IN (SELECT A.ACCTNO,
                           A.AFACCTNO,
                           A.LNACCTNO,
                           A.TXDATE,
                           A.TXNUM,
                           A.TXTIME,
                           A.ACTYPE,
                           A.RRTYPE,
                           A.DFTYPE,
                           A.CUSTBANK,
                           A.LNTYPE,
                           A.FEE,
                           A.FEEMIN,
                           A.TAX,
                           A.AMTMIN,
                           A.CODEID,
                           A.REFPRICE,
                           A.DFPRICE,
                           A.TRIGGERPRICE,
                           A.DFRATE,
                           A.IRATE,
                           A.MRATE,
                           A.LRATE,
                           A.CALLTYPE,
                           A.DFQTTY,
                           A.RCVQTTY,
                           A.BLOCKQTTY,
                           A.CARCVQTTY,
                           A.BQTTY,
                           A.RLSQTTY,
                           A.DFAMT,
                           A.RLSAMT,
                           A.AMT,
                           A.INTAMTACR,
                           A.FEEAMT,
                           A.RLSFEEAMT,
                           A.STATUS,
                           A.DFREF,
                           A.DESCRIPTION,
                           A.PSTATUS,
                           A.CIACCTNO,
                           A.LAST_CHANGE,
                           A.LIMITCHK,
                           A.FLAGTRIGGER,
                           A.ORGAMT,
                           A.AUTOPAID,
                           A.TRIGGERDATE,
                           A.TLID,
                           A.CISVRFEE,
                           A.GROUPID,
                           A.DEALTYPE,
                           A.GRPORDAMT,
                           A.CACASHQTTY,
                           A.CAQTTY,
                           ROUND(FN_GETAMT4GRPDEAL(A.GROUPID, 0, 5)) SUMAMT
                      FROM DFMAST A, DFTYPE B
                     WHERE A.ACTYPE = B.ACTYPE
                       AND B.ISVSD = 'N'
                       AND ROUND(FN_GETAMT4GRPDEAL(A.GROUPID, 0, 5)) = 0) LOOP
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;

      PLOG.DEBUG(PKGCTX, '2649 ' || REC2649.GROUPID);
      --20  GROUPID     C
      L_TXMSG.TXFIELDS('20').DEFNAME := 'GROUPID';
      L_TXMSG.TXFIELDS('20').TYPE := 'C';
      L_TXMSG.TXFIELDS('20').VALUE := REC2649.GROUPID;

      --25  DFACCTNO    C
      L_TXMSG.TXFIELDS('25').DEFNAME := 'DFACCTNO';
      L_TXMSG.TXFIELDS('25').TYPE := 'C';
      L_TXMSG.TXFIELDS('25').VALUE := REC2649.ACCTNO;

      --05  ACCTNO      C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC2649.AFACCTNO || REC2649.CODEID;

      --88  CUSTODYCD   C
      L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('88').TYPE := 'C';
      L_TXMSG.TXFIELDS('88').VALUE := '';

      --03  AFACCTNO    C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC2649.AFACCTNO;

      --01  CODEID      C
      L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
      L_TXMSG.TXFIELDS('01').TYPE := 'C';
      L_TXMSG.TXFIELDS('01').VALUE := REC2649.CODEID;

      --41  DFQTTY      N
      L_TXMSG.TXFIELDS('41').DEFNAME := 'DFQTTY';
      L_TXMSG.TXFIELDS('41').TYPE := 'N';
      L_TXMSG.TXFIELDS('41').VALUE := REC2649.DFQTTY;

      --45  CACASHQTTY  N
      L_TXMSG.TXFIELDS('45').DEFNAME := 'CACASHQTTY';
      L_TXMSG.TXFIELDS('45').TYPE := 'N';
      L_TXMSG.TXFIELDS('45').VALUE := REC2649.CACASHQTTY;

      --44  BLOCKQTTY   N
      L_TXMSG.TXFIELDS('44').DEFNAME := 'BLOCKQTTY';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC2649.BLOCKQTTY;

      --42  RCVQTTY     N
      L_TXMSG.TXFIELDS('42').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('42').TYPE := 'N';
      L_TXMSG.TXFIELDS('42').VALUE := REC2649.RCVQTTY;

      --43  CARCVQTTY   N
      L_TXMSG.TXFIELDS('43').DEFNAME := 'CARCVQTTY';
      L_TXMSG.TXFIELDS('43').TYPE := 'N';
      L_TXMSG.TXFIELDS('43').VALUE := REC2649.CARCVQTTY;

      --55  DEALTYPE    C
      L_TXMSG.TXFIELDS('55').DEFNAME := 'DEALTYPE';
      L_TXMSG.TXFIELDS('55').TYPE := 'C';
      L_TXMSG.TXFIELDS('55').VALUE := REC2649.DEALTYPE;

      --99  LIMITCHECK  C
      L_TXMSG.TXFIELDS('99').DEFNAME := 'LIMITCHECK';
      L_TXMSG.TXFIELDS('99').TYPE := 'C';
      L_TXMSG.TXFIELDS('99').VALUE := '';

      SELECT TXDESC INTO V_STRDESC FROM TLTX WHERE TLTXCD = '2649';

      --30  DESC        C
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#2649.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2649: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;

    END LOOP;

    /*
        -- Chuyen tien vao DFBLOCKAMT doi voi truong hop cam co VSD
        l_txmsg.tltxcd:='2635';
        for recVSD in ( SELECT C.GROUPID, A.AFACCTNO,
                              FLOOR(SUM(GREATEST(ROUND(A.AMT/A.QTTY*B.QTTY *(100-A.DEFFEERATE-A.SECDUTY)/100),0))  * (1-FEERATE*DAYS/100/360))  maxdepoamt
                         FROM (

                           SELECT  1 ISMORTAGE,STSCHD.AFACCTNO,AMT,QTTY,CFMAST.FULLNAME,CFMAST.ADDRESS,CFMAST.idcode LICENSE,FAMT,
                                     CUSTODYCD,STSCHD.SYMBOL,AAMT,ORGORDERID,PAIDAMT,PAIDFEEAMT,
                                     --SYSVAR1.VARVALUE FEERATE,
                                     ADT.ADVRATE FEERATE,
                                     SYSVAR2.VARVALUE MINBAL,STSCHD.TXDATE,
                                    STSCHD.CLEARDATE,STSCHD.SECDUTY,ODTYPE.DEFFEERATE,
                                 (CASE WHEN CLEARDATE -(CASE WHEN LENGTH(SYSVAR.VARVALUE)=10 THEN TO_DATE(SYSVAR.VARVALUE,'DD/MM/YYYY') ELSE CLEARDATE END)=0 THEN 1 ELSE   CLEARDATE -(CASE WHEN LENGTH(SYSVAR.VARVALUE)=10 THEN TO_DATE(SYSVAR.VARVALUE,'DD/MM/YYYY') ELSE CLEARDATE END)END) DAYS

                             FROM
                             (SELECT STS.ORGORDERID,STS.TXDATE,STS.AFACCTNO, STS.CODEID CODEID,
                                     STS.CLEARDAY ,STS.CLEARCD,STS.AMT ,
                                     STS.QTTY,STS.FAMT,STS.AAMT,STS.PAIDAMT,
                                     STS.PAIDFEEAMT ,MST.actype ,MST.EXECTYPE ,
                                     AF.custid ,sts.CLEARDATE ,SEC.SYMBOL,
                                    (CASE WHEN TYP.VAT='Y' THEN TO_NUMBER(SYS.VARVALUE) ELSE 0 END) SECDUTY
                                 FROM STSCHD STS,ODMAST MST,AFMAST AF,SBSECURITIES SEC, AFTYPE TYP, SYSVAR SYS
                                 WHERE STS.codeid=SEC.codeid AND STS.orgorderid=MST.orderid and mst.afacctno=af.acctno
                                 AND STS.DELTD <> 'Y' AND STS.STATUS='N' AND STS.DUETYPE='RM'
                                     AND AF.ACTYPE=TYP.ACTYPE AND SYS.VARNAME='ADVSELLDUTY' AND SYS.GRNAME='SYSTEM'
                              ) STSCHD,SYSVAR,SYSVAR SYSVAR1,SYSVAR SYSVAR2,ODTYPE,CFMAST, AFMAST AFM, AFTYPE AFT, ADTYPE ADT
                             WHERE AMT>0
                             AND STSCHD.AFACCTNO=AFM.ACCTNO AND AFM.ACTYPE=AFT.ACTYPE AND AFT.ADTYPE=ADT.ACTYPE
                             AND SYSVAR.VARNAME='CURRDATE' AND SYSVAR.GRNAME='SYSTEM'
                             AND SYSVAR1.VARNAME='AINTRATE' AND SYSVAR1.GRNAME='SYSTEM'
                             AND SYSVAR2.VARNAME='AMINBAL' AND SYSVAR2.GRNAME='SYSTEM'
                             AND STSCHD.CUSTID=CFMAST.CUSTID
                             AND STSCHD.ACTYPE=ODTYPE.ACTYPE
                             AND STSCHD.txdate=to_date((SELECT VARVALUE FROM SYSVAR WHERE VARNAME='CURRDATE'),'DD/MM/YYYY')

                         ) A ,
                         (SELECT ORDERID, REFID, EXECQTTY QTTY FROM odmapext WHERE DELTD<>'Y' AND STATUS <> 'Y' AND EXECQTTY>0) B,
                         DFMAST C, DFGROUP DF, DFTYPE DFT

                         WHERE A.DAYS>0 AND GREATEST(ROUND(A.AMT*(100-A.DEFFEERATE-A.SECDUTY)/100 - FAMT),0) >0
                             AND B.ORDERID=A.ORGORDERID AND B.REFID=C.ACCTNO AND C.GROUPID=DF.GROUPID AND DF.ACTYPE=DFT.ACTYPE AND DFT.ISVSD = 'Y'
                         GROUP BY C.GROUPID, A.AFACCTNO,(1-FEERATE*DAYS/100/360)
                     )
        loop
            SELECT systemnums.C_BATCH_PREFIXED
                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
            --03  AFACCTNO        C
            l_txmsg.txfields ('03').defname   := 'AFACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := recVSD.AFACCTNO;

            --20  GROUPID         C
            l_txmsg.txfields ('20').defname   := 'GROUPID';
            l_txmsg.txfields ('20').TYPE      := 'C';
            l_txmsg.txfields ('20').VALUE     := recVSD.GROUPID;

            --34  DFBLOCKAMT      N
            l_txmsg.txfields ('34').defname   := 'DFBLOCKAMT';
            l_txmsg.txfields ('34').TYPE      := 'N';
            l_txmsg.txfields ('34').VALUE     :=  recVSD.maxdepoamt;

            SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2635';

            --30  DESCRIPTION C
            l_txmsg.txfields ('30').defname   := 'DESCRIPTION';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDesc;

            BEGIN
                IF txpks_#2635.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.debug (pkgctx,
                               'got error 2635: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end loop;


        -- Phong toa cam co VSD
        l_txmsg.tltxcd:='2620';
        FOR recVSD IN
            (
              SELECT DISTINCT DFG.GROUPID,  CF.CUSTODYCD, DFG.AFACCTNO, CF.FULLNAME, CF.ADDRESS, CF.IDCODE
              FROM DFGROUP DFG, DFTYPE DFT, CFMAST CF, AFMAST AF
              WHERE DFG.ACTYPE = DFT.ACTYPE AND DFT.ISVSD='Y'
                  AND DFG.AFACCTNO = AF.ACCTNO AND AF.CUSTID = CF.CUSTID
                  AND DFG.ISVSD='N'
            )
        LOOP
            SELECT systemnums.C_BATCH_PREFIXED
                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;

            --05  GROUPID         C
            l_txmsg.txfields ('05').defname   := 'GROUPID';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := recVSD.GROUPID;

            --02  CUSTODYCD        C
            l_txmsg.txfields ('02').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := recVSD.CUSTODYCD;

            --03  AFACCTNO        C
            l_txmsg.txfields ('03').defname   := 'AFACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := recVSD.AFACCTNO;

            --57  CUSTNAME        C
            l_txmsg.txfields ('57').defname   := 'CUSTNAME';
            l_txmsg.txfields ('57').TYPE      := 'C';
            l_txmsg.txfields ('57').VALUE     := recVSD.FULLNAME;

            --58  ADDRESS        C
            l_txmsg.txfields ('58').defname   := 'ADDRESS';
            l_txmsg.txfields ('58').TYPE      := 'C';
            l_txmsg.txfields ('58').VALUE     := recVSD.ADDRESS;

            --59  LICENSE        C
            l_txmsg.txfields ('59').defname   := 'LICENSE';
            l_txmsg.txfields ('59').TYPE      := 'C';
            l_txmsg.txfields ('59').VALUE     := recVSD.IDCODE;

            SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2620';

            --30  DESCRIPTION C
            l_txmsg.txfields ('30').defname   := 'DESCRIPTION';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDesc;

            BEGIN
                IF txpks_#2620.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.debug (pkgctx,
                               'got error 2620: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        END LOOP;
    */

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFAutoAdvToPayment');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_DFAutoAdvToPayment');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.DEBUG(PKGCTX,
                 'pr_DFAutoAdvToPayment: ' ||
                 DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFAutoAdvToPayment');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFAUTOADVTOPAYMENT;

  ---------------------------------pr_DFDealTransferSec------------------------------------------------
  PROCEDURE PR_DFDEALTRANSFERSEC(P_BCHMDL   VARCHAR,
                                 P_ERR_CODE OUT VARCHAR2,
                                 P_FROMROW  NUMBER,
                                 P_TOROW    NUMBER,
                                 P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFDealTransferSec');
    P_LASTRUN := 'Y';

    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2662';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2662';
    for rec in
    (
        SELECT MST.AUTOID, LEAST(MST.QTTY-MST.AQTTY,DF.DFQTTY) RCVQTTY,DF.ACCTNO, MST.AFACCTNO, MST.CODEID
            FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,
            SBSECURITIES SEC,ODMAST OD, DFMAST DF
            WHERE MST.CODEID=SEC.CODEID AND MST.ORGORDERID=OD.ORDERID
            AND MST.DUETYPE='SS' AND MST.STATUS='C' AND MST.DELTD<>'Y' AND OD.DFACCTNO = DF.ACCTNO
            AND OD.EXECTYPE='MS' AND OD.DELTD <> 'Y' AND MST.QTTY-MST.AQTTY>0
            ORDER BY ORGORDERID, DUETYPE
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --02    ACCTNO      C
        l_txmsg.txfields ('02').defname   := 'ACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;

        --05   C   AFACCTNO
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;

        --10   RCVQTTY         N
        l_txmsg.txfields ('10').defname   := 'RCVQTTY';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.RCVQTTY;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := v_strDesc;

        BEGIN
            IF txpks_#2662.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 2662: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;*/
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFDealTransferSec');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_DFDealTransferSec');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFDealTransferSec');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFDEALTRANSFERSEC;

  ---------------------------------pr_ODSettlementReceiveMoney------------------------------------------------
  PROCEDURE PR_ODSETTLEMENTRECEIVESEC(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementReceiveSec');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8868';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8868';
    FOR REC IN (--ngoc.vu-Jira561: chuyen tu dem so ngay >=Clearday sang dung cleardate
               SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                       CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(ODMST.FEEACR) FEEACR,
                       MIN(GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT,0)) AMT, -- HSX04 MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(GREATEST(MST.QTTY - ODMST.NETEXECQTTY - ODMST.CFNETEXECQTTY ,0)) QTTY, --HSX04 MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE < CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.CLEARDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RS')
                   AND CF.CUSTATCOM = 'Y'
                   AND SEC.SECTYPE NOT IN ('003', '006')
                 GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO
                HAVING MIN(MST.CLEARDAY) <= (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.ACCTNO;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   MATCHPRICE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'MATCHPRICE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.MATCHPRICE;
      --11   N   RCVQTTY
      L_TXMSG.TXFIELDS('11').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.QTTY;
      --12   N   PARVALUE
      L_TXMSG.TXFIELDS('12').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.PARVALUE;
      --13   N   FEEACR
      L_TXMSG.TXFIELDS('13').DEFNAME := 'FEEACR';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.FEEACR;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF V_BLNVIETNAMESE = TRUE THEN
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := V_STREN_DESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' date ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      END IF;
      UPDATE SECMAST
         SET MAPAVL = 'Y'
       WHERE ORDERID = REC.ORGORDERID
         AND ACCTNO = REC.AFACCTNO;
      BEGIN
        IF TXPKS_#8868.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8868: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveSec');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive securities');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveSec');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTRECEIVESEC;
  --T2-NAMNT
  PROCEDURE PR_ODSETTLEMENTRECEIVESEC_TEMP(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
    l_CHGBCHORDERSTARTDATE date;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_ODSETTLEMENTRECEIVESEC_TEMP');
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8868';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8868';
    FOR REC IN (SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                       CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE
                             WHEN CLR1.HOLIDAY = 'Y' THEN
                              0
                             ELSE
                              1
                           END) WITHHOLIDAY,
                       SUM(CASE
                             WHEN CLR1.HOLIDAY = 'Y' THEN
                              1
                             ELSE
                              1
                           END) WITHOUTHOLIDAY,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(ODMST.FEEACR) FEEACR,
                       MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE < CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RS')
                   AND CF.CUSTATCOM = 'Y'
                   AND ODMST.TXDATE < L_CHGBCHORDERSTARTDATE -- T10/2015 TTBT T+2 BEGIN
                   AND SEC.SECTYPE NOT IN ('003', '006')
                 GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO
                HAVING MIN(MST.CLEARDAY) <= (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.ACCTNO;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   MATCHPRICE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'MATCHPRICE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.MATCHPRICE;
      --11   N   RCVQTTY
      L_TXMSG.TXFIELDS('11').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.QTTY;
      --12   N   PARVALUE
      L_TXMSG.TXFIELDS('12').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.PARVALUE;
      --13   N   FEEACR
      L_TXMSG.TXFIELDS('13').DEFNAME := 'FEEACR';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.FEEACR;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF V_BLNVIETNAMESE = TRUE THEN
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := V_STREN_DESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' date ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      END IF;
      UPDATE SECMAST
         SET MAPAVL = 'Y'
       WHERE ORDERID = REC.ORGORDERID
         AND ACCTNO = REC.AFACCTNO;
      BEGIN
        IF TXPKS_#8868.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8868: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_ODSETTLEMENTRECEIVESEC_TEMP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive securities');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_ODSETTLEMENTRECEIVESEC_TEMP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTRECEIVESEC_TEMP;

  PROCEDURE PR_ODSETTLEMENTRECEIVESEC_TP(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2,
                                         P_FROMROW  NUMBER,
                                         P_TOROW    NUMBER,
                                         P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementReceiveSec_TP');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8868';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8868';
    FOR REC IN (--ngoc.vu-Jira561: chuyen tu dem so ngay >=Clearday sang dung cleardate
               SELECT SUBSTR(MAX(CUSTODYCD), 4, 1) CUSTODYCD,
                       MAX(COSTPRICE) COSTPRICE,
                       CLR2.SBDATE,
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT) CURRDATE,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
                       SUM(CASE WHEN CLR1.HOLIDAY = 'Y' THEN 1 ELSE 1  END) WITHOUTHOLIDAY,
                       MST.AUTOID,
                       MST.AFACCTNO,
                       MAX(ODMST.ORDERQTTY) ORGORDERQTTY,
                       MAX(ODMST.EXECTYPE) EXECTYPE,
                       MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE,
                       MST.ACCTNO,
                       MIN(MST.DUETYPE) DUETYPE,
                       MIN(MST.TXDATE) TXDATE,
                       MIN(MST.ORGORDERID) ORGORDERID,
                       MIN(MST.CLEARCD) CLEARCD,
                       MIN(MST.CLEARDAY) CLEARDAY,
                       MIN(SEC.CODEID) CODEID,
                       MIN(SEC.SYMBOL) SYMBOL,
                       MIN(SEC.PARVALUE) PARVALUE,
                       MIN(TYP.VATRATE) VATRATE,
                       MIN(ODMST.FEEACR - ODMST.FEEAMT) AVLFEEAMT,
                       MIN(ODMST.FEEACR) FEEACR,
                       MIN(GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT,0)) AMT, -- HSX04 MIN(MST.AMT) AMT,
                       MIN(MST.AAMT) AAMT,
                       MIN(MST.FAMT) FAMT,
                       MIN(GREATEST(MST.QTTY-ODMST.NETEXECQTTY - ODMST.CFNETEXECQTTY ,0)) QTTY, --HSX04 MIN(MST.QTTY) QTTY,
                       MIN(ODMST.EXECQTTY) SQTTY,
                       MIN(MST.AQTTY) AQTTY,
                       ROUND(MIN(MST.AMT / MST.QTTY), 4) MATCHPRICE
                  FROM SBCLDR CLR1,
                       SBCLDR CLR2,
                       (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM STSCHD A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST,
                       AFMAST AF,
                       CFMAST CF,
                       ODTYPE TYP,
                       SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CLR1.SBDATE >= MST.TXDATE
                   AND CLR1.SBDATE < CLR2.SBDATE
                   AND CLR2.SBDATE >= MST.TXDATE
                   AND CLR1.CLDRTYPE = SEC.TRADEPLACE
                   AND CLR2.CLDRTYPE = SEC.TRADEPLACE
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND CLR2.SBDATE =
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.CLEARDATE <=
                       TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RS')
                   AND CF.CUSTATCOM = 'Y'
                   AND SEC.SECTYPE IN ('003', '006')
                 GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO
                HAVING MIN(MST.CLEARDAY) <= (CASE
                  WHEN MIN(MST.CLEARCD) = 'B' THEN
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          0
                         ELSE
                          1
                       END)
                  ELSE
                   SUM(CASE
                         WHEN CLR1.HOLIDAY = 'Y' THEN
                          1
                         ELSE
                          1
                       END)
                END)
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.ACCTNO;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   MATCHPRICE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'MATCHPRICE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.MATCHPRICE;
      --11   N   RCVQTTY
      L_TXMSG.TXFIELDS('11').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.QTTY;
      --12   N   PARVALUE
      L_TXMSG.TXFIELDS('12').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.PARVALUE;
      --13   N   FEEACR
      L_TXMSG.TXFIELDS('13').DEFNAME := 'FEEACR';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.FEEACR;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF V_BLNVIETNAMESE = TRUE THEN
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := V_STREN_DESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      END IF;
      BEGIN
        IF TXPKS_#8868.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8868: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveSec_TP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive securities');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveSec_TP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTRECEIVESEC_TP;

  ---------------------------------pr_DealReceive------------------------------------------------
  PROCEDURE PR_DEALRECEIVE(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DealReceive');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    /*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2661';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2661';
    FOR REC IN (SELECT DF.ACCTNO,
                       STS.AUTOID,
                       DF.RCVQTTY,
                       LEAST(STS.AQTTY, M.ADFQTTY, DF.RCVQTTY) AQTTY,
                       STS.ACCTNO SEACCTNO,
                       DF.AFACCTNO
                  FROM STSCHD        STS,
                       V_GETDEALINFO DF,
                       STDFMAP       M,
                       SBSECURITIES  SB
                 WHERE DF.RCVQTTY > 0
                   AND STS.AQTTY > 0
                   AND STS.CODEID = SB.CODEID
                   AND SB.SECTYPE NOT IN ('003', '006')
                   AND STS.AUTOID = M.STSCHDID
                   AND M.DFACCTNO = DF.ACCTNO
                   AND STS.STATUS = 'C'
                   AND DUETYPE = 'RS') LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --02   ACCTNO     C
      L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.ACCTNO;
      --05   AFACCTNO   C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.SEACCTNO;
      --10   RCVQTTY    N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AQTTY;
      --11   CARCVQTTY    N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'CARCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := 0;
      --12   BLOCKQTTY    N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'BLOCKQTTY';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#2661.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2661: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DealReceive');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_DealReceive');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DealReceive');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DEALRECEIVE;
 ---------------------------------PR_DEALRECEIVE_TEMP------------------------------------------------
  PROCEDURE PR_DEALRECEIVE_TEMP(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_DEALRECEIVE_TEMP');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    /*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2661';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2661';
    FOR REC IN (SELECT DF.ACCTNO,
                       STS.AUTOID,
                       DF.RCVQTTY,
                       LEAST(STS.AQTTY, M.ADFQTTY, DF.RCVQTTY) AQTTY,
                       STS.ACCTNO SEACCTNO,
                       DF.AFACCTNO
                  FROM STSCHD        STS,
                       V_GETDEALINFO DF,
                       STDFMAP       M,
                       SBSECURITIES  SB
                 WHERE DF.RCVQTTY > 0
                   AND STS.AQTTY > 0
                   AND STS.CODEID = SB.CODEID
                   AND SB.SECTYPE NOT IN ('003', '006')
                   AND STS.AUTOID = M.STSCHDID
                   AND M.DFACCTNO = DF.ACCTNO
                   AND STS.STATUS = 'C'
                   AND DUETYPE = 'RS') LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --02   ACCTNO     C
      L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.ACCTNO;
      --05   AFACCTNO   C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.SEACCTNO;
      --10   RCVQTTY    N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AQTTY;
      --11   CARCVQTTY    N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'CARCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := 0;
      --12   BLOCKQTTY    N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'BLOCKQTTY';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#2661.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2661: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_DEALRECEIVE_TEMP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on PR_DEALRECEIVE_TEMP');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_DEALRECEIVE_TEMP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DEALRECEIVE_TEMP;
  ---------------------------------pr_DealReceive_TP------------------------------------------------
  PROCEDURE PR_DEALRECEIVE_TP(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DealReceive_TP');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    /*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '2661';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '2661';
    FOR REC IN (SELECT DF.ACCTNO,
                       STS.AUTOID,
                       DF.RCVQTTY,
                       LEAST(STS.AQTTY, M.ADFQTTY, DF.RCVQTTY) AQTTY,
                       STS.ACCTNO SEACCTNO,
                       DF.AFACCTNO
                  FROM STSCHD        STS,
                       V_GETDEALINFO DF,
                       STDFMAP       M,
                       SBSECURITIES  SB
                 WHERE DF.RCVQTTY > 0
                   AND STS.AQTTY > 0
                   AND STS.CODEID = SB.CODEID
                   AND SB.SECTYPE IN ('003', '006')
                   AND STS.AUTOID = M.STSCHDID
                   AND M.DFACCTNO = DF.ACCTNO
                   AND STS.STATUS = 'C'
                   AND DUETYPE = 'RS') LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --02   ACCTNO     C
      L_TXMSG.TXFIELDS('02').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.ACCTNO;
      --05   AFACCTNO   C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.SEACCTNO;
      --10   RCVQTTY    N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AQTTY;
      --11   CARCVQTTY    N
      L_TXMSG.TXFIELDS('11').DEFNAME := 'CARCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := 0;
      --12   BLOCKQTTY    N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'BLOCKQTTY';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#2661.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 2661: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DealReceive_TP');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_DealReceive_TP');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DealReceive_TP');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DEALRECEIVE_TP;

  ---------------------------------fn_SettlementOrder------------------------------------------------
  FUNCTION FN_SETTLEMENTORDER(P_TXMSG    IN TX.MSG_RECTYPE,
                              P_ERR_CODE OUT VARCHAR2) RETURN NUMBER IS
    V_BLNREVERSAL  BOOLEAN;
    L_LNGERRCODE   NUMBER(20, 0);
    V_AFACCTNO     VARCHAR2(30);
    V_CODEID       VARCHAR2(30);
    V_STATUS       VARCHAR2(30);
    V_DUETYPE      VARCHAR2(30);
    V_ORDERID      VARCHAR2(30);
    V_DBLCOSTPRICE NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'fn_SettlementOrder');
    PLOG.DEBUG(PKGCTX, '<<BEGIN OF fn_SettlementOrder');
    /***************************************************************************************************
    ** PUT YOUR SPECIFIC AFTER PROCESS HERE. DO NOT COMMIT/ROLLBACK HERE, THE SYSTEM WILL DO IT
    ***************************************************************************************************/
    V_BLNREVERSAL := CASE
                       WHEN P_TXMSG.DELTD = 'Y' THEN
                        TRUE
                       ELSE
                        FALSE
                     END;
    L_LNGERRCODE  := ERRNUMS.C_BIZ_RULE_INVALID;
    P_ERR_CODE    := 0;
    IF NOT V_BLNREVERSAL THEN
      --CHieu lam thuan giao dich
      BEGIN
        PLOG.DEBUG(PKGCTX, 'tltxcd:' || P_TXMSG.TLTXCD);
        IF P_TXMSG.TLTXCD = '8865' THEN
          UPDATE STSCHD
             SET AAMT = AMT
           WHERE AUTOID = P_TXMSG.TXFIELDS('01').VALUE;
        END IF;

        PLOG.DEBUG(PKGCTX, 'autoid:' || P_TXMSG.TXFIELDS('01').VALUE);

        SELECT STATUS, AFACCTNO, CODEID, DUETYPE, ORGORDERID
          INTO V_STATUS, V_AFACCTNO, V_CODEID, V_DUETYPE, V_ORDERID
          FROM STSCHD
         WHERE AUTOID = P_TXMSG.TXFIELDS('01').VALUE;
        PLOG.DEBUG(PKGCTX, 'v_codeid:' || V_CODEID);
        PLOG.DEBUG(PKGCTX, 'v_afacctno:' || V_AFACCTNO);
        PLOG.DEBUG(PKGCTX, 'v_duetype:' || V_DUETYPE);

        BEGIN
          SELECT COSTPRICE
            INTO V_DBLCOSTPRICE
            FROM SEMAST
           WHERE ACCTNO = V_AFACCTNO || V_CODEID;
        EXCEPTION
          WHEN OTHERS THEN
            V_DBLCOSTPRICE := 0;
        END;

        PLOG.DEBUG(PKGCTX, 'seacctno:' || V_AFACCTNO || V_CODEID);
        IF V_STATUS = 'C' THEN
          --Lenh da thanh toan roi
          PLOG.ERROR(PKGCTX,
                     'l_lngErrCode: ' || ERRNUMS.C_OD_STSCHD_IS_CLOSED);
          P_ERR_CODE := ERRNUMS.C_OD_STSCHD_IS_CLOSED;
          RETURN L_LNGERRCODE;
        ELSE
          IF V_DUETYPE = 'SS' THEN
            UPDATE STSCHD
               SET COSTPRICE = V_DBLCOSTPRICE
             WHERE ORGORDERID = V_ORDERID;
          END IF;

          UPDATE STSCHD
             SET STATUS = 'C'
           WHERE STATUS <> 'C'
             AND AUTOID = P_TXMSG.TXFIELDS('01').VALUE;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          PLOG.ERROR(PKGCTX,
                     'l_lngErrCode: ' || ERRNUMS.C_OD_STSCHD_NOTFOUND);
          P_ERR_CODE := ERRNUMS.C_OD_STSCHD_NOTFOUND;
          RETURN L_LNGERRCODE;
      END;

    ELSE
      --Chieu revert giao dich
      BEGIN
        SELECT STATUS
          INTO V_STATUS
          FROM STSCHD
         WHERE AUTOID = P_TXMSG.TXFIELDS('01').VALUE;
        IF V_STATUS = 'N' THEN
          PLOG.ERROR(PKGCTX,
                     'l_lngErrCode: ' || ERRNUMS.C_OD_STSCHD_STATUSINVALID);
          P_ERR_CODE := ERRNUMS.C_OD_STSCHD_STATUSINVALID;
          RETURN L_LNGERRCODE;
        ELSE
          UPDATE STSCHD
             SET STATUS = 'N'
           WHERE STATUS = 'C'
             AND AUTOID = P_TXMSG.TXFIELDS('01').VALUE;
          IF P_TXMSG.TLTXCD = '8865' THEN
            UPDATE STSCHD
               SET AAMT = 0
             WHERE AUTOID = P_TXMSG.TXFIELDS('01').VALUE;
          END IF;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          PLOG.ERROR(PKGCTX,
                     'l_lngErrCode: ' || ERRNUMS.C_OD_STSCHD_NOTFOUND);
          P_ERR_CODE := ERRNUMS.C_OD_STSCHD_NOTFOUND;
          RETURN L_LNGERRCODE;
      END;

    END IF;
    PLOG.DEBUG(PKGCTX, '<<END OF fn_SettlementOrder');
    PLOG.SETENDSECTION(PKGCTX, 'fn_SettlementOrder');
    RETURN SYSTEMNUMS.C_SUCCESS;
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'fn_SettlementOrder');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END FN_SETTLEMENTORDER;

  ---------------------------------fn_AdjustPaymentSchedule------------------------------------------------
  FUNCTION FN_ADJUSTPAYMENTSCHEDULE(P_TXMSG    IN TX.MSG_RECTYPE,
                                    P_ERR_CODE OUT VARCHAR2) RETURN NUMBER IS
    V_BLNREVERSAL  BOOLEAN;
    L_LNGERRCODE   NUMBER(20, 0);
    V_DBLINTAMT    NUMBER(20, 4);
    V_STRREFTYPE   VARCHAR2(10);
    V_DBLFEEINTAMT NUMBER(20, 4);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'fn_AdjustPaymentSchedule');
    PLOG.DEBUG(PKGCTX, '<<BEGIN OF fn_AdjustPaymentSchedule');
    /***************************************************************************************************
    ** PUT YOUR SPECIFIC AFTER PROCESS HERE. DO NOT COMMIT/ROLLBACK HERE, THE SYSTEM WILL DO IT
    ***************************************************************************************************/
    L_LNGERRCODE   := ERRNUMS.C_BIZ_RULE_INVALID;
    P_ERR_CODE     := 0;
    V_BLNREVERSAL := CASE
                       WHEN P_TXMSG.DELTD = 'Y' THEN
                        TRUE
                       ELSE
                        FALSE
                     END;
    V_DBLINTAMT    := 0;
    V_DBLFEEINTAMT := 0;
    BEGIN
      V_DBLINTAMT := GREATEST(TO_NUMBER(P_TXMSG.TXFIELDS('10').VALUE),
                              V_DBLINTAMT);
    EXCEPTION
      WHEN OTHERS THEN
        V_DBLINTAMT := V_DBLINTAMT;
    END;
    BEGIN
      V_DBLINTAMT := GREATEST(TO_NUMBER(P_TXMSG.TXFIELDS('11').VALUE),
                              V_DBLINTAMT);
    EXCEPTION
      WHEN OTHERS THEN
        V_DBLINTAMT := V_DBLINTAMT;
    END;
    BEGIN
      V_DBLINTAMT := GREATEST(TO_NUMBER(P_TXMSG.TXFIELDS('12').VALUE),
                              V_DBLINTAMT);
    EXCEPTION
      WHEN OTHERS THEN
        V_DBLINTAMT := V_DBLINTAMT;
    END;
    BEGIN
      V_DBLFEEINTAMT := GREATEST(TO_NUMBER(P_TXMSG.TXFIELDS('09').VALUE),
                                 V_DBLFEEINTAMT);
    EXCEPTION
      WHEN OTHERS THEN
        V_DBLFEEINTAMT := V_DBLFEEINTAMT;
    END;
    V_DBLINTAMT    := ROUND(V_DBLINTAMT, 0);
    V_DBLFEEINTAMT := ROUND(V_DBLFEEINTAMT, 0);
    IF P_TXMSG.TLTXCD IN ('5533', '5565', '5534') THEN
      V_STRREFTYPE := 'I';
    ELSIF P_TXMSG.TLTXCD IN ('5523', '5564', '5524') THEN
      V_STRREFTYPE := 'P';
    END IF;
    --'Update data
    IF P_TXMSG.TLTXCD IN ('5533', '5523', '5565', '5564') THEN
      --Chuyen qua han
      IF NOT V_BLNREVERSAL THEN
        UPDATE LNSCHD
           SET NML        = NML - (V_DBLINTAMT),
               OVD        = OVD + V_DBLINTAMT,
               NMLFEEINT  = NMLFEEINT - (V_DBLFEEINTAMT),
               OVDFEEINT  = OVDFEEINT + V_DBLFEEINTAMT,
               PDUESTS    = PDUESTS || DUESTS,
               DUESTS     = P_TXMSG.TXFIELDS('06').VALUE,
               OVDACRDATE = TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT)
         WHERE AUTOID = P_TXMSG.TXFIELDS('05').VALUE;
        INSERT INTO LNSCHDLOG
          (AUTOID,
           TXNUM,
           TXDATE,
           NML,
           OVD,
           PAID,
           INTNMLACR,
           FEE,
           INTDUE,
           INTOVD,
           INTOVDPRIN,
           FEEDUE,
           FEEOVD,
           INTPAID,
           FEEPAID,
           NMLFEEINT,
           OVDFEEINT)
        VALUES
          (P_TXMSG.TXFIELDS('05').VALUE,
           P_TXMSG.TXNUM,
           TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT),
           - (V_DBLINTAMT),
           V_DBLINTAMT,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           - (V_DBLFEEINTAMT),
           V_DBLFEEINTAMT);
      ELSE
        UPDATE LNSCHD
           SET NML       = NML + V_DBLINTAMT,
               OVD       = OVD - (V_DBLINTAMT),
               NMLFEEINT = NMLFEEINT + V_DBLFEEINTAMT,
               OVDFEEINT = OVDFEEINT - (V_DBLFEEINTAMT),
               DUESTS    = SUBSTR(PDUESTS, LENGTH(PDUESTS), 1),
               PDUESTS   = SUBSTR(PDUESTS, 1, LENGTH(PDUESTS) - 1)
         WHERE AUTOID = P_TXMSG.TXFIELDS('05').VALUE;
        DELETE LNSCHDLOG
         WHERE TXNUM = P_TXMSG.TXNUM
           AND TXDATE = TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT);
      END IF;
    ELSIF P_TXMSG.TLTXCD IN ('5534', '5524') THEN
      IF NOT V_BLNREVERSAL THEN
        UPDATE LNSCHD
           SET NML     = NML + V_DBLINTAMT,
               OVD     = OVD - (V_DBLINTAMT),
               PDUESTS = PDUESTS || DUESTS,
               DUESTS  = P_TXMSG.TXFIELDS('06').VALUE
         WHERE AUTOID = P_TXMSG.TXFIELDS('05').VALUE;
        INSERT INTO LNSCHDLOG
          (AUTOID,
           TXNUM,
           TXDATE,
           NML,
           OVD,
           PAID,
           INTNMLACR,
           FEE,
           INTDUE,
           INTOVD,
           INTOVDPRIN,
           FEEDUE,
           FEEOVD,
           INTPAID,
           FEEPAID)
        VALUES
          (P_TXMSG.TXFIELDS('05').VALUE,
           P_TXMSG.TXNUM,
           TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT),
           V_DBLINTAMT,
           - (V_DBLINTAMT),
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0);
      ELSE
        UPDATE LNSCHD
           SET NML     = NML - (V_DBLINTAMT),
               OVD     = OVD + (V_DBLINTAMT),
               DUESTS  = SUBSTR(PDUESTS, LENGTH(PDUESTS), 1),
               PDUESTS = SUBSTR(PDUESTS, 1, LENGTH(PDUESTS) - 1)
         WHERE AUTOID = P_TXMSG.TXFIELDS('05').VALUE;
        DELETE LNSCHDLOG
         WHERE TXNUM = P_TXMSG.TXNUM
           AND TXDATE = TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT);
      END IF;
    END IF;

    PLOG.DEBUG(PKGCTX, '<<END OF fn_AdjustPaymentSchedule');
    PLOG.SETENDSECTION(PKGCTX, 'fn_AdjustPaymentSchedule');
    RETURN SYSTEMNUMS.C_SUCCESS;
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'fn_AdjustPaymentSchedule');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END FN_ADJUSTPAYMENTSCHEDULE;

  ---------------------------------fn_LoanPaymentScheduleAllocate------------------------------------------------
  FUNCTION FN_LOANPAYMENTSCHEDULEALLOCATE(P_TXMSG    IN TX.MSG_RECTYPE,
                                          P_ERR_CODE OUT VARCHAR2)
    RETURN NUMBER IS
    V_BLNREVERSAL      BOOLEAN;
    L_LNGERRCODE       NUMBER(20, 0);
    V_DBLINTAMT        NUMBER(20, 4);
    V_STRREFTYPE       VARCHAR2(10);
    V_DBLDFQTTY        NUMBER(20, 4);
    V_DBLRCVQTTY       NUMBER(20, 4);
    V_STRDFACCTNO      VARCHAR2(30);
    V_STRDFREF         VARCHAR2(30);
    V_DBLEXECRCVQTTY   NUMBER(20, 4);
    V_DBLREMAINRCVQTTY NUMBER(20, 4);
    V_DBLCARCVQTTY     NUMBER(20, 4);
    V_DBLBLOCKQTTY     NUMBER(20, 4);
    V_STRRLSQTTY       NUMBER(20, 4);
    V_STRTXNUM         VARCHAR2(30);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'fn_LoanPaymentScheduleAllocate');
    PLOG.DEBUG(PKGCTX, '<<BEGIN OF fn_LoanPaymentScheduleAllocate');

    L_LNGERRCODE  := ERRNUMS.C_BIZ_RULE_INVALID;
    P_ERR_CODE    := 0;
    V_BLNREVERSAL := CASE
                       WHEN P_TXMSG.DELTD = 'Y' THEN
                        TRUE
                       ELSE
                        FALSE
                     END;
    IF NOT V_BLNREVERSAL THEN
      PLOG.DEBUG(PKGCTX, 'fn_Loanpaymentschd');
      IF P_TXMSG.TLTXCD = '2660' THEN

        P_ERR_CODE := CSPKS_LNPROC.FN_LOANPAYMENTSCHD(P_TXMSG.TXNUM,
                                                      P_TXMSG.TXDATE,
                                                      P_TXMSG.TXFIELDS('03')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      P_TXMSG.TXFIELDS('63')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('65')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      P_TXMSG.TXFIELDS('72')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('74')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('77')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('80')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      'N',
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0);

      ELSIF P_TXMSG.TLTXCD IN ('2642', '2647') THEN
        PLOG.DEBUG(PKGCTX, 'HaiLT 1 ' || P_TXMSG.TXFIELDS('03').VALUE);
        V_STRTXNUM     := P_TXMSG.TXNUM;
        V_STRDFACCTNO  := P_TXMSG.TXFIELDS('02').VALUE;
        V_STRRLSQTTY   := P_TXMSG.TXFIELDS('46').VALUE;
        V_STRDFREF     := P_TXMSG.TXFIELDS('29').VALUE;
        V_DBLDFQTTY    := P_TXMSG.TXFIELDS('91').VALUE;
        V_DBLRCVQTTY   := P_TXMSG.TXFIELDS('92').VALUE;
        V_DBLCARCVQTTY := P_TXMSG.TXFIELDS('93').VALUE;
        V_DBLBLOCKQTTY := P_TXMSG.TXFIELDS('94').VALUE;

        P_ERR_CODE := CSPKS_LNPROC.FN_LOANPAYMENTSCHD(P_TXMSG.TXNUM,
                                                      P_TXMSG.TXDATE,
                                                      P_TXMSG.TXFIELDS('03')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      P_TXMSG.TXFIELDS('63')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('65')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      P_TXMSG.TXFIELDS('72')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('74')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('77')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('80')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      'N',
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0);

        IF V_DBLRCVQTTY > 0 THEN
          V_DBLEXECRCVQTTY   := 0;
          V_DBLREMAINRCVQTTY := V_DBLRCVQTTY;
          FOR REC IN (SELECT M.STSCHDID,
                             M.DFACCTNO,
                             M.DFQTTY,
                             M.ADFQTTY,
                             S.ORGORDERID,
                             S.AQTTY
                        FROM STSCHD S, DFMAST D, STDFMAP M
                       WHERE S.AUTOID = M.STSCHDID
                         AND S.AQTTY > 0
                         AND M.DFACCTNO = D.ACCTNO
                         AND (TO_CHAR(S.TXDATE, 'DD/MM/RRRR') || S.AFACCTNO ||
                             S.CODEID || TO_CHAR(S.CLEARDAY)) = V_STRDFREF
                         AND M.DFACCTNO = V_STRDFACCTNO
                       ORDER BY AUTOID) LOOP
            V_DBLEXECRCVQTTY := LEAST(V_DBLREMAINRCVQTTY,
                                      REC.ADFQTTY,
                                      REC.AQTTY);

            UPDATE ODMAST
               SET DFQTTY      = DFQTTY - V_DBLEXECRCVQTTY,
                   LAST_CHANGE = SYSTIMESTAMP
             WHERE ORDERID = REC.ORGORDERID;

            UPDATE STSCHD
               SET AQTTY = AQTTY - V_DBLEXECRCVQTTY
             WHERE AUTOID = REC.STSCHDID;

            UPDATE STDFMAP
               SET ADFQTTY = ADFQTTY - V_DBLEXECRCVQTTY
             WHERE STSCHDID = REC.STSCHDID
               AND DFACCTNO = REC.DFACCTNO;

            V_DBLREMAINRCVQTTY := V_DBLREMAINRCVQTTY - V_DBLEXECRCVQTTY;
            IF V_DBLREMAINRCVQTTY = 0 THEN
              EXIT;
            END IF;
          END LOOP;

        END IF;
        IF V_DBLCARCVQTTY > 0 THEN
          UPDATE CASCHD
             SET DFQTTY = DFQTTY - V_DBLCARCVQTTY
           WHERE AUTOID = V_STRDFREF;
        END IF;
        /* If v_dblBLOCKQTTY > 0 Then
            UPDATE SEMASTDTL SET DFQTTY= DFQTTY - v_dblBLOCKQTTY WHERE TXNUM || to_char(TXDATE,'DD/MM/RRRR')= v_strDFREF;
        End IF;*/

        INSERT INTO DFSENDVSDDTL
        VALUES
          (V_STRTXNUM, V_STRDFACCTNO, V_STRRLSQTTY, 0, SYSDATE);

      ELSIF P_TXMSG.TLTXCD IN ('5567') THEN
        P_ERR_CODE := CSPKS_LNPROC.FN_LOANPAYMENTSCHD_BY_AUTOID(P_TXMSG.TXNUM,
                                                                P_TXMSG.TXDATE,
                                                                P_TXMSG.TXFIELDS('03')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('60')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('61')
                                                                .VALUE + P_TXMSG.TXFIELDS('62')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('63')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('64')
                                                                .VALUE + P_TXMSG.TXFIELDS('65')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('70')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('75')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('78')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('71')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('73')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('76')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('79')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('72')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('74')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('77')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('80')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('47')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('82')
                                                                .VALUE,
                                                                'Y',
                                                                P_TXMSG.TXFIELDS('50')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('54')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('52')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('57')
                                                                .VALUE,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                P_TXMSG.TXFIELDS('85')
                                                                .VALUE,
                                                                P_TXMSG.TXFIELDS('01')
                                                                .VALUE);

      ELSE
        P_ERR_CODE := CSPKS_LNPROC.FN_LOANPAYMENTSCHD(P_TXMSG.TXNUM,
                                                      P_TXMSG.TXDATE,
                                                      P_TXMSG.TXFIELDS('03')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('60')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('61')
                                                      .VALUE + P_TXMSG.TXFIELDS('62')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('63')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('64')
                                                      .VALUE + P_TXMSG.TXFIELDS('65')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('70')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('75')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('78')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('71')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('73')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('76')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('79')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('72')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('74')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('77')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('80')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('47')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('82')
                                                      .VALUE,
                                                      'Y',
                                                      P_TXMSG.TXFIELDS('50')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('54')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('52')
                                                      .VALUE,
                                                      P_TXMSG.TXFIELDS('57')
                                                      .VALUE,
                                                      0,
                                                      0,
                                                      0,
                                                      0);
      END IF;

    ELSE
      FOR REC IN (SELECT *
                    FROM (SELECT AUTOID,
                                 TXNUM,
                                 TXDATE,
                                 NML,
                                 OVD,
                                 PAID,
                                 INTNMLACR,
                                 FEE,
                                 INTDUE,
                                 INTOVD,
                                 INTOVDPRIN,
                                 FEEDUE,
                                 FEEOVD,
                                 INTPAID,
                                 FEEPAID,
                                 FEEPAID2,
                                 FEEINTNMLACR,
                                 FEEINTDUE,
                                 FEEINTOVD,
                                 FEEINTOVDPRIN
                            FROM LNSCHDLOG
                          UNION ALL
                          SELECT AUTOID,
                                 TXNUM,
                                 TXDATE,
                                 NML,
                                 OVD,
                                 PAID,
                                 INTNMLACR,
                                 FEE,
                                 INTDUE,
                                 INTOVD,
                                 INTOVDPRIN,
                                 FEEDUE,
                                 FEEOVD,
                                 INTPAID,
                                 FEEPAID,
                                 FEEPAID2,
                                 FEEINTNMLACR,
                                 FEEINTDUE,
                                 FEEINTOVD,
                                 FEEINTOVDPRIN
                            FROM LNSCHDLOGHIST)
                   WHERE TXNUM = P_TXMSG.TXNUM
                     AND TXDATE =
                         TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT)) LOOP
        UPDATE LNSCHD
           SET NML          = NML - REC.NML,
               OVD          = OVD - REC.OVD,
               PAID         = PAID - REC.PAID,
               INTNMLACR    = INTNMLACR - REC.INTNMLACR,
               FEE          = FEE - REC.FEE,
               INTDUE       = INTDUE - REC.INTDUE,
               INTOVD       = INTOVD - REC.INTOVD,
               INTOVDPRIN   = INTOVDPRIN - REC.INTOVDPRIN,
               FEEDUE       = FEEDUE - REC.FEEDUE,
               FEEOVD       = FEEOVD - REC.FEEOVD,
               INTPAID      = INTPAID - REC.INTPAID,
               FEEPAID      = FEEPAID - REC.FEEPAID,
               FEEPAID2     = FEEPAID2 - REC.FEEPAID2,
               FEEINTNMLACR = FEEINTNMLACR - REC.FEEINTNMLACR,
               FEEINTDUE    = FEEINTDUE - REC.FEEINTDUE,
               FEEINTOVDACR = FEEINTOVDACR - REC.FEEINTOVD,

               FEEINTNMLOVD = FEEINTNMLOVD - REC.FEEINTOVDPRIN
         WHERE AUTOID = REC.AUTOID;
      END LOOP;
      DELETE LNSCHDLOG
       WHERE TXNUM = P_TXMSG.TXNUM
         AND TXDATE = TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT);
      DELETE LNSCHDLOGHIST
       WHERE TXNUM = P_TXMSG.TXNUM
         AND TXDATE = TO_DATE(P_TXMSG.TXDATE, SYSTEMNUMS.C_DATE_FORMAT);
    END IF;
    PLOG.DEBUG(PKGCTX, '<<END OF fn_LoanPaymentScheduleAllocate');
    PLOG.SETENDSECTION(PKGCTX, 'fn_LoanPaymentScheduleAllocate');
    RETURN SYSTEMNUMS.C_SUCCESS;
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'fn_LoanPaymentScheduleAllocate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END FN_LOANPAYMENTSCHEDULEALLOCATE;

  ---------------------------------fn_DrawndownProcess------------------------------------------------
  FUNCTION FN_DRAWNDOWNPROCESS(P_TXMSG    IN TX.MSG_RECTYPE,
                               P_ERR_CODE OUT VARCHAR2) RETURN NUMBER IS
    V_BLNREVERSAL              BOOLEAN;
    L_LNGERRCODE               NUMBER(20, 0);
    V_DBLINTAMT                NUMBER(20, 4);
    V_STRREFTYPE               VARCHAR2(10);
    V_STRTRFACCTNO             VARCHAR2(100);
    V_STRLNTYPE                VARCHAR2(100);
    V_DBLLNRLSAMT              NUMBER(20, 4);
    V_STRLNCLDR                VARCHAR2(100);
    V_STRNINTCD                VARCHAR2(100);
    V_LNGPRINFRQ               NUMBER(20, 4);
    V_LNGPRINPERIOD            NUMBER(20, 4);
    V_LNGOPRINFRQ              NUMBER(20, 4);
    V_LNGOPRINPERIOD           NUMBER(20, 4);
    V_STRDUEDATE               VARCHAR2(20);
    V_STROVERDUEDATE           VARCHAR2(20);
    V_INTWITHHOLIDAY           NUMBER(20, 0);
    V_INTWITHOUTHOLIDAY        NUMBER(20, 0);
    V_INTDUENO                 NUMBER(20, 0);
    I                          NUMBER(20, 0);
    V_COMPANYCD                VARCHAR2(10);
    V_STRCURRDATE              VARCHAR2(20);
    V_ACCTNO_LIST_NOT_DRAWDOWN VARCHAR2(1000);
    L_ISRUN                    VARCHAR2(1);
    V_DBLRATE1                 NUMBER(20, 4);
    V_DBLRATE2                 NUMBER(20, 4);
    V_DBLRATE3                 NUMBER(20, 4);
    V_DBLCFRATE1               NUMBER(20, 4);
    V_DBLCFRATE2               NUMBER(20, 4);
    V_DBLCFRATE3               NUMBER(20, 4);
    V_INTPRINTFRQ3             NUMBER(20, 4);
    V_LNAUTOID                 NUMBER(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'fn_DrawndownProcess');
    PLOG.DEBUG(PKGCTX, '<<BEGIN OF fn_DrawndownProcess');
    /***************************************************************************************************
    ** PUT YOUR SPECIFIC AFTER PROCESS HERE. DO NOT COMMIT/ROLLBACK HERE, THE SYSTEM WILL DO IT
    ***************************************************************************************************/
    L_LNGERRCODE               := ERRNUMS.C_BIZ_RULE_INVALID;
    P_ERR_CODE                 := 0;
    V_BLNREVERSAL := CASE
                       WHEN P_TXMSG.DELTD = 'Y' THEN
                        TRUE
                       ELSE
                        FALSE
                     END;
    V_COMPANYCD                := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                             'COMPANYCD');
    V_STRCURRDATE              := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                             'CURRDATE');
    V_ACCTNO_LIST_NOT_DRAWDOWN := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                             'ACCTNO_LIST_NOT_DRAWDOWN');
    IF NOT V_BLNREVERSAL THEN
      /*
      Giai Ngan vay Margin
      */
      PLOG.DEBUG(PKGCTX, '<<BEGIN SELECT ' || P_TXMSG.TXFIELDS('03').VALUE);
      L_ISRUN := 1;
      BEGIN
        SELECT MST.TRFACCTNO,
               MST.LNTYPE,
               ROUND(MST.RLSAMT + MST.ORLSAMT, 0) RLSAMT,
               MST.LNCLDR,
               MST.PRINFRQ,
               MST.PRINPERIOD,
               MST.OPRINFRQ,
               MST.OPRINPERIOD,
               MST.RATE1,
               MST.RATE2,
               MST.RATE3,
               MST.CFRATE1,
               MST.CFRATE2,
               MST.CFRATE3,
               MST.PRINTFRQ3,
               MST.NINTCD
          INTO V_STRTRFACCTNO,
               V_STRLNTYPE,
               V_DBLLNRLSAMT,
               V_STRLNCLDR,
               V_LNGPRINFRQ,
               V_LNGPRINPERIOD,
               V_LNGOPRINFRQ,
               V_LNGOPRINPERIOD,
               V_DBLRATE1,
               V_DBLRATE2,
               V_DBLRATE3,
               V_DBLCFRATE1,
               V_DBLCFRATE2,
               V_DBLCFRATE3,
               V_INTPRINTFRQ3,
               V_STRNINTCD
          FROM LNMAST MST, CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT
         WHERE MST.ACCTNO = P_TXMSG.TXFIELDS('03').VALUE
           AND AF.ACTYPE = AFT.ACTYPE
           AND CF.CUSTID = AF.CUSTID
           AND AF.ACCTNO = CI.AFACCTNO
           AND CF.CUSTATCOM = 'Y'
           AND INSTR(V_ACCTNO_LIST_NOT_DRAWDOWN, AF.ACCTNO) = 0
           AND CI.ACCTNO = MST.TRFACCTNO;
      EXCEPTION
        WHEN OTHERS THEN
          L_ISRUN := 0;
      END;
      IF V_DBLLNRLSAMT = 0 THEN
        --Lan giai ngan dau tien
        UPDATE LNMAST
           SET RLSDATE = TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT)
         WHERE ACCTNO = P_TXMSG.TXFIELDS('03').VALUE;
        DELETE LNSCHD WHERE ACCTNO = P_TXMSG.TXFIELDS('03').VALUE;
      END IF;
      PLOG.DEBUG(PKGCTX,
                 '<<BEGIN Giai ngan vay margin ' || P_TXMSG.TXFIELDS('10')
                 .VALUE || ' ' || L_ISRUN);

      IF L_ISRUN = 1 AND P_TXMSG.TXFIELDS('10').VALUE > 0 THEN
        --Giai ngan vay margin
        IF V_STRLNCLDR = 'N' THEN
          --Lich tra no theo lich he thong
          /*v_strDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngPRINFRQ,systemnums.c_date_format);
          v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngPRINPERIOD,systemnums.c_date_format);
          begin
              SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strDUEDATE) into v_strDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
              SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
          exception
          when others then
              p_err_code:=0;--Ko bat exception
          end;*/
          IF V_STRNINTCD = '001' THEN
            -- 000: Cong Don; 001: Bac Thang
            V_STRDUEDATE     := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_INTPRINTFRQ3,
                                        SYSTEMNUMS.C_DATE_FORMAT);
            V_STROVERDUEDATE := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_INTPRINTFRQ3,
                                        SYSTEMNUMS.C_DATE_FORMAT);
          ELSE
            --v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngPRINFRQ,systemnums.c_date_format);

            V_STROVERDUEDATE := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_LNGPRINPERIOD,
                                        SYSTEMNUMS.C_DATE_FORMAT);
            --Ky han dau tien se luon tinh theo lich Business
            IF V_LNGPRINFRQ = 0 THEN
              V_STRDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(LEAST(SBDATE,
                                   TO_DATE(V_STROVERDUEDATE,
                                           SYSTEMNUMS.C_DATE_FORMAT)),
                             SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STRDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_LNGPRINFRQ;
            END IF;

          END IF;
          BEGIN
            SELECT NVL(TO_CHAR(MIN(SBDATE), SYSTEMNUMS.C_DATE_FORMAT),
                       V_STRDUEDATE)
              INTO V_STRDUEDATE
              FROM SBCLDR
             WHERE CLDRTYPE = '000'
               AND SBDATE >=
                   TO_DATE(V_STRDUEDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND SBDATE >=
                   TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND HOLIDAY = 'N';
            SELECT NVL(TO_CHAR(MIN(SBDATE), SYSTEMNUMS.C_DATE_FORMAT),
                       V_STROVERDUEDATE)
              INTO V_STROVERDUEDATE
              FROM SBCLDR
             WHERE CLDRTYPE = '000'
               AND SBDATE >=
                   TO_DATE(V_STROVERDUEDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND SBDATE >=
                   TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND HOLIDAY = 'N';
          EXCEPTION
            WHEN OTHERS THEN
              P_ERR_CODE := 0; --Ko bat exception
          END;
        ELSIF V_STRLNCLDR = 'B' THEN
          --Lich tra no tinh theo lich thanh toan
          /*i := v_lngPRINFRQ;
          v_strDUEDATE := p_txmsg.BUSDATE;
          v_intWITHHOLIDAY := 0;
          v_intWITHOUTHOLIDAY := 0;
          WHILE i > 0 LOOP
              begin
                  SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                          into v_intWITHOUTHOLIDAY,v_strDUEDATE
                  FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE(v_strDUEDATE ,systemnums.c_date_format) +  i;
              exception
              when others then
                  p_err_code:=0;--Ko bat exception
              end;
              v_intWITHHOLIDAY:=i - v_intWITHOUTHOLIDAY;
              i := v_intWITHHOLIDAY;
          END LOOP;
          If v_lngPRINPERIOD > 365 Then
              v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngPRINPERIOD,systemnums.c_date_format);
              begin
                  SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) DUEDATE
                  into v_strOVERDUEDATE
                  FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND HOLIDAY = 'N';
                  exception
              when others then
                  p_err_code:=0;--Ko bat exception
              end;
          else
              i := v_lngPRINPERIOD - v_lngPRINFRQ;
              v_strOVERDUEDATE := v_strDUEDATE;
              v_intWITHHOLIDAY := 0;
              v_intWITHOUTHOLIDAY := 0;
              WHILE i > 0 LOOP
                  begin
                      SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                      into v_intWITHOUTHOLIDAY,v_strOVERDUEDATE
                      FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE( v_strOVERDUEDATE ,systemnums.c_date_format) +  i;
                      v_intWITHHOLIDAY := i - v_intWITHOUTHOLIDAY;
                  exception
                  when others then
                      p_err_code:=0;--Ko bat exception
                  end;
                  i := v_intWITHHOLIDAY;
              end loop;
          end if;*/

          PLOG.DEBUG(PKGCTX,
                     '<<BEGIN 000: Cong Don; 001: Bac Thang ' ||
                     V_STRNINTCD);

          IF V_STRNINTCD = '001' THEN
            -- 000: Cong Don; 001: Bac Thang
            IF V_INTPRINTFRQ3 = 0 THEN
              V_STRDUEDATE     := V_STRCURRDATE;
              V_STROVERDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STRDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_INTPRINTFRQ3;

              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STROVERDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_INTPRINTFRQ3;
            END IF;
          ELSE
            IF V_LNGPRINFRQ = 0 THEN
              V_STRDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STRDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_LNGPRINFRQ;
            END IF;

            IF V_LNGPRINPERIOD = 0 THEN
              V_STROVERDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STROVERDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_LNGPRINPERIOD;
            END IF;

          END IF;
        END IF;
        --Moi lan giai ngan sinh mot dong lich
        BEGIN
          SELECT NVL(MAX(DUENO), 0) DUENO
            INTO V_INTDUENO
            FROM LNSCHD
           WHERE ACCTNO = P_TXMSG.TXFIELDS('03').VALUE
             AND REFTYPE = 'GP';
        EXCEPTION
          WHEN OTHERS THEN
            V_INTDUENO := 1;
        END;
        V_LNAUTOID := SEQ_LNSCHD.NEXTVAL;
        INSERT INTO LNSCHD
          (AUTOID,
           ACCTNO,
           DUENO,
           RLSDATE,
           DUEDATE,
           OVERDUEDATE,
           ACRDATE,
           OVDACRDATE,
           REFTYPE,
           NML,
           OVD,
           PAID,
           DUESTS,
           PDUESTS,
           INTNMLACR,
           FEE,
           DUE,
           RATE1,
           RATE2,
           RATE3,
           CFRATE1,
           CFRATE2,
           CFRATE3)
        VALUES
          (V_LNAUTOID,
           P_TXMSG.TXFIELDS('03').VALUE,
           V_INTDUENO,
           TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(V_STRDUEDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(V_STROVERDUEDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT),
           'P',
           P_TXMSG.TXFIELDS('10').VALUE,
           0,
           0,
           'N',
           NULL,
           0,
           0,
           'N',
           V_DBLRATE1,
           V_DBLRATE2,
           V_DBLRATE3,
           V_DBLCFRATE1,
           V_DBLCFRATE2,
           V_DBLCFRATE3);

        -- PhuongHT add
        -- insert vao lnschdlog
        INSERT INTO LNSCHDLOG
          (AUTOID, TXNUM, TXDATE, NML)
        VALUES
          (V_LNAUTOID,
           P_TXMSG.TXNUM,
           TO_DATE(P_TXMSG.TXDATE, 'DD/MM/RRRR'),
           TO_NUMBER(P_TXMSG.TXFIELDS('10').VALUE));
        --end of PhuongHT add

      END IF;

      /*
      Giai Ngan vay T0
      */
      L_ISRUN := 1;
      BEGIN
        SELECT MST.TRFACCTNO,
               MST.LNTYPE,
               ROUND(MST.RLSAMT + MST.ORLSAMT, 0) RLSAMT,
               MST.LNCLDR,
               MST.PRINFRQ,
               MST.PRINPERIOD,
               MST.OPRINFRQ,
               MST.OPRINPERIOD,
               MST.NINTCD,
               MST.PRINTFRQ3
          INTO V_STRTRFACCTNO,
               V_STRLNTYPE,
               V_DBLLNRLSAMT,
               V_STRLNCLDR,
               V_LNGPRINFRQ,
               V_LNGPRINPERIOD,
               V_LNGOPRINFRQ,
               V_LNGOPRINPERIOD,
               V_STRNINTCD,
               V_INTPRINTFRQ3
          FROM LNMAST MST, CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT
         WHERE MST.ACCTNO = P_TXMSG.TXFIELDS('03').VALUE
           AND AF.ACTYPE = AFT.ACTYPE
           AND AFT.T0LNTYPE = MST.ACTYPE
           AND CF.CUSTID = AF.CUSTID
           AND AF.ACCTNO = CI.AFACCTNO
           AND CF.CUSTATCOM = 'Y'
           AND INSTR(V_ACCTNO_LIST_NOT_DRAWDOWN, AF.ACCTNO) = 0
           AND CI.ACCTNO = MST.TRFACCTNO;
      EXCEPTION
        WHEN OTHERS THEN
          L_ISRUN := 0;
      END;
      IF V_DBLLNRLSAMT = 0 THEN
        --Lan giai ngan dau tien
        UPDATE LNMAST
           SET RLSDATE = TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT)
         WHERE ACCTNO = P_TXMSG.TXFIELDS('03').VALUE;
        DELETE LNSCHD WHERE ACCTNO = P_TXMSG.TXFIELDS('03').VALUE;
      END IF;

      PLOG.DEBUG(PKGCTX,
                 '<<BEGIN Giai Ngan vay T0 ' || P_TXMSG.TXFIELDS('11')
                 .VALUE || ' ' || L_ISRUN);

      IF L_ISRUN = 1 AND P_TXMSG.TXFIELDS('11').VALUE > 0 THEN
        --T0odamt
        --Giai ngan vay T0
        IF V_STRLNCLDR = 'N' THEN
          --Lich tra no theo lich he thong
          /*                v_strDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngOPRINFRQ,systemnums.c_date_format);
          v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngOPRINPERIOD,systemnums.c_date_format);
          begin
              SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strDUEDATE) into v_strDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
              SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
          exception
          when others then
              p_err_code:=0;--Ko bat exception
          end;*/
          IF V_STRNINTCD = '001' THEN
            -- 000: Cong Don; 001: Bac Thang
            V_STRDUEDATE     := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_INTPRINTFRQ3,
                                        SYSTEMNUMS.C_DATE_FORMAT);
            V_STROVERDUEDATE := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_INTPRINTFRQ3,
                                        SYSTEMNUMS.C_DATE_FORMAT);
          ELSE
            V_STRDUEDATE     := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_LNGPRINFRQ,
                                        SYSTEMNUMS.C_DATE_FORMAT);
            V_STROVERDUEDATE := TO_CHAR(TO_DATE(V_STRCURRDATE,
                                                SYSTEMNUMS.C_DATE_FORMAT) +
                                        V_LNGPRINPERIOD,
                                        SYSTEMNUMS.C_DATE_FORMAT);
          END IF;
          BEGIN
            SELECT NVL(TO_CHAR(MIN(SBDATE), SYSTEMNUMS.C_DATE_FORMAT),
                       V_STRDUEDATE)
              INTO V_STRDUEDATE
              FROM SBCLDR
             WHERE CLDRTYPE = '000'
               AND SBDATE >=
                   TO_DATE(V_STRDUEDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND SBDATE >=
                   TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND HOLIDAY = 'N';
            SELECT NVL(TO_CHAR(MIN(SBDATE), SYSTEMNUMS.C_DATE_FORMAT),
                       V_STROVERDUEDATE)
              INTO V_STROVERDUEDATE
              FROM SBCLDR
             WHERE CLDRTYPE = '000'
               AND SBDATE >=
                   TO_DATE(V_STROVERDUEDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND SBDATE >=
                   TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
               AND HOLIDAY = 'N';
          EXCEPTION
            WHEN OTHERS THEN
              P_ERR_CODE := 0; --Ko bat exception
          END;
        ELSIF V_STRLNCLDR = 'B' THEN
          --Lich tra no tinh theo lich thanh toan

          IF V_STRNINTCD = '001' THEN
            -- 000: Cong Don; 001: Bac Thang
            IF V_INTPRINTFRQ3 = 0 THEN
              V_STRDUEDATE     := V_STRCURRDATE;
              V_STROVERDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STRDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_INTPRINTFRQ3;

              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STROVERDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_INTPRINTFRQ3;
            END IF;
          ELSE
            IF V_LNGPRINFRQ = 0 THEN
              V_STRDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STRDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_LNGPRINFRQ;
            END IF;

            IF V_LNGPRINPERIOD = 0 THEN
              V_STROVERDUEDATE := V_STRCURRDATE;
            ELSE
              SELECT TO_CHAR(SBDATE, SYSTEMNUMS.C_DATE_FORMAT)
                INTO V_STROVERDUEDATE
                FROM (SELECT SBDATE, ROWNUM RN
                        FROM (SELECT SBDATE
                                FROM SBCLDR
                               WHERE HOLIDAY = 'N'
                                 AND CLDRTYPE = '000'
                                 AND SBDATE >
                                     TO_DATE(V_STRCURRDATE,
                                             SYSTEMNUMS.C_DATE_FORMAT)
                               ORDER BY SBDATE))
               WHERE RN = V_LNGPRINPERIOD;
            END IF;

          END IF;
          /*i := v_lngOPRINFRQ;
          v_strDUEDATE := p_txmsg.BUSDATE;
          v_intWITHHOLIDAY := 0;
          v_intWITHOUTHOLIDAY := 0;
          WHILE i > 0 LOOP
              begin
                  SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                          into v_intWITHOUTHOLIDAY,v_strDUEDATE
                  FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE(v_strDUEDATE ,systemnums.c_date_format) +  i;
              exception
              when others then
                  p_err_code:=0;--Ko bat exception
              end;
              v_intWITHHOLIDAY:=i - v_intWITHOUTHOLIDAY;
              i := v_intWITHHOLIDAY;
          END LOOP;
          If v_lngOPRINPERIOD > 365 Then
              v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngOPRINPERIOD,systemnums.c_date_format);
              begin
                  SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) DUEDATE
                  into v_strOVERDUEDATE
                  FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND HOLIDAY = 'N';
                  exception
              when others then
                  p_err_code:=0;--Ko bat exception
              end;
          else
              i := v_lngOPRINPERIOD - v_lngOPRINFRQ;
              v_strOVERDUEDATE := v_strDUEDATE;
              v_intWITHHOLIDAY := 0;
              v_intWITHOUTHOLIDAY := 0;
              WHILE i > 0 LOOP
                  begin
                      SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                      into v_intWITHOUTHOLIDAY,v_strOVERDUEDATE
                      FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE( v_strOVERDUEDATE ,systemnums.c_date_format) +  i;
                      v_intWITHHOLIDAY := i - v_intWITHOUTHOLIDAY;
                  exception
                  when others then
                  p_err_code:=0;--Ko bat exception
                  end;
                  i := v_intWITHHOLIDAY;
              end loop;
          end if;*/
        END IF;
        --'Moi lan giai ngan sinh mot dong lich
        BEGIN
          SELECT NVL(MAX(DUENO), 0) DUENO
            INTO V_INTDUENO
            FROM LNSCHD
           WHERE ACCTNO = P_TXMSG.TXFIELDS('03').VALUE
             AND REFTYPE = 'GP';
        EXCEPTION
          WHEN OTHERS THEN
            V_INTDUENO := 1;
        END;
        V_LNAUTOID := SEQ_LNSCHD.NEXTVAL;
        INSERT INTO LNSCHD
          (AUTOID,
           ACCTNO,
           DUENO,
           RLSDATE,
           DUEDATE,
           OVERDUEDATE,
           ACRDATE,
           OVDACRDATE,
           PAIDDATE,
           REFTYPE,
           NML,
           OVD,
           PAID,
           DUESTS,
           PDUESTS,
           INTNMLACR,
           FEE,
           DUE,
           RATE1,
           RATE2,
           RATE3,
           CFRATE1,
           CFRATE2,
           CFRATE3)
        VALUES
          (V_LNAUTOID,
           P_TXMSG.TXFIELDS('03').VALUE,
           V_INTDUENO,
           TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(V_STRDUEDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(V_STROVERDUEDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT),
           TO_DATE(P_TXMSG.BUSDATE, SYSTEMNUMS.C_DATE_FORMAT),
           NULL,
           'GP',
           ROUND(P_TXMSG.TXFIELDS('11').VALUE, 0),
           0,
           0,
           'N',
           NULL,
           0,
           0,
           'N',
           V_DBLRATE1,
           V_DBLRATE2,
           V_DBLRATE3,
           V_DBLCFRATE1,
           V_DBLCFRATE2,
           V_DBLCFRATE3);

        -- PhuongHT add
        -- insert vao lnschdlog
        INSERT INTO LNSCHDLOG
          (AUTOID, TXNUM, TXDATE, NML)
        VALUES
          (V_LNAUTOID,
           P_TXMSG.TXNUM,
           TO_DATE(P_TXMSG.TXDATE, 'DD/MM/RRRR'),
           TO_NUMBER(P_TXMSG.TXFIELDS('11').VALUE));
        --end of PhuongHT add
      END IF;
    END IF;

    PLOG.DEBUG(PKGCTX, '<<END OF fn_DrawndownProcess');
    PLOG.SETENDSECTION(PKGCTX, 'fn_DrawndownProcess');
    RETURN SYSTEMNUMS.C_SUCCESS;
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'fn_DrawndownProcess');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END FN_DRAWNDOWNPROCESS;

  ---------------------------------pr_OrderFinish------------------------------------------------
  PROCEDURE PR_ORDERFINISH(P_ERR_CODE OUT VARCHAR2) IS
    INDATE VARCHAR2(20);
    l_count INTEGER;
    nextdate VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_OrderFinish');
    SELECT VARVALUE
      INTO INDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';



 /*   select count(*) into l_count
    from sbcldr sbc
    where sbc.cldrtype IN ('001','002')
        and nvl(sbc.holiday,'N') = 'N'
        and sbc.sbdate = TO_DATE (INDATE, systemnums.c_date_format);
    if l_count = 0 then*/
        UPDATE ODMAST
        SET ORSTATUS = NVL((SELECT ODSTATUS
                            FROM (SELECT ORDERID,
                                         (CASE
                                           WHEN (REMAINQTTY = 0 AND
                                                (SELECT COUNT(ORGORDERID)
                                                    FROM STSCHD
                                                   WHERE STSCHD.ORGORDERID =
                                                         ORDERID
                                                     AND STSCHD.STATUS <> 'C'
                                                     AND STSCHD.DELTD <> 'Y') = 0 AND
                                                (SELECT COUNT(ORGORDERID)
                                                    FROM STSCHD
                                                   WHERE STSCHD.ORGORDERID =
                                                         ORDERID
                                                     AND STSCHD.DELTD <> 'Y') > 0) THEN
                                            '7'
                                           WHEN ((EXECQTTY > 0 AND
                                                EXECQTTY <= ORDERQTTY) AND
                                                (SELECT COUNT(ORGORDERID)
                                                    FROM STSCHD
                                                   WHERE STSCHD.ORGORDERID =
                                                         ORDERID) > 0) THEN
                                            '4'
                                           ELSE
                                            '5'
                                         END) ODSTATUS
                                    FROM ODMAST
                                   WHERE ORSTATUS <> '5'
                                     AND ORSTATUS <> '7'
                                     AND (EXPDATE <
                                         TO_DATE(INDATE, 'DD/MM/YYYY'))
                                      OR (REMAINQTTY = 0 AND
                                         (SELECT COUNT(ORGORDERID)
                                             FROM STSCHD
                                            WHERE STSCHD.ORGORDERID = ORDERID
                                              AND STSCHD.STATUS <> 'C'
                                              AND STSCHD.DELTD <> 'Y') = 0)) A
                           WHERE A.ORDERID = ODMAST.ORDERID),
                          ODMAST.ORSTATUS);
    --end if;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_OrderFinish');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_OrderFinish');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ORDERFINISH;

  ---------------------------------pr_OrderCleanUp------------------------------------------------
  PROCEDURE PR_ORDERCLEANUP(P_ERR_CODE OUT VARCHAR2) IS
    V_HOSTATUS    varchar2(10);
    INDATE VARCHAR2(20);
    l_count INTEGER;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_OrderCleanUp');

    SELECT VARVALUE
      INTO INDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

/*    select count(*) into l_count
    from sbcldr sbc
    where sbc.cldrtype IN ('001','002')
        and nvl(sbc.holiday,'N') = 'N'
        and sbc.sbdate = TO_DATE (INDATE, systemnums.c_date_format);
    if l_count = 0 then*/
    FOR REC IN (SELECT MST.ORDERID
                  FROM ODMAST MST, SBSECURITIES SB
                 WHERE MST.REMAINQTTY > 0
                   AND MST.ORSTATUS IN ('1', '2', '4', '8', '9')
                   AND MST.CODEID = SB.CODEID
                   AND SB.TRADEPLACE IN ('001', '002', '005', '007', '008')
                   AND MST.EXECTYPE NOT IN ('AS', 'AB', 'CS', 'CB')) LOOP
      --CAP NHAT LAI TRANG THAI CHO CAC LENH CON DU.
      UPDATE ODMAST
         SET ORSTATUS   = '1',
             PORSTATUS  = PORSTATUS || '1',
             REMAINQTTY = 0,
             ADJUSTQTTY = 0,
             MATCHAMT   = 0,
             EXPRICE    = 0,
             EXQTTY     = 0,
             CANCELQTTY = 0,
             REJECTQTTY = 0
       WHERE ORDERID = REC.ORDERID;
    END LOOP;

    -- TheNN, 10-Jan-2014
    -- Them doan day lenh done for day ve cho Bloomberg
    BEGIN
        SELECT      VARVALUE
        INTO        V_HOSTATUS
        FROM        SYSVAR
        WHERE       VARNAME = 'HOSTATUS';

        -- Chi thuc hien neu Hoi so ko active
        IF V_HOSTATUS <> '1' THEN
            FOR rec IN
            (
                SELECT bl.*
                FROM bl_odmast bl
                WHERE bl.expdate = getcurrdate AND bl.status NOT IN ('E','C','R','M')
                    AND NOT EXISTS (SELECT br.execid FROM bl_exec_rpt br WHERE br.execid = bl.blorderid || 'D')
                ORDER BY bl.autoid
            )
            LOOP
                -- Ghi nhan vao queue xu ly lenh day ve cho Bloomberg
                pck_blg.Prc_Event('BLDONE4DAY',rec.blorderid,rec.blorderid,rec.afacctno);
                -- Cap nhat lai trang thai trong bl_odmast
                UPDATE bl_odmast SET
                    cancelqtty = 0,
                    remainqtty = 0,
                    pstatus = pstatus || status,
                    status = 'E',
                    last_change = SYSTIMESTAMP
                WHERE blorderid = rec.blorderid;
            END LOOP;
        END IF;
    END;
  --  end if;


    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_OrderCleanUp');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_OrderCleanUp');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ORDERCLEANUP;

  -----------------------------------pr_CICalcFeeDepositSecurities------------------------------------------------
  PROCEDURE PR_CICALCFEEDEPOSITSECURITIES(P_BCHMDL   VARCHAR,
                                          P_ERR_CODE OUT VARCHAR2,
                                          P_FROMROW  NUMBER,
                                          P_TOROW    NUMBER,
                                          P_LASTRUN  OUT VARCHAR2) IS
    V_CURRDATE  DATE;
    V_NEXTDATE  DATE;
    L_ICRATE    NUMBER(10, 4);
    L_NUMDAY    NUMBER;
    L_ISRATE    NUMBER;
    L_CURRMONTH VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CICalcFeeDepositSecurities');

    L_ISRATE := 0;

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_NEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';

    PLOG.DEBUG(PKGCTX, 'Before set l_currmonth ');
    L_CURRMONTH := TO_CHAR(TO_DATE(V_NEXTDATE, 'dd/MM/rrrr'), 'RRRRMM');
    PLOG.DEBUG(PKGCTX, 'End set l_currmonth ' || L_CURRMONTH);

    L_NUMDAY := V_NEXTDATE - V_CURRDATE;
    --Lay bieu phi tu bang ICCFTYPEDEF
    FOR REC IN (SELECT ACTYPE
                  FROM ICCFTYPEDEF
                 WHERE EVENTCODE = 'FEEDEPOSITSE') LOOP

      SELECT ICFLAT
        INTO L_ICRATE
        FROM ICCFTYPEDEF
       WHERE EVENTCODE = 'FEEDEPOSITSE'
         AND ACTYPE = REC.ACTYPE;
      PLOG.DEBUG(PKGCTX,
                 'Bat dau tinh phi CK ngay ' || TO_CHAR(V_CURRDATE));

      --Bat dau tinh phi luu ky chung khoan cho tat ca cac tieu khoan
      FOR REC2 IN (SELECT AF.ACCTNO,
                          ROUND((NVL(SUM(SE.TRADE + SE.MARGIN + SE.MORTAGE +
                                         SE.BLOCKED + SE.SECURED + SE.REPO +
                                         SE.NETTING + SE.DTOCLOSE +
                                         SE.WITHDRAW + SE.BLOCKWITHDRAW +
                                         SE.BLOCKDTOCLOSE + SE.EMKQTTY),
                                     0) * L_ICRATE * L_NUMDAY) / 30,
                                4) CIDEPOFEE,
                          SUM(SE.TRADE + SE.MARGIN + SE.MORTAGE + SE.BLOCKED +
                              SE.SECURED + SE.REPO + SE.NETTING +
                              SE.DTOCLOSE + SE.WITHDRAW + SE.BLOCKWITHDRAW +
                              SE.BLOCKDTOCLOSE + SE.EMKQTTY) DEPOQTTY
                     FROM CFMAST       CF,
                          AFMAST       AF,
                          CIMAST       CI,
                          SEMAST       SE,
                          SBSECURITIES SB
                    WHERE CF.CUSTID = AF.CUSTID
                      AND AF.ACCTNO = SE.AFACCTNO
                      AND SE.CODEID = SB.CODEID
                      AND AF.ACCTNO = CI.ACCTNO
                      AND CI.ACTYPE = REC.ACTYPE
                      AND SB.SECTYPE IN ('001', '002', '008', '011') --Ngay 22/03/2017 CW NamTv them sectype chung quyen
                      AND SB.TRADEPLACE IN ('001', '002', '005')
                      AND CF.CUSTATCOM = 'Y'
                      AND AF.STATUS NOT IN ('N', 'C')
                    GROUP BY AF.ACCTNO
                   HAVING SUM(SE.TRADE + SE.MARGIN + SE.MORTAGE + SE.BLOCKED + SE.SECURED + SE.REPO + SE.NETTING + SE.DTOCLOSE + SE.WITHDRAW) > 0) LOOP
        UPDATE CIMAST CI
           SET CI.CIDEPOFEEACR = CI.CIDEPOFEEACR + REC2.CIDEPOFEE
         WHERE CI.AFACCTNO = REC2.ACCTNO;

        --Ghi vao CIDEPOFEETRAN
        INSERT INTO CIDEPOFEETRAN
          (AUTOID,
           AFACCTNO,
           FRDATE,
           TODATE,
           DEPOQTTY,
           DEPORATE,
           DEPOTYPE,
           CIDEPOFEEACR,
           STATUS,
           TLTXCD,
           TXDESC,
           MONTH)
        VALUES
          (SEQ_CIDEPOFEETRAN.NEXTVAL,
           REC2.ACCTNO,
           V_CURRDATE,
           V_NEXTDATE,
           REC2.DEPOQTTY,
           L_ICRATE,
           'C',
           ROUND(REC2.CIDEPOFEE, 4),
           'P',
           'CIFEEDEPOSITSE',
           'Tinh phi luu ky co phieu, chung chi quy theo ngay ' ||
           V_CURRDATE,
           L_CURRMONTH);

      END LOOP;
      COMMIT;

    END LOOP;

    P_ERR_CODE := 0;

    PLOG.SETENDSECTION(PKGCTX, 'pr_CICalcFeeDepositSecurities');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CICalcFeeDepositSecurities');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CICalcFeeDepositSecurities');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CICALCFEEDEPOSITSECURITIES;

  -----------------------------------pr_CIInterestToPrincipal------------------------------------------------
  PROCEDURE PR_CIINTERESTTOPRINCIPAL(P_BCHMDL   VARCHAR,
                                     P_ERR_CODE OUT VARCHAR2,
                                     P_FROMROW  NUMBER,
                                     P_TOROW    NUMBER,
                                     P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   DATE;
    V_STRNEXTDATE   DATE;
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
    V_LASTDAY       NUMBER;
    L_FTODATE       VARCHAR2(20);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CIInterestToPrincipal');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM CIMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1162';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRNEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';
    SELECT TO_CHAR(V_STRCURRDATE, 'MM/RRRR') INTO L_FTODATE FROM DUAL;

    --Xac dinh ngay cuoi cung cua thang
    SELECT TO_NUMBER(TO_CHAR(MAX(SBDATE), 'DD'))
      INTO V_LASTDAY
      FROM SBCLDR
     WHERE TO_CHAR(SBDATE, 'MM/YYYY') = TO_CHAR(V_STRCURRDATE, 'MM/YYYY')
       AND CLDRTYPE = '000';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := V_STRCURRDATE;
    L_TXMSG.BUSDATE   := V_STRCURRDATE;
    L_TXMSG.TLTXCD    := '1162';
    FOR REC IN (SELECT MST.*
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM CIMAST A ORDER BY ACCTNO)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ICCFTYPEDEF IC
                 WHERE MST.ACTYPE = IC.ACTYPE
                   AND IC.EVENTCODE = 'CRINTPRN'
                   AND IC.DELTD <> 'Y'
                   AND IC.MODCODE = 'CI'
                   AND MST.COREBANK <> 'Y'
                   AND MST.CRINTACR > 0
                   AND ((IC.PERIOD = 'M' AND TO_CHAR(V_STRCURRDATE, 'MM') <>
                       TO_CHAR(V_STRNEXTDATE, 'MM')) --Monthly, Ngay cuoi thang
                       OR (IC.PERIOD = 'S' AND
                       TO_DATE((CASE
                                      WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                       V_LASTDAY
                                      ELSE
                                       PERIODDAY
                                    END) || '/' ||
                                    TO_CHAR(V_STRCURRDATE, 'MM/RRRR'),
                                    'DD/MM/RRRR') >= V_STRCURRDATE AND
                       TO_DATE((CASE
                                      WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                       V_LASTDAY
                                      ELSE
                                       PERIODDAY
                                    END) || '/' ||
                                    TO_CHAR(V_STRCURRDATE, 'MM/RRRR'),
                                    'DD/MM/RRRR') < V_STRNEXTDATE) --Ngay hien tai la ngay lam viec gan ngay thu lai co dinh nhat
                       )) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

      --Set cac field giao dich
      --03  ACCTNO      C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
      --10  CRINTACR    N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'CRINTACR';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.CRINTACR;
      --16  TASKCD      C
      L_TXMSG.TXFIELDS('16').DEFNAME := 'TASKCD';
      L_TXMSG.TXFIELDS('16').TYPE := 'C';
      L_TXMSG.TXFIELDS('16').VALUE := '';
      --17  MICODE      C
      L_TXMSG.TXFIELDS('17').DEFNAME := 'MICODE';
      L_TXMSG.TXFIELDS('17').TYPE := 'C';
      L_TXMSG.TXFIELDS('17').VALUE := '';
      --30  DESC        C
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ERRNUMS.C_CONST_MONTH_VI ||
                                      L_FTODATE;

      BEGIN
        IF TXPKS_#1162.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 1162: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
        ---HaiLT them buoc backup het vao ciintrana
        INSERT INTO CIINTTRANA
          SELECT * FROM CIINTTRAN WHERE ACCTNO = REC.ACCTNO;
        DELETE FROM CIINTTRAN WHERE ACCTNO = REC.ACCTNO;
        --- End of HaiLT

      END;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CIInterestToPrincipal');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CIInterestToPrincipal');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CIInterestToPrincipal');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CIINTERESTTOPRINCIPAL;

  -----------------------------------pr_CICalcFeeDepositBond------------------------------------------------
  PROCEDURE PR_CICALCFEEDEPOSITBOND(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2) IS
    V_CURRDATE  DATE;
    V_NEXTDATE  DATE;
    L_ICRATE    NUMBER(10, 4);
    L_NUMDAY    NUMBER;
    L_ISRATE    NUMBER;
    L_CURRMONTH VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CICalcFeeDepositBond');

    L_ISRATE := 0;

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_NEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';

    PLOG.DEBUG(PKGCTX, 'Before set l_currmonth ');
    L_CURRMONTH := TO_CHAR(TO_DATE(V_NEXTDATE, 'dd/MM/rrrr'), 'RRRRMM');
    PLOG.DEBUG(PKGCTX, 'End set l_currmonth ' || L_CURRMONTH);

    L_NUMDAY := V_NEXTDATE - V_CURRDATE;
    --Lay bieu phi tu bang ICCFTYPEDEF
    --SELECT count(1) INTO l_isRate FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSITBO';
    FOR REC IN (SELECT ACTYPE
                  FROM ICCFTYPEDEF
                 WHERE EVENTCODE = 'FEEDEPOSITBO') LOOP

      SELECT ICFLAT
        INTO L_ICRATE
        FROM ICCFTYPEDEF
       WHERE EVENTCODE = 'FEEDEPOSITBO'
         AND ACTYPE = REC.ACTYPE;
      PLOG.DEBUG(PKGCTX,
                 'Bat dau tinh phi Trai phieu ngay ' || TO_CHAR(V_CURRDATE));
      --Bat dau tinh phi luu ky chung khoan cho tat ca cac tieu khoan
      UPDATE CIMAST CI
         SET CI.CIDEPOFEEACR = CI.CIDEPOFEEACR +
                               NVL((SELECT ROUND(MST.CIDEPOFEE, 4)
                                     FROM (SELECT AF.ACCTNO,
                                                  (NVL(SUM(SE.TRADE +
                                                           SE.MARGIN +
                                                           SE.MORTAGE +
                                                           SE.BLOCKED +
                                                           SE.SECURED +
                                                           SE.REPO +
                                                           SE.NETTING +
                                                           SE.DTOCLOSE +
                                                           SE.WITHDRAW),
                                                       0) * L_ICRATE *
                                                  L_NUMDAY) / 30 CIDEPOFEE
                                             FROM CFMAST       CF,
                                                  AFMAST       AF,
                                                  SEMAST       SE,
                                                  SBSECURITIES SB
                                            WHERE CF.CUSTID = AF.CUSTID
                                              AND AF.ACCTNO = SE.AFACCTNO
                                              AND SE.CODEID = SB.CODEID
                                              AND SB.SECTYPE IN
                                                  ('003', '006')
                                              AND SB.TRADEPLACE IN
                                                  ('001', '002', '005')
                                              AND CF.CUSTATCOM = 'Y'
                                              AND AF.STATUS NOT IN ('N', 'C')
                                            GROUP BY AF.ACCTNO
                                           HAVING SUM(SE.TRADE + SE.MARGIN + SE.MORTAGE + SE.BLOCKED + SE.SECURED + SE.REPO + SE.NETTING + SE.DTOCLOSE + SE.WITHDRAW) > 0) MST
                                    WHERE CI.AFACCTNO = MST.ACCTNO
                                      AND CI.ACTYPE = REC.ACTYPE),
                                   0);

      --Ghi vao CIDEPOFEETRAN
      INSERT INTO CIDEPOFEETRAN
        (AUTOID,
         AFACCTNO,
         FRDATE,
         TODATE,
         DEPOQTTY,
         DEPORATE,
         DEPOTYPE,
         CIDEPOFEEACR,
         STATUS,
         TLTXCD,
         TXDESC,
         MONTH)
        SELECT SEQ_CIDEPOFEETRAN.NEXTVAL AUTOID,
               MT.ACCTNO AFACCTNO,
               V_CURRDATE FRDATE,
               V_NEXTDATE TODATE,
               MT.DEPOQTTY,
               L_ICRATE DEPORATE,
               'T' DEPOTYPE,
               ROUND((MT.DEPOQTTY * L_ICRATE * L_NUMDAY) / 30, 4) CIDEPOFEEACR,
               'P' STATUS,
               'CIFEEDEPOSITBO' TLTXCD,
               'Tinh phi trai phieu theo ngay ' || V_CURRDATE TXDESC,
               L_CURRMONTH MONTH
          FROM (SELECT AF.ACCTNO,
                       NVL(SUM(SE.TRADE + SE.MARGIN + SE.MORTAGE +
                               SE.BLOCKED + SE.SECURED + SE.REPO +
                               SE.NETTING + SE.DTOCLOSE + SE.WITHDRAW),
                           0) DEPOQTTY
                  FROM CFMAST       CF,
                       AFMAST       AF,
                       SEMAST       SE,
                       SBSECURITIES SB,
                       CIMAST       CI
                 WHERE CF.CUSTID = AF.CUSTID
                   AND AF.ACCTNO = SE.AFACCTNO
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND CI.ACTYPE = REC.ACTYPE
                   AND SE.CODEID = SB.CODEID
                   AND SB.SECTYPE IN ('003', '006')
                   AND SB.TRADEPLACE IN ('001', '002', '005')
                   AND CF.CUSTATCOM = 'Y'
                   AND AF.STATUS NOT IN ('N', 'C')
                 GROUP BY AF.ACCTNO
                HAVING SUM(SE.TRADE + SE.MARGIN + SE.MORTAGE + SE.BLOCKED + SE.SECURED + SE.REPO + SE.NETTING + SE.DTOCLOSE + SE.WITHDRAW) > 0) MT;
      COMMIT;

    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CICalcFeeDepositBond');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CICalcFeeDepositBond');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CICalcFeeDepositBond');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CICALCFEEDEPOSITBOND;
  -- -----------------------------------pr_CICalcFeeDeposit------------------------------------------------
  PROCEDURE PR_CICALCFEEDEPOSIT(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2) IS
    V_CURRDATE  DATE;
    V_NEXTDATE  DATE;
    L_ICRATE    NUMBER(10, 4);
    L_NUMDAY    NUMBER;
    L_ISRATE    NUMBER;
    L_CURRMONTH VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CICalcFeeDeposit');
    P_ERR_CODE := 0;
    PLOG.DEBUG(PKGCTX, 'before call pr_CICalcFeeDeposit ');
    SP_PROCESS_CIFEESCHD_COMMON;
    PLOG.DEBUG(PKGCTX, 'after call pr_CICalcFeeDeposit ');
    PLOG.SETENDSECTION(PKGCTX, 'pr_CICalcFeeDeposit');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CICalcFeeDeposit');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CICalcFeeDeposit');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CICALCFEEDEPOSIT;

  /*-----------------------------------pr_CIPayFeeDepositSeBo------------------------------------------------
  PROCEDURE pr_CIPayFeeDepositSeBo(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
    IS
        l_txmsg               tx.msg_rectype;
        v_strCURRDATE varchar2(20);
        v_strPREVDATE varchar2(20);
        v_strNEXTDATE varchar2(20);
        v_strDesc     varchar2(1000);
        v_strEN_Desc  varchar2(1000);
        v_blnVietnamese BOOLEAN;
        l_err_param   varchar2(300);
        l_MaxRow      NUMBER(20,0);
        v_strDay      varchar2(2);
        l_cimastcheck_arr txpks_check.cimastcheck_arrtype;
        l_baldefovd apprules.field%TYPE;
        l_feeamt      number(20,4);
        l_isRate      number;
        v_currmonth   varchar2(6);
        v_nextmonth   varchar2(6);

    BEGIN
      plog.setbeginsection(pkgctx, 'pr_CIPayFeeDepositSeBo');
      l_isRate := 0;

      SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
      IF l_MaxRow>p_ToRow THEN
          p_lastRun:='N';
      ELSE
          p_lastRun:='Y';
      END IF;

      SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1182';
       SELECT varvalue INTO v_strCURRDATE
       FROM sysvar
       WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

       SELECT varvalue INTO v_strNEXTDATE
       FROM sysvar
       WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';

      l_txmsg.msgtype:='T';
      l_txmsg.local:='N';
      l_txmsg.tlid        := systemnums.c_system_userid;
      plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
      SELECT SYS_CONTEXT ('USERENV', 'HOST'),
               SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
        INTO l_txmsg.wsname, l_txmsg.ipaddress
      FROM DUAL;
      l_txmsg.off_line    := 'N';
      l_txmsg.deltd       := txnums.c_deltd_txnormal;
      l_txmsg.txstatus    := txstatusnums.c_txcompleted;
      l_txmsg.msgsts      := '0';
      l_txmsg.ovrsts      := '0';
      l_txmsg.batchname   := p_bchmdl;
      l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
      l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
      l_txmsg.tltxcd:='1182';
      plog.debug(pkgctx, 'Begin loop');
      --SELECT count(1) INTO l_isRate FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSIT';


      -- TruongLD sua lai theo yeu cau cua BVS
      -- 1. Thu phi vao ngay cuoi thang
      -- 2. Neu du tien thi moi thu con ko thi ko thu
      -- 3. Neu KH no phi nhieu thang thi thi thang xa nhat truoc
      v_currmonth := to_char(to_date(v_strCURRDATE,'DD/MM/RRRR'),'RRRRMM');
      v_nextmonth := to_char(to_date(v_strNEXTDATE,'DD/MM/RRRR'),'RRRRMM');

      for recRoot in (SELECT actype FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSIT')
        loop
          \*
          -- Hien tai dang thu vao 1 ngay co dinh trong thang
          select lpad(periodday,2,'0') into v_strDay
          from iccftypedef where eventcode  = 'FEEDEPOSIT' and actype = recRoot.Actype;
          *\

          \*
          if to_date(v_strDay || substr(v_strCURRDATE, 3, 8),systemnums.c_date_format) >= to_date(v_strCURRDATE,systemnums.c_date_format) and
             to_date(v_strDay || substr(v_strCURRDATE, 3, 8),systemnums.c_date_format) < to_date(v_strNEXTDATE,systemnums.c_date_format) then
          *\

          -- Thu phi luu ky vao dau ngay cuoi thang
          if v_nextmonth <>  v_currmonth then
          --Neu dung la ngay thu phi thi bat dau thu phi cho tung tieu khoan
             for rec in
              (
                  select * from (select mst.* from (
                                 select af.acctno, tr.month, tr.cidepofeeacr, rownum rn
                                 from cfmast cf, afmast af,  cimast ci,
                                      (
                                          -- TruongLD Add
                                          -- Chi lay nhung TK chua thu phi
                                          select ci.afacctno, ci.month, sum(ci.cidepofeeacr) cidepofeeacr
                                          from cidepofeetran ci
                                          Where ci.status ='P'
                                          group by ci.afacctno, ci.month
                                      )tr
                                 where cf.custid = af.custid and af.acctno = ci.afacctno
                                       and cf.custatcom='Y'
                                       and af.status not in ('N','C')
                                       And tr.afacctno = af.acctno
                                       and ci.actype = recRoot.Actype
                                 order by af.acctno, tr.month desc) mst
                                 order by mst.rn) mt
                   where mt.rn BETWEEN p_FromRow AND p_ToRow
              )
              loop
                   --Chi tinh thu phi voi nhung tai khoan nao co phi.
                   if nvl(rec.cidepofeeacr,0) > 0 then
                      l_CIMASTcheck_arr := txpks_check.fn_CIMASTcheck(rec.acctno,'CIMAST','ACCTNO');
                      -- Do BALDEFOVD da tru fee luu ky
                      -- Khi thi khong tru nua --> chuyen qua check = field  BALDEFOVD_RELEASED_DEPOFEE
                      l_BALDEFOVD := l_CIMASTcheck_arr(0).BALDEFOVD_RELEASED_DEPOFEE;

                      -- TruongLD sua theo yeu cau cua BVS
                      -- So du khong du de tra phi luu ky --> ko tra
                      \*
                      select case when to_number(l_BALDEFOVD) <= 0 then 0
                                  when to_number(l_BALDEFOVD) > rec.cidepofeeacr then rec.cidepofeeacr
                                  else floor(to_number(l_BALDEFOVD)) end into l_feeamt
                      from dual;
                      *\
                      select case when to_number(l_BALDEFOVD) <= 0 then 0
                                  when to_number(l_BALDEFOVD) >= rec.cidepofeeacr then rec.cidepofeeacr
                                  else 0 end into l_feeamt
                      from dual;
                      --End TruongLD/>
                       --Chi thu phi voi nhung tai khoan co tien de thu.
                      if  l_feeamt > 0 then
                          plog.debug(pkgctx, 'Loop for account:' || rec.acctno || ' ngay' || to_char(v_strCURRDATE));
                          SELECT systemnums.C_BATCH_PREFIXED
                                                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                                            INTO l_txmsg.txnum
                                            FROM DUAL;
                                  l_txmsg.brid        := substr(rec.ACCTNO,1,4);

                                  --Set cac field giao dich
                                  --03  ACCTNO      C
                                  l_txmsg.txfields ('03').defname   := 'ACCTNO';
                                  l_txmsg.txfields ('03').TYPE      := 'C';
                                  l_txmsg.txfields ('03').VALUE     := rec.acctno;
                                  --10  INTAMT      N
                                  l_txmsg.txfields ('10').defname   := 'FEEAMT';
                                  l_txmsg.txfields ('10').TYPE      := 'N';
                                  l_txmsg.txfields ('10').VALUE     := l_feeamt;
                                  --30    DESC        C
                                  l_txmsg.txfields ('30').defname   := 'DESC';
                                  l_txmsg.txfields ('30').TYPE      := 'C';
                                  l_txmsg.txfields ('30').VALUE     := v_strDesc || ' cua tieu khoan ' || rec.acctno;

                                  BEGIN
                                      IF txpks_#1182.fn_batchtxprocess (l_txmsg,
                                                                       p_err_code,
                                                                       l_err_param
                                         ) <> systemnums.c_success
                                      THEN
                                         plog.debug (pkgctx,
                                                                'got error 1182: ' || p_err_code
                                         );
                                         ROLLBACK;
                                         RETURN;
                                      END IF;
                                  END;

                                  --</ Cap nhat l?i tran thai -- dat thu phi LK
                                  Update cidepofeetran set status ='C' Where afacctno = rec.acctno And month = rec.month;
                                  --/>
                       end if;
                   end if;
              end loop;
          end if;

          end loop;


      p_err_code:=0;
      plog.setendsection(pkgctx, 'pr_CIPayFeeDepositSeBo');
    EXCEPTION
    WHEN OTHERS
     THEN
        plog.debug (pkgctx,'got error on pr_CIPayFeeDepositSeBo');
        ROLLBACK;
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, SQLERRM);
        plog.setendsection (pkgctx, 'pr_CIPayFeeDepositSeBo');
        RAISE errnums.E_SYSTEM_ERROR;
    END pr_CIPayFeeDepositSeBo;
  */
  -----------------------------------pr_CIPayFeeDepositSeBo------------------------------------------------
  PROCEDURE PR_CIPAYFEEDEPOSITSEBO(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2,
                                   P_FROMROW  NUMBER,
                                   P_TOROW    NUMBER,
                                   P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG           TX.MSG_RECTYPE;
    V_STRCURRDATE     VARCHAR2(20);
    V_STRPREVDATE     VARCHAR2(20);
    V_STRNEXTDATE     VARCHAR2(20);
    V_STRDESC         VARCHAR2(1000);
    V_STREN_DESC      VARCHAR2(1000);
    V_BLNVIETNAMESE   BOOLEAN;
    L_ERR_PARAM       VARCHAR2(300);
    L_MAXROW          NUMBER(20, 0);
    V_STRDAY          VARCHAR2(2);
    L_CIMASTCHECK_ARR TXPKS_CHECK.CIMASTCHECK_ARRTYPE;
    L_BALDEFOVD       APPRULES.FIELD%TYPE;
    L_FEEAMT          NUMBER(20, 4);
    L_ISRATE          NUMBER;
    V_CURRMONTH       VARCHAR2(6);
    V_NEXTMONTH       VARCHAR2(6);
    V_AFACCTNO_TEMP   VARCHAR2(20);
    V_FTODATE         VARCHAR2(20);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CIPayFeeDepositSeBo');
    L_ISRATE := 0;

    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIFEESCHD
    where NMLAMT > (SELECT TO_NUMBER(VARVALUE)
                                   FROM SYSVAR
                                  WHERE GRNAME = 'SYSTEM'
                                    AND VARNAME = 'MINVSDFEEPAID');*/
    /*IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    P_LASTRUN := 'Y';

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1182';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    SELECT VARVALUE
      INTO V_STRNEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1182';
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    V_AFACCTNO_TEMP := '0';

    -- xet xem co khoan phi luu ky nao den han
    FOR REC IN (/*SELECT *
                  FROM (SELECT AUTOID,
                               AFACCTNO ACCTNO,
                               TODATE,
                               NMLAMT - PAIDAMT - FLOATAMT AVL,
                               NMLAMT, ROWNUM RN
                          FROM CIFEESCHD
                         WHERE DELTD <> 'Y'
                           AND FEETYPE = 'VSDDEP'
                           ORDER BY ACCTNO, TODATE
                        ) MST
                 WHERE NMLAMT > (SELECT TO_NUMBER(VARVALUE)
                                   FROM SYSVAR
                                  WHERE GRNAME = 'SYSTEM'
                                    AND VARNAME = 'MINVSDFEEPAID')*/
--sum CIFEESCHD so sanh voi MINVSDFEEPAID

                  SELECT *
                  FROM (SELECT AUTOID,
                               AFACCTNO ACCTNO,
                               TODATE,
                               NMLAMT - PAIDAMT - FLOATAMT AVL,
                               NMLAMT, ROWNUM RN
                          FROM CIFEESCHD
                         WHERE DELTD <> 'Y'
                           AND FEETYPE = 'VSDDEP'
                           ORDER BY ACCTNO, TODATE
                        ) MST
                 WHERE   EXISTS (
                             SELECT  AFACCTNO ACCTNO
                                      FROM CIFEESCHD
                                     WHERE DELTD <> 'Y'
                                       AND FEETYPE = 'VSDDEP'
                                       AND AFACCTNO = MST.ACCTNO
                             GROUP BY AFACCTNO
                             HAVING SUM( NMLAMT)> (SELECT TO_NUMBER(VARVALUE)
                                                   FROM SYSVAR
                                                   WHERE GRNAME = 'SYSTEM'
                                                   AND VARNAME = 'MINVSDFEEPAID')
                                     )

                 ) LOOP

      -- neu tk co du tien moi thu
      --l_CIMASTcheck_arr := txpks_check.fn_CIMASTcheck(rec.ACCTNO,'CIMAST','ACCTNO');
      -- Do BALDEFOVD da tru fee luu ky
      -- Khi thi khong tru nua --> chuyen qua check = field  BALDEFOVD_RELEASED_DEPOFEE
      -- v_afacctno_temp: TK ko du tien cho thang truoc nen ko tra cho cac thang sau
      --l_BALDEFOVD := to_number(l_CIMASTcheck_arr(0).balance) + to_number(l_CIMASTcheck_arr(0).avladvance);
      --l_BALDEFOVD := to_number(l_CIMASTcheck_arr(0).balance);
      SELECT GREATEST(CI.BALANCE - CI.BUYSECAMT, 0)
        INTO L_BALDEFOVD
        FROM CIMAST CI
       WHERE ACCTNO = REC.ACCTNO;
      /*     select case when to_number(l_BALDEFOVD) <= 0 then 0
      when (to_number(l_BALDEFOVD) >= rec.AVL AND rec.acctno <> v_afacctno_temp )then rec.AVL
      else 0 end into l_feeamt from dual;*/
      --PhuongHT edit theo yeu cau VCBS: tan thu tien phi luu ky
      SELECT CASE
               WHEN TO_NUMBER(L_BALDEFOVD) <= 0 THEN
                0
               WHEN (TO_NUMBER(L_BALDEFOVD) > 0) THEN
                LEAST(REC.AVL, L_BALDEFOVD)
               ELSE
                0
             END
        INTO L_FEEAMT
        FROM DUAL;
      -- end of PhuongHT edit

      /*    IF (l_BALDEFOVD<rec.AVL)
      THEN v_afacctno_temp := rec.acctno ;
      END IF;*/
      -- lay ra truong to_Date theo format de len bao cao
      SELECT TO_CHAR(REC.TODATE, 'MM/RRRR') INTO V_FTODATE FROM DUAL;
      --Chi tinh thu phi voi nhung tai khoan nao co phi.

      IF L_FEEAMT > 0 THEN
        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.ACCTNO || ' ngay' ||
                   V_STRCURRDATE);
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

        --Set cac field giao dich
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        --10  INTAMT      N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := L_FEEAMT;
        --07  FTODATE      N
        L_TXMSG.TXFIELDS('07').DEFNAME := 'FTODATE';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := V_FTODATE;
        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ' ' ||
                                        TO_CHAR(REC.TODATE, 'MM/RRRR');

        BEGIN
          IF TXPKS_#1182.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 1182: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

        --</ Cap nhat l?i tran thai -- dat thu phi LK
        UPDATE CIFEESCHD
           SET PAIDAMT    = PAIDAMT + L_FEEAMT,
               PAIDTXNUM  = L_TXMSG.TXNUM,
               PAIDTXDATE = L_TXMSG.TXDATE
        -- WHERE DELTD<>'Y' AND AFACCTNO=rec.acctno AND TODATE=rec.TODATE AND  FEETYPE='VSDDEP' ;
         WHERE AUTOID = REC.AUTOID;
        --/>
      END IF;

    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CIPayFeeDepositSeBo');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CIPayFeeDepositSeBo');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CIPayFeeDepositSeBo');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CIPAYFEEDEPOSITSEBO;

  -----------------------------------pr_CIPayFeeDepositSeBo------------------------------------------------
  PROCEDURE PR_CIPAYFEEDEPOSITDEBIT(P_BCHMDL   VARCHAR,
                                    P_ERR_CODE OUT VARCHAR2,
                                    P_FROMROW  NUMBER,
                                    P_TOROW    NUMBER,
                                    P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG           TX.MSG_RECTYPE;
    V_STRCURRDATE     VARCHAR2(20);
    V_STRPREVDATE     VARCHAR2(20);
    V_STRNEXTDATE     VARCHAR2(20);
    V_STRDESC         VARCHAR2(1000);
    V_STREN_DESC      VARCHAR2(1000);
    V_BLNVIETNAMESE   BOOLEAN;
    L_ERR_PARAM       VARCHAR2(300);
    L_MAXROW          NUMBER(20, 0);
    V_STRDAY          VARCHAR2(2);
    L_CIMASTCHECK_ARR TXPKS_CHECK.CIMASTCHECK_ARRTYPE;
    L_BALDEFOVD       APPRULES.FIELD%TYPE;
    L_FEEAMT          NUMBER(20, 4);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CIPayFeeDepositDebit');

    -- SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    /*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    P_LASTRUN := 'Y';

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1184';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1184';
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    -- xet xem co khoan phi luu ky nao den han
    FOR REC IN (SELECT *
                  FROM (SELECT AFACCTNO ACCTNO,
                               TXNUM,
                               TXDATE,
                               SUM(NMLAMT) - SUM(PAIDAMT) AVL
                          FROM CIFEESCHD
                         WHERE DELTD <> 'Y'
                           AND FEETYPE = 'FEEDR'
                         GROUP BY AFACCTNO, TXNUM, TXDATE) MST
                 WHERE AVL > 0
                 ORDER BY ACCTNO) LOOP

      -- neu tk co du tien moi thu
      L_CIMASTCHECK_ARR := TXPKS_CHECK.FN_CIMASTCHECK(REC.ACCTNO,
                                                      'CIMAST',
                                                      'ACCTNO');
      -- Do BALDEFOVD da tru fee luu ky
      -- Khi thi khong tru nua --> chuyen qua check = field  BALDEFOVD_RELEASED_DEPOFEE
      -- v_afacctno_temp: TK ko du tien cho thang truoc nen ko tra cho cac thang sau
      -- l_BALDEFOVD := to_number(l_CIMASTcheck_arr(0).balance) + to_number(l_CIMASTcheck_arr(0).avladvance);
      L_BALDEFOVD := TO_NUMBER(L_CIMASTCHECK_ARR(0).BALANCE);
      SELECT CASE
               WHEN TO_NUMBER(L_BALDEFOVD) <= 0 THEN
                0
               WHEN (TO_NUMBER(L_BALDEFOVD) >= REC.AVL) THEN
                REC.AVL
               ELSE
                0
             END
        INTO L_FEEAMT
        FROM DUAL;

      IF L_FEEAMT > 0 THEN
        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.ACCTNO || ' ngay' ||
                   V_STRCURRDATE);
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

        --Set cac field giao dich
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        --10  INTAMT      N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := L_FEEAMT;

        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

        BEGIN
          IF TXPKS_#1184.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 1182: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

        --</ Cap nhat l?i tran thai -- dat thu phi LK
        UPDATE CIFEESCHD
           SET PAIDAMT    = NMLAMT,
               PAIDTXNUM  = L_TXMSG.TXNUM,
               PAIDTXDATE = L_TXMSG.TXDATE
         WHERE DELTD <> 'Y'
           AND AFACCTNO = REC.ACCTNO
           AND TXDATE = REC.TXDATE
           AND TXNUM = REC.TXNUM
           AND FEETYPE = 'FEEDR';
        --/>
      END IF;

    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CIPayFeeDepositDebit');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CIPayFeeDepositDebit');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CIPayFeeDepositDebit');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CIPAYFEEDEPOSITDEBIT;

  ---------------------------------pr_CalcFeeOnOdtype------------------------------------------------
  PROCEDURE PR_CALCFEEONODTYPE(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    V_DATE     DATE;
    L_MAXROW   NUMBER(20, 0);
    L_ICRATE   NUMBER;
    V_DELTA    NUMBER;
    L_RULETYPE VARCHAR2(10);
    L_ICCFBAL  NUMBER;
    L_AMOUNT   NUMBER;
    L_ORDER    NUMBER;
    L_FEEAMT   NUMBER;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CalcFeeOnOdtype');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM ODMAST WHERE TXDATE = V_DATE;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_DATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    L_ICRATE := 0;
    V_DELTA  := 0;
    FOR REC IN (SELECT MT.*
                  FROM (SELECT MST.*, ROWNUM RN
                          FROM (SELECT OD.AFACCTNO,
                                       OD.ACTYPE,
                                       SUM(OD.EXECAMT) TOTALEXEC,
                                       ICTD.ICRATE,
                                       ICTD.RULETYPE,
                                       COUNT(OD.ORDERID) TOTALORDER
                                  FROM ODMAST OD, ICCFTYPEDEF ICTD
                                 WHERE OD.DELTD <> 'Y'
                                   AND OD.EXECQTTY > 0
                                   AND OD.EXECTYPE IN
                                       ('NB', 'BC', 'SS', 'NS', 'MS')
                                   AND OD.ACTYPE = ICTD.ACTYPE
                                   AND ICTD.MODCODE = 'OD'
                                   AND ICTD.EVENTCODE = 'ODTYPEFEE'
                                   AND ICTD.ICCFSTATUS = 'A'
                                   AND OD.FEEACR = 0
                                   AND OD.TXDATE = V_DATE
                                   AND OD.orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE  TXDATE = V_DATE)
                                 GROUP BY OD.AFACCTNO,
                                          OD.ACTYPE,
                                          ICTD.ICRATE,
                                          ICTD.RULETYPE
                                 ORDER BY OD.AFACCTNO, OD.ACTYPE) MST) MT
                 WHERE MT.RN BETWEEN P_FROMROW AND P_TOROW) LOOP
      L_ICCFBAL  := REC.TOTALEXEC;
      L_ICRATE   := REC.ICRATE;
      L_RULETYPE := REC.RULETYPE;
      L_ORDER    := REC.TOTALORDER;
      IF L_ICCFBAL > 0 THEN
        IF L_RULETYPE <> 'C' THEN
          --Luat tinh theo fixed hoac tier
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN
              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'OD'
                 AND EVENTCODE = 'ODTYPEFEE'
                 AND DELTD <> 'Y'
                 AND FRAMT < L_ICCFBAL
                 AND TOAMT >= L_ICCFBAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;
          L_AMOUNT := L_ICCFBAL;

          --Cap nhat fee cho tung lenh
          UPDATE ODMAST
             SET FEEACR = ROUND((L_ICRATE / 100) * EXECAMT, 0)
           WHERE AFACCTNO = REC.AFACCTNO
             AND ACTYPE = REC.ACTYPE
             AND orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE TXDATE = V_DATE)
             AND TXDATE = V_DATE;

          --Them vao bang log ODFEEODTYPETRAN
          INSERT INTO ODFEEODTYPETRAN
            SELECT SEQ_ODFEEODTYPETRAN.NEXTVAL AUTOID,
                   TXDATE,
                   AFACCTNO,
                   ACTYPE ODTYPE,
                   L_RULETYPE ICCFTYPE,
                   ORDERID,
                   EXECAMT,
                   L_ICRATE ICCFRATE,
                   ROUND((L_ICRATE / 100) * EXECAMT, 0) FEEAMT
              FROM ODMAST
             WHERE AFACCTNO = REC.AFACCTNO
               AND ACTYPE = REC.ACTYPE
               AND TXDATE = V_DATE;
        ELSE
          --Luat tinh theo cluster
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          L_FEEAMT := 0;
          FOR REC_TIER IN (SELECT DELTA, FRAMT, TOAMT
                             FROM ICCFTIER
                            WHERE ACTYPE = REC.ACTYPE
                              AND MODCODE = 'OD'
                              AND EVENTCODE = 'ODTYPEFEE'
                              AND DELTD <> 'Y'
                            ORDER BY FRAMT) LOOP
            EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
            IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
              L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
            ELSE
              L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
            END IF;
            L_ICRATE := L_ICRATE + REC_TIER.DELTA;
            L_FEEAMT := L_FEEAMT + ROUND(L_AMOUNT * (L_ICRATE / 100), 0);
          END LOOP;
          --Cap nhat fee cho tung lenh bang cach lay trung binh
          UPDATE ODMAST
             SET FEEACR = ROUND(((L_FEEAMT / L_ICCFBAL) / 100) * EXECAMT, 0)
           WHERE AFACCTNO = REC.AFACCTNO
             AND ACTYPE = REC.ACTYPE
             AND orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE TXDATE = V_DATE)
             AND TXDATE = V_DATE;

          --Them vao bang log ODFEEODTYPETRAN
          INSERT INTO ODFEEODTYPETRAN
            SELECT SEQ_ODFEEODTYPETRAN.NEXTVAL AUTOID,
                   TXDATE,
                   AFACCTNO,
                   ACTYPE ODTYPE,
                   L_RULETYPE ICCFTYPE,
                   ORDERID,
                   EXECAMT,
                   ROUND(L_FEEAMT / L_ICCFBAL, 4) ICCFRATE,
                   ROUND(((L_FEEAMT / L_ICCFBAL) / 100) * EXECAMT, 0) FEEAMT
              FROM ODMAST
             WHERE AFACCTNO = REC.AFACCTNO
               AND ACTYPE = REC.ACTYPE
               AND TXDATE = V_DATE;

        END IF;

      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CalcFeeOnOdtype');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CalcFeeOnOdtype');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CalcFeeOnOdtype');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CALCFEEONODTYPE;

  --TungNT modified - for mod beforebatch
  ---------------------------------pr_CalcFeeOnOdtypeCoreBank------------------------------------------------
  PROCEDURE PR_CALCFEEONODTYPECOREBANK(P_ERR_CODE OUT VARCHAR2) IS
    V_DATE     DATE;
    L_MAXROW   NUMBER(20, 0);
    L_ICRATE   NUMBER;
    V_DELTA    NUMBER;
    L_RULETYPE VARCHAR2(10);
    L_ICCFBAL  NUMBER;
    L_AMOUNT   NUMBER;
    L_ORDER    NUMBER;
    L_FEEAMT   NUMBER;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CalcFeeOnOdtypeCoreBank');

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_DATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    L_ICRATE := 0;
    V_DELTA  := 0;
    FOR REC IN (SELECT MT.*
                  FROM (SELECT MST.*, ROWNUM RN
                          FROM (SELECT OD.AFACCTNO,
                                       OD.ACTYPE,
                                       SUM(OD.EXECAMT) TOTALEXEC,
                                       ICTD.ICRATE,
                                       ICTD.RULETYPE,
                                       COUNT(OD.ORDERID) TOTALORDER
                                  FROM ODMAST OD, ICCFTYPEDEF ICTD
                                 WHERE OD.DELTD <> 'Y'
                                   AND OD.EXECQTTY > 0
                                   AND OD.EXECTYPE IN
                                       ('NB', 'BC', 'SS', 'NS', 'MS')
                                   AND OD.ACTYPE = ICTD.ACTYPE
                                   AND ICTD.MODCODE = 'OD'
                                   AND ICTD.EVENTCODE = 'ODTYPEFEE'
                                   AND ICTD.ICCFSTATUS = 'A'
                                   AND OD.FEEACR = 0
                                   AND OD.TXDATE = V_DATE
                                 GROUP BY OD.AFACCTNO,
                                          OD.ACTYPE,
                                          ICTD.ICRATE,
                                          ICTD.RULETYPE
                                 ORDER BY OD.AFACCTNO, OD.ACTYPE) MST) MT) LOOP
      L_ICCFBAL  := REC.TOTALEXEC;
      L_ICRATE   := REC.ICRATE;
      L_RULETYPE := REC.RULETYPE;
      L_ORDER    := REC.TOTALORDER;
      IF L_ICCFBAL > 0 THEN
        IF L_RULETYPE <> 'C' THEN
          --Luat tinh theo fixed hoac tier
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN
              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'OD'
                 AND EVENTCODE = 'ODTYPEFEE'
                 AND DELTD <> 'Y'
                 AND FRAMT < L_ICCFBAL
                 AND TOAMT >= L_ICCFBAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;
          L_AMOUNT := L_ICCFBAL;

          --Cap nhat fee cho tung lenh
          UPDATE ODMAST
             SET FEEACR = ROUND((L_ICRATE / 100) * EXECAMT, 0)
           WHERE AFACCTNO = REC.AFACCTNO
             AND ACTYPE = REC.ACTYPE
             AND TXDATE = V_DATE;

          --Them vao bang log ODFEEODTYPETRAN
          INSERT INTO ODFEEODTYPETRAN
            SELECT SEQ_ODFEEODTYPETRAN.NEXTVAL AUTOID,
                   TXDATE,
                   AFACCTNO,
                   ACTYPE ODTYPE,
                   L_RULETYPE ICCFTYPE,
                   ORDERID,
                   EXECAMT,
                   L_ICRATE ICCFRATE,
                   ROUND((L_ICRATE / 100) * EXECAMT, 0) FEEAMT
              FROM ODMAST
             WHERE AFACCTNO = REC.AFACCTNO
               AND ACTYPE = REC.ACTYPE
               AND TXDATE = V_DATE;
        ELSE
          --Luat tinh theo cluster
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          L_FEEAMT := 0;
          FOR REC_TIER IN (SELECT DELTA, FRAMT, TOAMT
                             FROM ICCFTIER
                            WHERE ACTYPE = REC.ACTYPE
                              AND MODCODE = 'OD'
                              AND EVENTCODE = 'ODTYPEFEE'
                              AND DELTD <> 'Y'
                            ORDER BY FRAMT) LOOP
            EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
            IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
              L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
            ELSE
              L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
            END IF;
            L_ICRATE := L_ICRATE + REC_TIER.DELTA;
            L_FEEAMT := L_FEEAMT + ROUND(L_AMOUNT * (L_ICRATE / 100), 0);
          END LOOP;
          --Cap nhat fee cho tung lenh bang cach lay trung binh
          UPDATE ODMAST
             SET FEEACR = ROUND(((L_FEEAMT / L_ICCFBAL) / 100) * EXECAMT, 0)
           WHERE AFACCTNO = REC.AFACCTNO
             AND ACTYPE = REC.ACTYPE
             AND TXDATE = V_DATE;

          --Them vao bang log ODFEEODTYPETRAN
          INSERT INTO ODFEEODTYPETRAN
            SELECT SEQ_ODFEEODTYPETRAN.NEXTVAL AUTOID,
                   TXDATE,
                   AFACCTNO,
                   ACTYPE ODTYPE,
                   L_RULETYPE ICCFTYPE,
                   ORDERID,
                   EXECAMT,
                   ROUND(L_FEEAMT / L_ICCFBAL, 4) ICCFRATE,
                   ROUND(((L_FEEAMT / L_ICCFBAL) / 100) * EXECAMT, 0) FEEAMT
              FROM ODMAST
             WHERE AFACCTNO = REC.AFACCTNO
               AND ACTYPE = REC.ACTYPE
               AND TXDATE = V_DATE;

        END IF;

      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CalcFeeOnOdtypeCoreBank');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_CalcFeeOnOdtypeCoreBank');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CalcFeeOnOdtypeCoreBank');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CALCFEEONODTYPECOREBANK;
  --End

  ---------------------------------pr_ODFeeCalculate------------------------------------------------
  PROCEDURE PR_ODFEECALCULATE(P_BCHMDL   VARCHAR,
                              P_ERR_CODE OUT VARCHAR2,
                              P_FROMROW  NUMBER,
                              P_TOROW    NUMBER,
                              P_LASTRUN  OUT VARCHAR2) IS
    V_DATE     DATE;
    L_MAXROW   NUMBER(20, 0);
    L_ICRATE   NUMBER;
    V_DELTA    NUMBER;
    L_RULETYPE VARCHAR2(10);
    L_ICCFBAL  NUMBER;
    L_AMOUNT   NUMBER;
    L_ORDER    NUMBER;
    L_FEEAMT   NUMBER;
    L_FEE_EX   NUMBER;

    L_OPNDATE     DATE;
    L_CALFEETYPE  CHAR(1);
    L_CALDATETYPE CHAR(1);
    L_MONTHVAL    NUMBER;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODFeeCalculate');
    P_LASTRUN := 'Y';

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_DATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    L_ICRATE := 0;
    V_DELTA  := 0;
    /*    -- Tinh phi theo loai hinh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='G': Tinh phi nhom theo loai hinh
        -- Tinh cho loai hinh gan truc tiep voi lenh
        for rec in
        (
            select od.afacctno, od.actype, sum(od.execamt) totalexec, ictd.icrate, ictd.ruletype, count(od.orderid) totalorder
                    from odmast od, odtype typ, iccftypedef ictd
                    where od.deltd <> 'Y' and od.execqtty > 0
                          and od.exectype in ('NB','BC','SS','NS','MS')
                          and od.actype = typ.actype and typ.brkfeetype='G'
                          and od.actype = ictd.actype
                          and ictd.modcode = 'OD'
                          and ictd.eventcode = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                          and ictd.iccfstatus = 'A'
                          and od.feeacr = 0
                          and od.txdate = v_DATE
                    group by od.afacctno, od.actype, ictd.icrate, ictd.ruletype
                    order by od.afacctno, od.actype
        )
        loop
            l_iccfbal:=rec.totalexec;
            l_iccfbal:=fn_gettradingamount(rec.afacctno,rec.actype);
            l_icrate:=rec.icrate;
            l_ruletype:=rec.ruletype;
            l_order:=rec.totalorder;
            if l_iccfbal>0 then
                if l_ruletype<>'C' then
                    --Luat tinh theo fixed hoac tier
                    --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                    begin
                    --Xac dinh tier
                        if l_ruletype ='T' then
                            select delta into v_delta from iccftier
                            where actype =rec.actype and modcode ='OD'
                            and eventcode='ODTYPEFEE' and deltd <> 'Y'
                            and framt < l_iccfbal and toamt >= l_iccfbal;
                        else
                            v_delta:=0;
                        end if;
                        l_icrate:=l_icrate+v_delta;
                    exception when others then
                        l_icrate:=l_icrate;
                    end;
                    l_amount:=l_iccfbal;

                    --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                    insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                    select orderid, txdate, 'ODTYPEFEE', rec.actype, round((l_icrate/100)*EXECAMT, 0)
                    from odmast od
                    WHERE od.AFACCTNO = rec.afacctno AND od.ACTYPE = rec.actype
                        and od.deltd <> 'Y' and od.execqtty > 0
                        and od.exectype in ('NB','BC','SS','NS','MS')
                        AND od.TXDATE = v_DATE;
                else
                    --Luat tinh theo cluster
                    --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                    l_feeamt:=0;
                    for rec_tier in
                    (
                        select delta, framt, toamt
                        from iccftier
                            where actype =rec.actype and modcode ='OD'
                            and eventcode='ODTYPEFEE' and deltd <> 'Y'
                            order by framt
                    )
                    loop
                        exit when l_iccfbal<rec_tier.framt;
                        if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                            l_amount:=l_iccfbal-rec_tier.framt;
                        ELSE
                            l_amount:=rec_tier.toamt-rec_tier.framt;
                        end if;
                        l_icrate:=rec.icrate+rec_tier.delta;
                        l_feeamt:=l_feeamt+round(l_amount*(l_icrate/100),0);
                    end loop;
                    --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                    insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                    select orderid, txdate, 'ODTYPEFEE', rec.actype, round(((l_feeamt/l_iccfbal)/100)*EXECAMT, 0)
                    from odmast od
                    WHERE od.AFACCTNO = rec.afacctno AND od.ACTYPE = rec.actype
                        and od.deltd <> 'Y' and od.execqtty > 0
                        and od.exectype in ('NB','BC','SS','NS','MS')
                        AND od.TXDATE = v_DATE;
                end if;

            end if;
        end loop;
    */

    -- Tinh phi theo loai hinh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='G': Tinh phi nhom theo loai hinh
    -- Tinh cho loai hinh khong gan truc tiep voi lenh
    FOR REC IN (SELECT OD.AFACCTNO,
                       TYP.ACTYPE,
                       SUM(OD.EXECAMT) TOTALEXEC,
                       ICTD.ICRATE,
                       ICTD.RULETYPE,
                       COUNT(OD.ORDERID) TOTALORDER
                  FROM ODMAST       OD,
                       AFMAST       AF,
                       ODTYPE       TYP,
                       AFIDTYPE     ID,
                       ICCFTYPEDEF  ICTD,
                       SBSECURITIES SB
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND OD.DELTD <> 'Y'
                   AND OD.EXECQTTY > 0
                   AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                   AND OD.CODEID = SB.CODEID
                      --and od.actype = typ.actype
                      --and od.actype <> typ.actype
                   AND (TYP.VIA = OD.VIA OR TYP.VIA = 'A') --VIA
                   AND TYP.CLEARCD = OD.CLEARCD --CLEARCD
                   AND (TYP.EXECTYPE = OD.EXECTYPE OR TYP.EXECTYPE = 'AA') --EXECTYPE
                   AND (TYP.TIMETYPE = OD.TIMETYPE OR TYP.TIMETYPE = 'A') --TIMETYPE
                   AND (TYP.PRICETYPE = OD.PRICETYPE OR TYP.PRICETYPE = 'AA') --PRICETYPE
                   AND (TYP.MATCHTYPE = OD.MATCHTYPE OR TYP.MATCHTYPE = 'A') --MATCHTYPE
                   AND (TYP.TRADEPLACE = SB.TRADEPLACE OR
                       TYP.TRADEPLACE = '000')
                   AND (INSTR(CASE
                                WHEN SB.SECTYPE IN ('001', '002') THEN
                                 SB.SECTYPE || ',' || '111,333'
                                WHEN SB.SECTYPE IN ('003', '006') THEN
                                 SB.SECTYPE || ',' || '222,333,444'
                                WHEN SB.SECTYPE IN ('008') THEN
                                 SB.SECTYPE || ',' || '111,444'
                                ELSE
                                 SB.SECTYPE
                              END,
                              TYP.SECTYPE) > 0 OR TYP.SECTYPE = '000')
                   AND (TYP.NORK = OD.NORK OR TYP.NORK = 'A') --NORK
                   AND (CASE
                         WHEN TYP.CODEID IS NULL THEN
                          OD.CODEID
                         ELSE
                          TYP.CODEID
                       END) = OD.CODEID
                   AND TYP.ACTYPE = ID.ACTYPE
                   AND ID.AFTYPE = AF.ACTYPE
                   AND ID.OBJNAME = 'OD.ODTYPE'
                   AND TYP.STATUS = 'Y'
                   AND TO_DATE(TYP.VALDATE, 'DD/MM/RRRR') <= V_DATE
                   AND TO_DATE(TYP.EXPDATE, 'DD/MM/RRRR') >= V_DATE
                      --------
                   AND TYP.BRKFEETYPE = 'G'
                   AND TYP.ACTYPE = ICTD.ACTYPE
                   AND ICTD.MODCODE = 'OD'
                   AND ICTD.EVENTCODE = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                   AND ICTD.ICCFSTATUS = 'A'
                   AND OD.FEEACR = 0
                   AND OD.TXDATE = V_DATE
                   AND OD.orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE  TXDATE = V_DATE)
                 GROUP BY OD.AFACCTNO,
                          TYP.ACTYPE,
                          ICTD.ICRATE,
                          ICTD.RULETYPE
                 ORDER BY OD.AFACCTNO, TYP.ACTYPE) LOOP
      L_ICCFBAL  := REC.TOTALEXEC;
      L_ICCFBAL  := FN_GETTRADINGAMOUNT(REC.AFACCTNO, REC.ACTYPE);
      L_ICRATE   := REC.ICRATE;
      L_RULETYPE := REC.RULETYPE;
      L_ORDER    := REC.TOTALORDER;
      IF L_ICCFBAL > 0 THEN
        IF L_RULETYPE <> 'C' THEN
          --Luat tinh theo fixed hoac tier
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN
              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'OD'
                 AND EVENTCODE = 'ODTYPEFEE'
                 AND DELTD <> 'Y'
                 AND FRAMT <= L_ICCFBAL
                 AND TOAMT > L_ICCFBAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;
          L_AMOUNT := L_ICCFBAL;

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          INSERT INTO ODBRKFEE
            (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
            SELECT ORDERID,
                   TXDATE,
                   'ODTYPEFEE',
                   REC.ACTYPE,
                   FLOOR((L_ICRATE / 100) * EXECAMT)
              FROM ODMAST OD
             WHERE OD.ORDERID IN
                   (SELECT OD.ORDERID
                      FROM ODMAST       OD,
                           AFMAST       AF,
                           ODTYPE       TYP,
                           AFIDTYPE     ID,
                           ICCFTYPEDEF  ICTD,
                           SBSECURITIES SB
                     WHERE OD.AFACCTNO = AF.ACCTNO
                       AND OD.DELTD <> 'Y'
                       AND OD.EXECQTTY > 0
                       AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                       AND OD.CODEID = SB.CODEID
                          --and od.actype = typ.actype
                          --and od.actype <> typ.actype
                       AND (TYP.VIA = OD.VIA OR TYP.VIA = 'A') --VIA
                       AND TYP.CLEARCD = OD.CLEARCD --CLEARCD
                       AND (TYP.EXECTYPE = OD.EXECTYPE OR
                           TYP.EXECTYPE = 'AA') --EXECTYPE
                       AND (TYP.TIMETYPE = OD.TIMETYPE OR TYP.TIMETYPE = 'A') --TIMETYPE
                       AND (TYP.PRICETYPE = OD.PRICETYPE OR
                           TYP.PRICETYPE = 'AA') --PRICETYPE
                       AND (TYP.MATCHTYPE = OD.MATCHTYPE OR
                           TYP.MATCHTYPE = 'A') --MATCHTYPE
                       AND (TYP.TRADEPLACE = SB.TRADEPLACE OR
                           TYP.TRADEPLACE = '000')
                       AND (INSTR(CASE
                                    WHEN SB.SECTYPE IN ('001', '002') THEN
                                     SB.SECTYPE || ',' || '111,333'
                                    WHEN SB.SECTYPE IN ('003', '006') THEN
                                     SB.SECTYPE || ',' || '222,333,444'
                                    WHEN SB.SECTYPE IN ('008') THEN
                                     SB.SECTYPE || ',' || '111,444'
                                    ELSE
                                     SB.SECTYPE
                                  END,
                                  TYP.SECTYPE) > 0 OR TYP.SECTYPE = '000')
                       AND (TYP.NORK = OD.NORK OR TYP.NORK = 'A') --NORK
                       AND (CASE
                             WHEN TYP.CODEID IS NULL THEN
                              OD.CODEID
                             ELSE
                              TYP.CODEID
                           END) = OD.CODEID
                       AND TYP.ACTYPE = ID.ACTYPE
                       AND ID.AFTYPE = AF.ACTYPE
                       AND ID.OBJNAME = 'OD.ODTYPE'
                       AND TYP.STATUS = 'Y'
                       AND TO_DATE(TYP.VALDATE, 'DD/MM/RRRR') <= V_DATE
                       AND TO_DATE(TYP.EXPDATE, 'DD/MM/RRRR') >= V_DATE
                          --------
                       AND TYP.BRKFEETYPE = 'G'
                       AND TYP.ACTYPE = ICTD.ACTYPE
                       AND ICTD.MODCODE = 'OD'
                       AND ICTD.EVENTCODE = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                       AND ICTD.ICCFSTATUS = 'A'
                       AND OD.FEEACR = 0
                       AND OD.TXDATE = V_DATE
                       AND OD.AFACCTNO = REC.AFACCTNO
                       AND TYP.ACTYPE = REC.ACTYPE);
        ELSE
          --Luat tinh theo cluster
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          L_FEEAMT := 0;
          FOR REC_TIER IN (SELECT DELTA, FRAMT, TOAMT
                             FROM ICCFTIER
                            WHERE ACTYPE = REC.ACTYPE
                              AND MODCODE = 'OD'
                              AND EVENTCODE = 'ODTYPEFEE'
                              AND DELTD <> 'Y'
                            ORDER BY FRAMT) LOOP
            EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
            IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
              L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
            ELSE
              L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
            END IF;
            L_ICRATE := REC.ICRATE + REC_TIER.DELTA;
            L_FEEAMT := L_FEEAMT + FLOOR(L_AMOUNT * (L_ICRATE / 100));
          END LOOP;

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          INSERT INTO ODBRKFEE
            (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
            SELECT ORDERID,
                   TXDATE,
                   'ODTYPEFEE',
                   REC.ACTYPE,
                   FLOOR(((L_FEEAMT / L_ICCFBAL) / 100) * EXECAMT)
              FROM ODMAST OD
             WHERE OD.ORDERID IN
                   (SELECT OD.ORDERID
                      FROM ODMAST       OD,
                           AFMAST       AF,
                           ODTYPE       TYP,
                           AFIDTYPE     ID,
                           ICCFTYPEDEF  ICTD,
                           SBSECURITIES SB
                     WHERE OD.AFACCTNO = AF.ACCTNO
                       AND OD.DELTD <> 'Y'
                       AND OD.EXECQTTY > 0
                       AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                       AND OD.CODEID = SB.CODEID
                          --and od.actype = typ.actype
                          --and od.actype <> typ.actype
                       AND (TYP.VIA = OD.VIA OR TYP.VIA = 'A') --VIA
                       AND TYP.CLEARCD = OD.CLEARCD --CLEARCD
                       AND (TYP.EXECTYPE = OD.EXECTYPE OR
                           TYP.EXECTYPE = 'AA') --EXECTYPE
                       AND (TYP.TIMETYPE = OD.TIMETYPE OR TYP.TIMETYPE = 'A') --TIMETYPE
                       AND (TYP.PRICETYPE = OD.PRICETYPE OR
                           TYP.PRICETYPE = 'AA') --PRICETYPE
                       AND (TYP.MATCHTYPE = OD.MATCHTYPE OR
                           TYP.MATCHTYPE = 'A') --MATCHTYPE
                       AND (TYP.TRADEPLACE = SB.TRADEPLACE OR
                           TYP.TRADEPLACE = '000')
                       AND (INSTR(CASE
                                    WHEN SB.SECTYPE IN ('001', '002') THEN
                                     SB.SECTYPE || ',' || '111,333'
                                    WHEN SB.SECTYPE IN ('003', '006') THEN
                                     SB.SECTYPE || ',' || '222,333,444'
                                    WHEN SB.SECTYPE IN ('008') THEN
                                     SB.SECTYPE || ',' || '111,444'
                                    ELSE
                                     SB.SECTYPE
                                  END,
                                  TYP.SECTYPE) > 0 OR TYP.SECTYPE = '000')
                       AND (TYP.NORK = OD.NORK OR TYP.NORK = 'A') --NORK
                       AND (CASE
                             WHEN TYP.CODEID IS NULL THEN
                              OD.CODEID
                             ELSE
                              TYP.CODEID
                           END) = OD.CODEID
                       AND TYP.ACTYPE = ID.ACTYPE
                       AND ID.AFTYPE = AF.ACTYPE
                       AND ID.OBJNAME = 'OD.ODTYPE'
                       AND TYP.STATUS = 'Y'
                       AND TO_DATE(TYP.VALDATE, 'DD/MM/RRRR') <= V_DATE
                       AND TO_DATE(TYP.EXPDATE, 'DD/MM/RRRR') >= V_DATE
                          --------
                       AND TYP.BRKFEETYPE = 'G'
                       AND TYP.ACTYPE = ICTD.ACTYPE
                       AND ICTD.MODCODE = 'OD'
                       AND ICTD.EVENTCODE = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                       AND ICTD.ICCFSTATUS = 'A'
                       AND OD.FEEACR = 0
                       AND OD.TXDATE = V_DATE
                       AND OD.AFACCTNO = REC.AFACCTNO
                       AND TYP.ACTYPE = REC.ACTYPE);
        END IF;

      END IF;
    END LOOP;

    -- Tinh phi theo lenh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='N': Tinh phi theo tung lenh
    --TInh cho loai hinh gan voi lenh
    FOR REC IN (SELECT OD.ORDERID,
                       MAX(OD.AFACCTNO) AFACCTNO,
                       TYP.ACTYPE ACTYPE,
                       MAX(OD.EXECAMT) TOTALEXEC,
                       MAX(ICTD.ICRATE) ICRATE,
                       MAX(ICTD.RULETYPE) RULETYPE
                  FROM ODMAST OD, ODTYPE TYP, ICCFTYPEDEF ICTD
                 WHERE OD.DELTD <> 'Y'
                   AND OD.EXECQTTY > 0
                   AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                   AND OD.ACTYPE = TYP.ACTYPE
                   AND TYP.BRKFEETYPE = 'N'
                   AND OD.ACTYPE = ICTD.ACTYPE
                   AND ICTD.MODCODE = 'OD'
                   AND ICTD.EVENTCODE = 'ODTRADEFEE' --Event tinh phi theo lenh
                   AND ICTD.ICCFSTATUS = 'A'
                   AND OD.FEEACR = 0
                   AND OD.TXDATE = V_DATE
                   AND OD.orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE TXDATE = V_DATE)
                 GROUP BY OD.ORDERID, TYP.ACTYPE
                 ORDER BY OD.ORDERID) LOOP
      L_ICCFBAL  := REC.TOTALEXEC;
      L_ICRATE   := REC.ICRATE;
      L_RULETYPE := REC.RULETYPE;
      IF L_ICCFBAL > 0 THEN
        IF L_RULETYPE <> 'C' THEN
          --Luat tinh theo fixed hoac tier
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN
              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'OD'
                 AND EVENTCODE = 'ODTRADEFEE'
                 AND DELTD <> 'Y'
                 AND FRAMT <= L_ICCFBAL
                 AND TOAMT > L_ICCFBAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;
          L_AMOUNT := L_ICCFBAL;

          /*--Cap nhat fee cho tung lenh
          UPDATE ODMAST SET FEEACR = round((l_icrate/100)*EXECAMT, 0)
          WHERE orderid = rec.orderid;*/

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          INSERT INTO ODBRKFEE
            (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
            SELECT ORDERID,
                   TXDATE,
                   'ODTRADEFEE',
                   REC.ACTYPE,
                   FLOOR((L_ICRATE / 100) * EXECAMT)
              FROM ODMAST
             WHERE ORDERID = REC.ORDERID;
        ELSE
          --Luat tinh theo cluster
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          L_FEEAMT := 0;
          FOR REC_TIER IN (SELECT DELTA, FRAMT, TOAMT
                             FROM ICCFTIER
                            WHERE ACTYPE = REC.ACTYPE
                              AND MODCODE = 'OD'
                              AND EVENTCODE = 'ODTRADEFEE'
                              AND DELTD <> 'Y'
                            ORDER BY FRAMT) LOOP
            EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
            IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
              L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
            ELSE
              L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
            END IF;
            L_ICRATE := REC.ICRATE + REC_TIER.DELTA;
            L_FEEAMT := L_FEEAMT + FLOOR(L_AMOUNT * (L_ICRATE / 100));
          END LOOP;
          /*--Cap nhat fee cho tung lenh bang cach lay trung binh
          UPDATE ODMAST SET FEEACR = l_feeamt
          WHERE orderid = rec.orderid;*/

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          INSERT INTO ODBRKFEE
            (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
            SELECT ORDERID, TXDATE, 'ODTRADEFEE', REC.ACTYPE, L_FEEAMT
              FROM ODMAST
             WHERE ORDERID = REC.ORDERID;
        END IF;
      END IF;
    END LOOP;

    -- Tinh phi theo lenh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='N': Tinh phi theo tung lenh
    --TInh theo su kien cua loai hinh lenh khong gan voi lenh ma thoa man cac tieu chi
    FOR REC IN (SELECT OD.ORDERID,
                       MAX(OD.AFACCTNO) AFACCTNO,
                       TYP.ACTYPE ACTYPE,
                       MAX(OD.EXECAMT) TOTALEXEC,
                       MAX(ICTD.ICRATE) ICRATE,
                       MAX(ICTD.RULETYPE) RULETYPE
                  FROM ODMAST       OD,
                       AFMAST       AF,
                       ODTYPE       TYP,
                       AFIDTYPE     ID,
                       ICCFTYPEDEF  ICTD,
                       SBSECURITIES SB
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND OD.DELTD <> 'Y'
                   AND OD.EXECQTTY > 0
                   AND OD.CODEID = SB.CODEID
                   AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                      --and od.actype = typ.actype
                   AND OD.ACTYPE <> TYP.ACTYPE
                   AND (TYP.VIA = OD.VIA OR TYP.VIA = 'A') --VIA
                   AND TYP.CLEARCD = OD.CLEARCD --CLEARCD
                   AND (TYP.EXECTYPE = OD.EXECTYPE OR TYP.EXECTYPE = 'AA') --EXECTYPE
                   AND (TYP.TIMETYPE = OD.TIMETYPE OR TYP.TIMETYPE = 'A') --TIMETYPE
                   AND (TYP.PRICETYPE = OD.PRICETYPE OR TYP.PRICETYPE = 'AA') --PRICETYPE
                   AND (TYP.MATCHTYPE = OD.MATCHTYPE OR TYP.MATCHTYPE = 'A') --MATCHTYPE
                   AND (TYP.TRADEPLACE = SB.TRADEPLACE OR
                       TYP.TRADEPLACE = '000')
                   AND (INSTR(CASE
                                WHEN SB.SECTYPE IN ('001', '002') THEN
                                 SB.SECTYPE || ',' || '111,333'
                                WHEN SB.SECTYPE IN ('003', '006') THEN
                                 SB.SECTYPE || ',' || '222,333,444'
                                WHEN SB.SECTYPE IN ('008') THEN
                                 SB.SECTYPE || ',' || '111,444'
                                ELSE
                                 SB.SECTYPE
                              END,
                              TYP.SECTYPE) > 0 OR TYP.SECTYPE = '000')
                   AND (TYP.NORK = OD.NORK OR TYP.NORK = 'A') --NORK
                   AND (CASE
                         WHEN TYP.CODEID IS NULL THEN
                          OD.CODEID
                         ELSE
                          TYP.CODEID
                       END) = OD.CODEID
                   AND TYP.ACTYPE = ID.ACTYPE
                   AND ID.AFTYPE = AF.ACTYPE
                   AND ID.OBJNAME = 'OD.ODTYPE'
                   AND TYP.STATUS = 'Y'
                   AND TO_DATE(TYP.VALDATE, 'DD/MM/RRRR') <= V_DATE
                   AND TO_DATE(TYP.EXPDATE, 'DD/MM/RRRR') >= V_DATE
                      ---------------------
                   AND TYP.BRKFEETYPE = 'N'
                   AND TYP.ACTYPE = ICTD.ACTYPE
                   AND ICTD.MODCODE = 'OD'
                   AND ICTD.EVENTCODE = 'ODTRADEFEE' --Event tinh phi theo lenh
                   AND ICTD.ICCFSTATUS = 'A'
                   AND OD.FEEACR = 0
                   AND OD.TXDATE = V_DATE
                   AND OD.orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE TXDATE = V_DATE)
                 GROUP BY OD.ORDERID, TYP.ACTYPE
                 ORDER BY OD.ORDERID) LOOP
      L_ICCFBAL  := REC.TOTALEXEC;
      L_ICRATE   := REC.ICRATE;
      L_RULETYPE := REC.RULETYPE;
      IF L_ICCFBAL > 0 THEN
        IF L_RULETYPE <> 'C' THEN
          --Luat tinh theo fixed hoac tier
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' THEN
              SELECT DELTA
                INTO V_DELTA
                FROM ICCFTIER
               WHERE ACTYPE = REC.ACTYPE
                 AND MODCODE = 'OD'
                 AND EVENTCODE = 'ODTRADEFEE'
                 AND DELTD <> 'Y'
                 AND FRAMT <= L_ICCFBAL
                 AND TOAMT > L_ICCFBAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;
          L_AMOUNT := L_ICCFBAL;

          /*--Cap nhat fee cho tung lenh
          UPDATE ODMAST SET FEEACR = round((l_icrate/100)*EXECAMT, 0)
          WHERE orderid = rec.orderid;*/

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          INSERT INTO ODBRKFEE
            (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
            SELECT ORDERID,
                   TXDATE,
                   'ODTRADEFEE',
                   REC.ACTYPE,
                   FLOOR((L_ICRATE / 100) * EXECAMT)
              FROM ODMAST
             WHERE ORDERID = REC.ORDERID;
        ELSE
          --Luat tinh theo cluster
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          L_FEEAMT := 0;
          FOR REC_TIER IN (SELECT DELTA, FRAMT, TOAMT
                             FROM ICCFTIER
                            WHERE ACTYPE = REC.ACTYPE
                              AND MODCODE = 'OD'
                              AND EVENTCODE = 'ODTRADEFEE'
                              AND DELTD <> 'Y'
                            ORDER BY FRAMT) LOOP
            EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
            IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
              L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
            ELSE
              L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
            END IF;
            L_ICRATE := REC.ICRATE + REC_TIER.DELTA;
            L_FEEAMT := L_FEEAMT + FLOOR(L_AMOUNT * (L_ICRATE / 100));
          END LOOP;
          /*--Cap nhat fee cho tung lenh bang cach lay trung binh
          UPDATE ODMAST SET FEEACR = l_feeamt
          WHERE orderid = rec.orderid;*/

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          INSERT INTO ODBRKFEE
            (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
            SELECT ORDERID, TXDATE, 'ODTRADEFEE', REC.ACTYPE, L_FEEAMT
              FROM ODMAST
             WHERE ORDERID = REC.ORDERID;
        END IF;
      END IF;
    END LOOP;

    /*-- Tinh phi theo lenh: Cho tinh cho truong hop khai ICCF trong loai hinh va ISSUMMARIZED='Y': Tinh phi theo tong gia tri lenh trong ngay
    for rec in
    (
        select od.afacctno afacctno, max(af.actype) actype , sum(od.execamt) totalexec, max(ictd.icrate) icrate,
                     max(ictd.ruletype) ruletype
                from odmast od, odtype typ,afmast af,aftype aft, iccftypedef ictd
                where od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      and od.actype = typ.actype and typ.issummarized='Y'
                      and od.afacctno = af.acctno
                      and af.actype = aft.actype
                      and aft.actype = ictd.actype
                      and ictd.modcode = 'CF'
                      and ictd.eventcode = 'DTRADEFEE' --Event tinh phi theo ngay
                      and ictd.iccfstatus = 'A'
                      and od.feeacr = 0
                      and od.txdate = v_DATE
                group by od.afacctno
                order by od.afacctno
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='CF'
                        and eventcode='DTRADEFEE' and deltd <> 'Y'
                        and framt < l_iccfbal and toamt >= l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'DTRADEFEE', rec.afacctno, round((l_icrate/100)*EXECAMT, 0)
                from odmast od
                WHERE od.afacctno = rec.afacctno and od.actype in (select actype from odtype where issummarized='Y')
                      and od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      AND od.TXDATE = v_DATE;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='CF'
                        and eventcode='DTRADEFEE' and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=rec.icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+round(l_amount*(l_icrate/100),0);
                end loop;
                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'DTRADEFEE', rec.afacctno, round((l_feeamt/l_iccfbal)*EXECAMT, 0)
                from odmast od
                WHERE od.afacctno = rec.afacctno and od.actype in (select actype from odtype where issummarized='Y')
                      and od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      AND TXDATE = v_DATE;
            end if;
        end if;
    end loop;*/

    -- Tinh phi theo su kien: mien giam phi theo chinh sach trong ODPROBRKMST
    FOR REC IN (SELECT SUM(OD.EXECAMT) TOTALEXEC,
                       MAX(MST.FEETYPE) RULETYPE,
                       MAX(MST.FEERATE) ICRATE,
                       MAX(MST.MINAMT) MINAMT,
                       MAX(MST.MAXAMT) MAXAMT,
                       PAF.AFACCTNO,
                       MST.AUTOID,
                       MAX(PAF.OPNDATE) OPNDATE,
                       MAX(MST.CALFEETYPE) CALFEETYPE,
                       MAX(MST.CALDATETYPE) CALDATETYPE,
                       MAX(CASE
                             WHEN CALDATETYPE = '1' THEN
                              (TO_NUMBER(TO_CHAR(V_DATE, 'RRRR')) -
                              TO_NUMBER(TO_CHAR(MST.VALDATE, 'RRRR'))) * 12 +
                              (TO_NUMBER(TO_CHAR(V_DATE, 'MM')) -
                              TO_NUMBER(TO_CHAR(MST.VALDATE, 'MM')))
                             ELSE
                              (TO_NUMBER(TO_CHAR(V_DATE, 'RRRR')) -
                              TO_NUMBER(TO_CHAR(PAF.OPNDATE, 'RRRR'))) * 12 +
                              (TO_NUMBER(TO_CHAR(V_DATE, 'MM')) -
                              TO_NUMBER(TO_CHAR(PAF.OPNDATE, 'MM')))
                           END) MONTHVAL,
                       MAX(CASE
                             WHEN CALDATETYPE = '1' THEN
                              TO_NUMBER(V_DATE - PAF.VALDATE)
                             ELSE
                              TO_NUMBER(V_DATE - PAF.OPNDATE)
                           END) DATEVAL
                  FROM ODPROBRKAF PAF, ODPROBRKMST MST, ODMAST OD
                 WHERE MST.AUTOID = PAF.REFAUTOID
                   AND NVL(PAF.VALDATE, TO_DATE('01/01/2014', 'DD/MM/RRRR')) <=
                       V_DATE
                   AND NVL(PAF.EXPDATE, TO_DATE('01/01/2014', 'DD/MM/RRRR')) >=
                       V_DATE
                   AND PAF.AFACCTNO = OD.AFACCTNO
                   AND OD.DELTD <> 'Y'
                   AND OD.EXECQTTY > 0
                   AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                   AND OD.TXDATE = V_DATE
                   AND OD.orderid NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE  TXDATE = V_DATE)
                   AND PAF.STATUS = 'A'
                 GROUP BY MST.AUTOID, PAF.AFACCTNO) LOOP
      L_ICCFBAL     := REC.TOTALEXEC;
      L_ICRATE      := REC.ICRATE;
      L_RULETYPE    := REC.RULETYPE;
      L_OPNDATE     := REC.OPNDATE;
      L_CALFEETYPE  := REC.CALFEETYPE;
      L_CALDATETYPE := REC.CALDATETYPE;
      IF L_ICCFBAL > 0 THEN
        IF L_CALFEETYPE = 'D' THEN
          --Kieu tinh Direct theo bieu phi
          IF L_RULETYPE <> 'C' THEN
            --Luat tinh theo fixed hoac tier
            --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
            BEGIN
              --Xac dinh tier
              IF L_RULETYPE = 'T' THEN
                SELECT VALAMT
                  INTO V_DELTA
                  FROM ODPROBRKSCHM
                 WHERE REFAUTOID = REC.AUTOID
                   AND FRAMT <= L_ICCFBAL
                   AND TOAMT > L_ICCFBAL;
              ELSE
                V_DELTA := 0;
              END IF;
              L_ICRATE := L_ICRATE + V_DELTA;
            EXCEPTION
              WHEN OTHERS THEN
                L_ICRATE := L_ICRATE;
            END;
            L_AMOUNT := L_ICCFBAL;
            L_FEEAMT := L_ICRATE / 100 * L_ICCFBAL;
            L_FEEAMT := LEAST(L_FEEAMT, REC.MAXAMT);
            L_FEEAMT := GREATEST(L_FEEAMT, REC.MINAMT);
            --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
            INSERT INTO ODBRKFEE
              (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
              SELECT ORDERID,
                     TXDATE,
                     'ODPROBRKMST',
                     TO_CHAR(REC.AUTOID),
                     FLOOR(L_FEEAMT / L_ICCFBAL * EXECAMT)
                FROM ODMAST OD
               WHERE OD.AFACCTNO = REC.AFACCTNO
                 AND OD.DELTD <> 'Y'
                 AND OD.EXECQTTY > 0
                 AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                 AND OD.TXDATE = V_DATE;
          ELSE
            --Luat tinh theo cluster
            --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
            L_FEEAMT := 0;
            FOR REC_TIER IN (SELECT VALAMT DELTA, FRAMT, TOAMT
                               FROM ODPROBRKSCHM
                              WHERE REFAUTOID = REC.AUTOID
                              ORDER BY FRAMT) LOOP
              EXIT WHEN L_ICCFBAL < REC_TIER.FRAMT;
              IF L_ICCFBAL > REC_TIER.FRAMT AND L_ICCFBAL < REC_TIER.TOAMT THEN
                L_AMOUNT := L_ICCFBAL - REC_TIER.FRAMT;
              ELSE
                L_AMOUNT := REC_TIER.TOAMT - REC_TIER.FRAMT;
              END IF;
              L_ICRATE := REC.ICRATE + REC_TIER.DELTA;
              L_FEEAMT := L_FEEAMT + FLOOR(L_AMOUNT * (L_ICRATE / 100));
            END LOOP;
            L_FEEAMT := LEAST(L_FEEAMT, REC.MAXAMT);
            L_FEEAMT := GREATEST(L_FEEAMT, REC.MINAMT);
            --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
            INSERT INTO ODBRKFEE
              (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
              SELECT ORDERID,
                     TXDATE,
                     'ODPROBRKMST',
                     TO_CHAR(REC.AUTOID),
                     FLOOR((L_FEEAMT / L_ICCFBAL) * EXECAMT)
                FROM ODMAST OD
               WHERE OD.AFACCTNO = REC.AFACCTNO
                 AND OD.DELTD <> 'Y'
                 AND OD.EXECQTTY > 0
                 AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                 AND OD.TXDATE = V_DATE;
          END IF;
        ELSE
          --l_calfeetype= 'I' --Kieu tinh Indirect theo bac thang thoi gian
          --Tinh so thang hien tai de tinh bac thang thoi gian
          L_MONTHVAL := REC.MONTHVAL;
          --Luat tinh theo fixed hoac tier (Cluster tinh giong voi Tier)
          --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
          BEGIN
            --Xac dinh tier
            IF L_RULETYPE = 'T' OR L_RULETYPE = 'C' THEN
              SELECT VALAMT
                INTO V_DELTA
                FROM ODPROBRKSCHM2
               WHERE REFAUTOID = REC.AUTOID
                 AND FRDATE <= REC.DATEVAL
                 AND TODATE > REC.DATEVAL;
            ELSE
              V_DELTA := 0;
            END IF;
            L_ICRATE := L_ICRATE + V_DELTA;
          EXCEPTION
            WHEN OTHERS THEN
              L_ICRATE := L_ICRATE;
          END;

          --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
          --So phi tinh = ty le mien giam phi * So phi da tinh tren loai hinh.
          insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
          select br.orderid, br.txdate, 'ODPROBRKMST', to_char(rec.autoid), floor(br.feeamt*l_icrate/100)
          from odbrkfee br,odmast od
          WHERE br.eventcode = 'ODTYPEFEE' --Chi tinh mien giam tren bieu phi chung cua loai hinh
              and br.orderid = od.orderid
              and od.afacctno = rec.afacctno
              and od.deltd <> 'Y' and od.execqtty > 0
              and od.exectype in ('NB','BC','SS','NS','MS')
              and od.txdate = v_DATE;
          --Lay ra tong phi min theo loai hinh
          SELECT NVL(SUM(FEE_EX), 0) FEE_EX
            INTO L_FEE_EX
            FROM (SELECT BR.ORDERID,
                         BR.TXDATE,
                         'ODPROBRKMST',
                         TO_CHAR(REC.AUTOID) AUTOID,
                         FLOOR(MIN(BR.FEEAMT) * L_ICRATE / 100) FEE_EX
                    FROM ODBRKFEE BR, ODMAST OD
                   WHERE BR.EVENTCODE = 'ODTYPEFEE' --Chi tinh mien giam tren bieu phi chung cua loai hinh
                     AND BR.ORDERID = OD.ORDERID
                     AND OD.AFACCTNO = REC.AFACCTNO
                     AND OD.DELTD <> 'Y'
                     AND OD.EXECQTTY > 0
                     AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                     AND OD.TXDATE = V_DATE
                   GROUP BY BR.ORDERID, BR.TXDATE);
          L_FEEAMT := L_FEE_EX;
          L_FEEAMT := LEAST(L_FEEAMT, REC.MAXAMT);
          L_FEEAMT := GREATEST(L_FEEAMT, REC.MINAMT);

          IF L_FEE_EX > 0 THEN
            INSERT INTO ODBRKFEE
              (ORDERID, TXDATE, EVENTCODE, REFCODE, FEEAMT)
              SELECT BR.ORDERID,
                     BR.TXDATE,
                     'ODPROBRKMST',
                     TO_CHAR(REC.AUTOID),
                     FLOOR(MIN(BR.FEEAMT) * L_ICRATE / 100 * L_FEEAMT /
                           L_FEE_EX)
                FROM ODBRKFEE BR, ODMAST OD
               WHERE BR.EVENTCODE = 'ODTYPEFEE' --Chi tinh mien giam tren bieu phi chung cua loai hinh
                 AND BR.ORDERID = OD.ORDERID
                 AND OD.AFACCTNO = REC.AFACCTNO
                 AND OD.DELTD <> 'Y'
                 AND OD.EXECQTTY > 0
                 AND OD.EXECTYPE IN ('NB', 'BC', 'SS', 'NS', 'MS')
                 AND OD.TXDATE = V_DATE
               GROUP BY BR.ORDERID, BR.TXDATE;
          END IF;

        END IF;

      END IF;
    END LOOP;

    --Ap muc phi toi thieu cho lenh
    FOR REC IN (SELECT ORDERID, MIN(FEEAMT) FEEAMT
                  FROM ODBRKFEE
                 WHERE TXDATE = V_DATE
                 AND ORDERID NOT IN (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE TXDATE = V_DATE)
                 GROUP BY ORDERID) LOOP
      UPDATE ODMAST SET FEEACR = REC.FEEAMT WHERE ORDERID = REC.ORDERID;
      PR_ALLOCATE_IOD_FEE(REC.ORDERID); --Gianh VG moi them
    END LOOP;
    -- call cal_odmast_excfeeamt proc
    CAL_ODMAST_EXCFEEAMT;

    ---DungNH cap nhat phi trong IOD cho lenh repo
    FOR RECrepo IN (SELECT ORDERID, (FEEACR)  FEEACR FROM ODMAST
                 WHERE TXDATE = V_DATE
                 and ORDERID in (SELECT nvl(ORDERID,'01010101') FROM bondrepo WHERE TXDATE = V_DATE)
               )
    LOOP
      update iod set iodfeeacr = RECrepo.FEEACR where iod.orgorderid=recrepo.ORDERID;
    END LOOP;
    ---End DungNH.

    --HSX04: log lai thong tin phi lenh mua
      MERGE INTO cimast  ci
      USING (select od.afacctno,
             sum(case when exectype <> 'NB' then execamt else 0 end ) execamt_sell,
             sum(case when exectype <> 'NB' then feeacr - feeamt + taxsellamt else 0 end ) feeacr_sell,
             sum(case when exectype = 'NB' then execamt else 0 end ) execamt_buy,
              sum(case when exectype = 'NB' then feeacr - feeamt else 0 end ) feeacr_buy
              from odmast od where od.txdate = v_DATE and od.execqtty >0
              group by afacctno ) od
      ON (ci.afacctno = od.afacctno )
      WHEN MATCHED THEN
      UPDATE SET ci.EXECBUYAMT =od.execamt_buy,
                ci.EXECFEEBUYAMT = od.feeacr_buy,
                     ci.EXECSELLAMT = od.execamt_sell,
                     ci.EXECFEEVATSELLAMT = od.feeacr_sell ;
        prc_adv_cimastext('ALL','N');
     --end HSX04

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODFeeCalculate');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on pr_ODFeeCalculate');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODFeeCalculate');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODFEECALCULATE;

  --Tat toan khoan tiet kiem deal cty
  PROCEDURE PR_TDEOTD(P_BCHMDL   VARCHAR,
                      P_ERR_CODE OUT VARCHAR2,
                      P_FROMROW  NUMBER,
                      P_TOROW    NUMBER,
                      P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_CUSTODYCD     VARCHAR2(20);
    L_CFFULLNAME    VARCHAR2(100);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TDEOTD');
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';
    SELECT VARVALUE
      INTO V_STRNEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  TDMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    P_LASTRUN := 'Y';

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1610';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1610';
    PLOG.DEBUG(PKGCTX,
               '1610 p_FromRow= ' || P_FROMROW || ' p_ToRow =' || P_TOROW);
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    PLOG.DEBUG(PKGCTX,
               'pr_TDEOTD ' || P_BCHMDL || ' v_strCURRDATE ' ||
               V_STRCURRDATE);
    --Thuc hien tat toan cac mon tiet kiem den han.
    --Giao dich nay se thuc hien
    --1. Giai toa cac khoan da phong toa
    --2. Tat toan cac khoan vay cam co
    --3. Neu tu dong Renew thi khong hach toan, doi buoc Renew (Lai co the nhap goc hay khong
    --4. Neu khong tu dong Renew thi nhap tien ve CI
    FOR REC IN (

                SELECT ACCTNO,
                        AFACCTNO,
                        BALANCE,
                        ACTYPE,
                        STATUS,
                        ORGAMT,
                        TPR,
                        TDTERM,
                        OPNDATE,
                        TODATE,
                        MORTGAGE,
                        BALANCE AMT,
                        FRDATE,
                        FN_TDMASTINTRATIO(ACCTNO,
                                          TO_DATE(V_STRCURRDATE, 'DD/MM/YYYY'),
                                          BALANCE + BLOCKAMT) INTAVLAMT,
                        BALANCE + BLOCKAMT - MORTGAGE DIRECTAMT,
                        DECODE(AUTORND, 'Y', 0, 1) AUTORND,
                        (CASE
                          WHEN MST.AUTORND = 'Y' AND MST.INTDUECD = 'Y' THEN
                           0
                          ELSE
                           1
                        END) NOTINTDUECD,
                        BLOCKAMT,
                        ODAMT,
                        FLOOR(ODINTACR) ODINTACR
                  FROM TDMAST MST
                 WHERE MST.STATUS IN ('N', 'A')
                   AND MST.DELTD <> 'Y'
                   AND (TODATE <= TO_DATE(V_STRCURRDATE, 'dd/MM/yyyy') OR
                       BALANCE + BLOCKAMT = 0)
                   AND (AUTOPAID = 'Y' OR BALANCE + BLOCKAMT = 0)
                   AND MST.TDSRC = 'C') LOOP

      --Set txnum
      PLOG.DEBUG(PKGCTX,
                 'Loop for account:' || REC.ACCTNO || ' ngay' ||
                 TO_CHAR(V_STRCURRDATE) || ' p_FromRow =' || P_FROMROW ||
                 'p_ToRow =' || P_TOROW);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      -- lay du lieu de hien thi len man hinh chinh

      SELECT CF.FULLNAME, CF.CUSTODYCD
        INTO L_CFFULLNAME, L_CUSTODYCD
        FROM CFMAST CF, AFMAST AF
       WHERE AF.CUSTID = CF.CUSTID
         AND AF.ACCTNO = REC.AFACCTNO;

      --Set cac field giao dich
      --03  ACCTNO      C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;

      --09  BALANCE     N
      L_TXMSG.TXFIELDS('09').DEFNAME := 'BALANCE';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := ROUND(REC.AMT, 0);

      --10  AMT     N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11  INTAMT    N So lai
      L_TXMSG.TXFIELDS('11').DEFNAME := 'INTAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.INTAVLAMT, 0);
      --12  INTAVLAMT      N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'INTAVLAMT';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.INTAVLAMT, 0);

      --13  MORTGAGE      N
      L_TXMSG.TXFIELDS('13').DEFNAME := 'MORTGAGE';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := ROUND(REC.MORTGAGE, 0);

      --15  DIRECTAMT      N
      L_TXMSG.TXFIELDS('15').DEFNAME := 'DIRECTAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := ROUND(REC.DIRECTAMT, 0);

      --15  AUTORND      N
      L_TXMSG.TXFIELDS('16').DEFNAME := 'AUTORND';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := ROUND(REC.AUTORND, 0);
      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('17').DEFNAME := 'ORGAMT';
      L_TXMSG.TXFIELDS('17').TYPE := 'N';
      L_TXMSG.TXFIELDS('17').VALUE := REC.ORGAMT;

      --21  BLOCKAMT      C
      L_TXMSG.TXFIELDS('21').DEFNAME := 'BLOCKAMT';
      L_TXMSG.TXFIELDS('21').TYPE := 'N';
      L_TXMSG.TXFIELDS('21').VALUE := REC.BLOCKAMT;
      --22  ODAMT      C
      L_TXMSG.TXFIELDS('22').DEFNAME := 'ODAMT';
      L_TXMSG.TXFIELDS('22').TYPE := 'N';
      L_TXMSG.TXFIELDS('22').VALUE := REC.ODAMT;
      --23  ODINTACR      C
      L_TXMSG.TXFIELDS('23').DEFNAME := 'ODINTACR';
      L_TXMSG.TXFIELDS('23').TYPE := 'N';
      L_TXMSG.TXFIELDS('23').VALUE := REC.ODINTACR;
      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('18').DEFNAME := 'FRDATE';
      L_TXMSG.TXFIELDS('18').TYPE := 'C';
      L_TXMSG.TXFIELDS('18').VALUE := REC.FRDATE;
      --20  NOTINTDUECD      N
      L_TXMSG.TXFIELDS('20').DEFNAME := 'NOTINTDUECD';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := ROUND(REC.NOTINTDUECD, 0);

      --30    DESC        C
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      --08  ACCTNO      C
      L_TXMSG.TXFIELDS('08').DEFNAME := 'FULLNAME';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := L_CFFULLNAME;

      --96  ACCTNO      C
      L_TXMSG.TXFIELDS('96').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('96').TYPE := 'C';
      L_TXMSG.TXFIELDS('96').VALUE := L_CUSTODYCD;

      BEGIN
        IF TXPKS_#1610.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 1610: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TDEOTD');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_TDEOTD');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TDEOTD');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TDEOTD;

  --Tat toan khoan tiet kiem deal bank
  PROCEDURE PR_TDEOTD_BANK(P_BCHMDL   VARCHAR,
                           P_ERR_CODE OUT VARCHAR2,
                           P_FROMROW  NUMBER,
                           P_TOROW    NUMBER,
                           P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_CUSTODYCD     VARCHAR2(20);
    L_CFFULLNAME    VARCHAR2(100);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TDEOTD_BANK');
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';
    SELECT VARVALUE
      INTO V_STRNEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  TDMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    P_LASTRUN := 'Y';

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1610';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1610';
    PLOG.DEBUG(PKGCTX,
               '1610 p_FromRow= ' || P_FROMROW || ' p_ToRow =' || P_TOROW);
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    PLOG.DEBUG(PKGCTX,
               'pr_TDEOTD_BANK ' || P_BCHMDL || ' v_strCURRDATE ' ||
               V_STRCURRDATE);
    --Thuc hien tat toan cac mon tiet kiem den han.
    --Giao dich nay se thuc hien
    --1. Giai toa cac khoan da phong toa
    --2. Tat toan cac khoan vay cam co
    --3. Neu tu dong Renew thi khong hach toan, doi buoc Renew (Lai co the nhap goc hay khong
    --4. Neu khong tu dong Renew thi nhap tien ve CI
    FOR REC IN (

                SELECT ACCTNO,
                        AFACCTNO,
                        BALANCE,
                        ACTYPE,
                        STATUS,
                        ORGAMT,
                        TPR,
                        TDTERM,
                        OPNDATE,
                        TODATE,
                        MORTGAGE,
                        BALANCE AMT,
                        FRDATE,
                        FN_TDMASTINTRATIO(ACCTNO,
                                          TO_DATE(V_STRCURRDATE, 'DD/MM/YYYY'),
                                          BALANCE + BLOCKAMT) INTAVLAMT,
                        BALANCE + BLOCKAMT - MORTGAGE DIRECTAMT,
                        DECODE(AUTORND, 'Y', 0, 1) AUTORND,
                        (CASE
                          WHEN MST.AUTORND = 'Y' AND MST.INTDUECD = 'Y' THEN
                           0
                          ELSE
                           1
                        END) NOTINTDUECD,
                        BLOCKAMT,
                        ODAMT,
                        FLOOR(ODINTACR) ODINTACR
                  FROM TDMAST MST
                 WHERE MST.STATUS IN ('N', 'A')
                   AND MST.DELTD <> 'Y'
                   AND (TODATE <= TO_DATE(V_STRCURRDATE, 'dd/MM/yyyy') OR
                       BALANCE + BLOCKAMT = 0)
                   AND (AUTOPAID = 'Y' OR BALANCE + BLOCKAMT = 0)
                   AND MST.TDSRC = 'B') LOOP

      --Set txnum
      PLOG.DEBUG(PKGCTX,
                 'Loop for account:' || REC.ACCTNO || ' ngay' ||
                 TO_CHAR(V_STRCURRDATE) || ' p_FromRow =' || P_FROMROW ||
                 'p_ToRow =' || P_TOROW);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      -- lay du lieu de hien thi len man hinh chinh

      SELECT CF.FULLNAME, CF.CUSTODYCD
        INTO L_CFFULLNAME, L_CUSTODYCD
        FROM CFMAST CF, AFMAST AF
       WHERE AF.CUSTID = CF.CUSTID
         AND AF.ACCTNO = REC.AFACCTNO;

      --Set cac field giao dich
      --03  ACCTNO      C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;

      --09  BALANCE     N
      L_TXMSG.TXFIELDS('09').DEFNAME := 'BALANCE';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := ROUND(REC.AMT, 0);

      --10  AMT     N
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11  INTAMT    N So lai
      L_TXMSG.TXFIELDS('11').DEFNAME := 'INTAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.INTAVLAMT, 0);
      --12  INTAVLAMT      N
      L_TXMSG.TXFIELDS('12').DEFNAME := 'INTAVLAMT';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.INTAVLAMT, 0);

      --13  MORTGAGE      N
      L_TXMSG.TXFIELDS('13').DEFNAME := 'MORTGAGE';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := ROUND(REC.MORTGAGE, 0);

      --15  DIRECTAMT      N
      L_TXMSG.TXFIELDS('15').DEFNAME := 'DIRECTAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := ROUND(REC.DIRECTAMT, 0);

      --15  AUTORND      N
      L_TXMSG.TXFIELDS('16').DEFNAME := 'AUTORND';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := ROUND(REC.AUTORND, 0);
      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('17').DEFNAME := 'ORGAMT';
      L_TXMSG.TXFIELDS('17').TYPE := 'N';
      L_TXMSG.TXFIELDS('17').VALUE := REC.ORGAMT;

      --21  BLOCKAMT      C
      L_TXMSG.TXFIELDS('21').DEFNAME := 'BLOCKAMT';
      L_TXMSG.TXFIELDS('21').TYPE := 'N';
      L_TXMSG.TXFIELDS('21').VALUE := REC.BLOCKAMT;
      --22  ODAMT      C
      L_TXMSG.TXFIELDS('22').DEFNAME := 'ODAMT';
      L_TXMSG.TXFIELDS('22').TYPE := 'N';
      L_TXMSG.TXFIELDS('22').VALUE := REC.ODAMT;
      --23  ODINTACR      C
      L_TXMSG.TXFIELDS('23').DEFNAME := 'ODINTACR';
      L_TXMSG.TXFIELDS('23').TYPE := 'N';
      L_TXMSG.TXFIELDS('23').VALUE := REC.ODINTACR;
      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('18').DEFNAME := 'FRDATE';
      L_TXMSG.TXFIELDS('18').TYPE := 'C';
      L_TXMSG.TXFIELDS('18').VALUE := REC.FRDATE;
      --20  NOTINTDUECD      N
      L_TXMSG.TXFIELDS('20').DEFNAME := 'NOTINTDUECD';
      L_TXMSG.TXFIELDS('20').TYPE := 'N';
      L_TXMSG.TXFIELDS('20').VALUE := ROUND(REC.NOTINTDUECD, 0);

      --30    DESC        C
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      --08  ACCTNO      C
      L_TXMSG.TXFIELDS('08').DEFNAME := 'FULLNAME';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := L_CFFULLNAME;

      --96  ACCTNO      C
      L_TXMSG.TXFIELDS('96').DEFNAME := 'CUSTODYCD';
      L_TXMSG.TXFIELDS('96').TYPE := 'C';
      L_TXMSG.TXFIELDS('96').VALUE := L_CUSTODYCD;

      BEGIN
        IF TXPKS_#1610.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 1610: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TDEOTD_BANK');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_TDEOTD_BANK');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TDEOTD');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TDEOTD_BANK;
  --Gia han tai khoan tiet kiem
  PROCEDURE PR_TDRNA(P_BCHMDL   VARCHAR,
                     P_ERR_CODE OUT VARCHAR2,
                     P_FROMROW  NUMBER,
                     P_TOROW    NUMBER,
                     P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TDRNA');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM TDMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1630';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1630';
    PLOG.DEBUG(PKGCTX,
               '1630 p_FromRow= ' || P_FROMROW || ' p_ToRow =' || P_TOROW);
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    PLOG.DEBUG(PKGCTX,
               'pr_TDRNA ' || P_BCHMDL || ' v_strCURRDATE ' ||
               V_STRCURRDATE);

    FOR REC IN (

                SELECT MST.ACCTNO,
                        MST.AFACCTNO,
                        TY.ACTYPE,
                        TY.TERMCD,
                        TY.TDTERM,
                        MST.ORGAMT,
                        MST.OPNDATE,
                        MST.TODATE TODATE,
                        MST.FRDATE FRDATE,
                        GREATEST(MST.TODATE,
                                 TO_DATE(V_STRCURRDATE, 'dd/MM/yyyy')) RNFRDATE,
                        DECODE(TY.TERMCD,
                               'D',
                               GREATEST(MST.TODATE,
                                        TO_DATE(V_STRCURRDATE, 'dd/MM/yyyy')) +
                               TY.TDTERM,
                               'W',
                               GREATEST(MST.TODATE,
                                        TO_DATE(V_STRCURRDATE, 'dd/MM/yyyy')) +
                               TY.TDTERM * 7,
                               'M',
                               ADD_MONTHS(GREATEST(MST.TODATE,
                                                   TO_DATE(V_STRCURRDATE,
                                                           'dd/MM/yyyy')),
                                          TY.TDTERM)) RNTODATE,
                        MST.BUYINGPOWER BUYINGPOWER -- PhuongHT edit: ju nguyen tham so theo hop dong cu
                  FROM (SELECT *
                           FROM (SELECT A.*, ROWNUM ID
                                   FROM TDMAST A
                                  WHERE DELTD <> 'Y')
                          WHERE ID > P_FROMROW
                            AND ID <= P_TOROW) MST,
                        TDTYPE TY
                 WHERE MST.STATUS IN ('N', 'A')
                   AND MST.TODATE <= TO_DATE(V_STRCURRDATE, 'dd/MM/yyyy')
                   AND MST.ACTYPE = TY.ACTYPE
                   AND MST.AUTORND = 'Y'
                   AND MST.AUTOPAID = 'Y') LOOP

      --Set txnum
      PLOG.DEBUG(PKGCTX,
                 'Loop for account:' || REC.ACCTNO || ' ngay' ||
                 TO_CHAR(V_STRCURRDATE) || ' p_FromRow =' || P_FROMROW ||
                 'p_ToRow =' || P_TOROW);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --01  TYPE      N
      L_TXMSG.TXFIELDS('01').DEFNAME := 'TYPE';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := 1;

      --03  ACCTNO      C
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --05  AFACCTNO      C
      L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;

      --06  FRDATE     D
      L_TXMSG.TXFIELDS('06').DEFNAME := 'FRDATE';
      L_TXMSG.TXFIELDS('06').TYPE := 'D';
      L_TXMSG.TXFIELDS('06').VALUE := REC.RNFRDATE;

      --07  TODATE     D
      L_TXMSG.TXFIELDS('07').DEFNAME := 'TODATE';
      L_TXMSG.TXFIELDS('07').TYPE := 'D';
      L_TXMSG.TXFIELDS('07').VALUE := REC.RNTODATE;

      --08    ACTYPE        C
      L_TXMSG.TXFIELDS('08').DEFNAME := 'ACTYPE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := REC.ACTYPE;

      --08    BUYINGPOWER        C
      L_TXMSG.TXFIELDS('09').DEFNAME := 'BUYINGPOWER';
      L_TXMSG.TXFIELDS('09').TYPE := 'C';
      L_TXMSG.TXFIELDS('09').VALUE := REC.BUYINGPOWER;

      --10    AMT        C
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.ORGAMT;

      --30    DESC        C
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#1630.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 1630: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TDRNA');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_TDRNA');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TDRNA');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TDRNA;

  --Tu dong rut tiet kiem
  PROCEDURE PR_TDAW(P_BCHMDL   VARCHAR,
                    P_ERR_CODE OUT VARCHAR2,
                    P_FROMROW  NUMBER,
                    P_TOROW    NUMBER,
                    P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG           TX.MSG_RECTYPE;
    V_STRCURRDATE     VARCHAR2(20);
    V_STRPREVDATE     VARCHAR2(20);
    V_STRNEXTDATE     VARCHAR2(20);
    V_STRDESC         VARCHAR2(1000);
    V_STREN_DESC      VARCHAR2(1000);
    V_BLNVIETNAMESE   BOOLEAN;
    L_ERR_PARAM       VARCHAR2(300);
    L_MAXROW          NUMBER(20, 0);
    V_DBLINTAMT       NUMBER;
    V_DBLAMT          NUMBER;
    V_DBLCIBALANCE    NUMBER;
    V_STRTEMPAFACCTNO VARCHAR2(20);
    L_DBLBUYAMT       NUMBER;
    L_AVLLIMIT        NUMBER;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TDRNA');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM TDMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '1600';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '1600';
    PLOG.DEBUG(PKGCTX,
               '1600 p_FromRow= ' || P_FROMROW || ' p_ToRow =' || P_TOROW);
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    PLOG.DEBUG(PKGCTX,
               'pr_TDAW ' || P_BCHMDL || ' v_strCURRDATE ' || V_STRCURRDATE);

    FOR REC IN (

                SELECT MST.ACCTNO,
                        MST.AFACCTNO,
                        CF.CUSTODYCD,
                        CF.FULLNAME,
                        MST.ORGAMT,
                        MST.BALANCE,
                        MST.PRINTPAID,
                        MST.INTNMLACR,
                        MST.INTPAID,
                        MST.TAXRATE,
                        MST.BONUSRATE,
                        MST.INTRATE,
                        MST.TDTERM,
                        MST.OPNDATE,
                        MST.FRDATE,
                        MST.TODATE,
                        MST.CUSTBANK,
                        FN_TDMASTINTRATIO(MST.ACCTNO,
                                          TO_DATE(SYSVAR.VARVALUE, 'DD/MM/YYYY'),
                                          MST.BALANCE) INTAVLAMT,
                        (CASE
                          WHEN MST.BREAKCD = 'Y' AND
                               (TO_DATE(SYSVAR.VARVALUE, 'DD/MM/YYYY') -
                               TO_DATE(MST.FRDATE, 'DD/MM/YYYY')) >=
                               NVL(MST.MINBRTERM, 0) THEN
                           MST.BALANCE
                          ELSE
                           0
                        END) AVLWITHDRAW,
                        MST.MORTGAGE,
                        A0.CDCONTENT DESC_TDSRC,
                        A1.CDCONTENT DESC_AUTOPAID,
                        A2.CDCONTENT DESC_BREAKCD,
                        A3.CDCONTENT DESC_SCHDTYPE,
                        A4.CDCONTENT DESC_TERMCD,
                        A5.CDCONTENT DESC_STATUS,
                        A6.CDCONTENT BUYINGPOWER,
                        0 DIRECTAMT,
                        LEAST(-CI.BALANCE, MST.MORTGAGE) AMT,
                        MST.ODAMT,
                        MST.ODINTACR,
                        AFT.ADVPRIO
                  FROM TDMAST  MST,
                        AFMAST  AF,
                        CFMAST  CF,
                        TDTYPE  TYP,
                        ALLCODE A0,
                        ALLCODE A1,
                        ALLCODE A2,
                        ALLCODE A3,
                        ALLCODE A4,
                        ALLCODE A5,
                        SYSVAR,
                        ALLCODE A6,
                        CIMAST  CI,
                        AFTYPE  AFT
                 WHERE MST.ACTYPE = TYP.ACTYPE
                   AND MST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND SYSVAR.VARNAME = 'CURRDATE'
                   AND MST.DELTD <> 'Y'
                   AND MST.STATUS IN ('N', 'A')
                   AND A0.CDTYPE = 'TD'
                   AND A0.CDNAME = 'TDSRC'
                   AND MST.TDSRC = A0.CDVAL
                   AND A1.CDTYPE = 'SY'
                   AND A1.CDNAME = 'YESNO'
                   AND MST.AUTOPAID = A1.CDVAL
                   AND A2.CDTYPE = 'SY'
                   AND A2.CDNAME = 'YESNO'
                   AND MST.BREAKCD = A2.CDVAL
                   AND A4.CDTYPE = 'TD'
                   AND A4.CDNAME = 'TERMCD'
                   AND MST.TERMCD = A4.CDVAL
                   AND A5.CDTYPE = 'TD'
                   AND A5.CDNAME = 'STATUS'
                   AND MST.STATUS = A5.CDVAL
                   AND A3.CDTYPE = 'TD'
                   AND A3.CDNAME = 'SCHDTYPE'
                   AND MST.SCHDTYPE = A3.CDVAL
                   AND A6.CDTYPE = 'SY'
                   AND A6.CDNAME = 'YESNO'
                   AND MST.BUYINGPOWER = A6.CDVAL
                   AND MST.BUYINGPOWER = 'Y'
                   AND AF.ACTYPE = AFT.ACTYPE /*and aft.mrtype = mrt.actype and mrt.mrtype <> 'T'*/
                   AND (MST.BREAKCD = 'Y' OR
                       (MST.BREAKCD = 'N' AND
                       TO_DATE(V_STRCURRDATE, 'DD/MM/YYYY') > MST.TODATE))
                   AND MST.AFACCTNO = CI.ACCTNO
                   AND CI.BALANCE < 0
                   AND MST.DELTD <> 'Y'
                 ORDER BY MST.AFACCTNO, MST.TODATE DESC, MST.MORTGAGE

                ) LOOP

      --Set txnum
      PLOG.DEBUG(PKGCTX,
                 'Loop for account:' || REC.ACCTNO || ' ngay' ||
                 TO_CHAR(V_STRCURRDATE) || ' p_FromRow =' || P_FROMROW ||
                 'p_ToRow =' || P_TOROW);
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      L_DBLBUYAMT := 0;
      L_AVLLIMIT  := 0;
      SELECT BALANCE
        INTO V_DBLCIBALANCE
        FROM CIMAST
       WHERE ACCTNO = REC.AFACCTNO;
      --PhuongHT edit: aftype uu tien Margin: xu ly uu tien phan giai ngan margin len truoc TD
      IF REC.ADVPRIO <> 'Y' THEN
        BEGIN
          SELECT SUM(STS.AMT) + SUM(OD.FEEACR) AMT
            INTO L_DBLBUYAMT
            FROM STSCHD STS, ODMAST OD
           WHERE STS.ORGORDERID = OD.ORDERID
             AND STS.CLEARDATE = V_STRCURRDATE
             AND STS.STATUS = 'C'
             AND STS.DELTD <> 'Y'
             AND STS.AFACCTNO = REC.AFACCTNO
             AND STS.DUETYPE = 'SM'
           GROUP BY STS.AFACCTNO;
        EXCEPTION
          WHEN OTHERS THEN
            L_DBLBUYAMT := 0;
        END;

        --Neu vuot qua han muc thi thuc hien UTTB tren phan vuot qua han muc
        BEGIN
          SELECT GREATEST(AF.MRCRLIMITMAX - CI.DFODAMT - CI.ODAMT -
                          CI.DFDEBTAMT - CI.DFINTDEBTAMT - CI.RAMT,
                          0)
            INTO L_AVLLIMIT
            FROM AFMAST AF, CIMAST CI
           WHERE AF.ACCTNO = CI.ACCTNO
             AND AF.ACCTNO = REC.AFACCTNO;
        EXCEPTION
          WHEN OTHERS THEN
            L_AVLLIMIT := 0;
        END;
        -- Neu uu tien Margin truoc
        V_DBLCIBALANCE := V_DBLCIBALANCE + LEAST(L_DBLBUYAMT, L_AVLLIMIT);
      END IF;
      -- end of PhuongHT edit: aftype uu tien Margin: xu ly uu tien phan giai ngan margin len truoc TD
      IF (V_DBLCIBALANCE < 0 AND
         REC.AFACCTNO <> NVL(V_STRTEMPAFACCTNO, 'a')) THEN
        V_DBLAMT := LEAST(REC.MORTGAGE, -V_DBLCIBALANCE);
        ---v_dblAMT:=least(rec.MORTGAGE,-v_dblCIBALANCE);
        V_DBLINTAMT := FN_TDMASTINTRATIO(REC.ACCTNO,
                                         TO_DATE(V_STRCURRDATE, 'DD/MM/YYYY'),
                                         V_DBLAMT);

        --Set cac field giao dich
        --99  CUSTODYCD      C
        L_TXMSG.TXFIELDS('99').DEFNAME := 'CUSTODYCD';
        L_TXMSG.TXFIELDS('99').TYPE := 'C';
        L_TXMSG.TXFIELDS('99').VALUE := REC.CUSTODYCD;
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

        --05  AFACCTNO      C
        L_TXMSG.TXFIELDS('05').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;

        --09    BALANCE        D
        L_TXMSG.TXFIELDS('09').DEFNAME := 'BALANCE';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := REC.BALANCE;
        --12    INTAVLAMT        D
        L_TXMSG.TXFIELDS('12').DEFNAME := 'INTAVLAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := REC.INTAVLAMT;
        --13    MORTGAGE        D
        L_TXMSG.TXFIELDS('13').DEFNAME := 'MORTGAGE';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := REC.MORTGAGE;
        --18    ODAMT        D
        L_TXMSG.TXFIELDS('18').DEFNAME := 'ODAMT';
        L_TXMSG.TXFIELDS('18').TYPE := 'N';
        L_TXMSG.TXFIELDS('18').VALUE := REC.ODAMT;
        --19    ODINTACR        D
        L_TXMSG.TXFIELDS('19').DEFNAME := 'ODINTACR';
        L_TXMSG.TXFIELDS('19').TYPE := 'N';
        L_TXMSG.TXFIELDS('19').VALUE := REC.ODINTACR;

        --10    PAIDAMT        D
        L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := V_DBLAMT;
        --11    INTAMT        D
        L_TXMSG.TXFIELDS('11').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := V_DBLINTAMT;
        --20    PAIDODAMT        D
        L_TXMSG.TXFIELDS('20').DEFNAME := 'PAIDODAMT';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := 0;
        --21    PAIDODINTACR        D
        L_TXMSG.TXFIELDS('21').DEFNAME := 'PAIDODINTACR';
        L_TXMSG.TXFIELDS('21').TYPE := 'N';
        L_TXMSG.TXFIELDS('21').VALUE := 0;
        --15    DIRECTAMT        D
        L_TXMSG.TXFIELDS('15').DEFNAME := 'DIRECTAMT';
        L_TXMSG.TXFIELDS('15').TYPE := 'N';
        L_TXMSG.TXFIELDS('15').VALUE := REC.DIRECTAMT;
        --16  ORGAMT      C
        L_TXMSG.TXFIELDS('16').DEFNAME := 'ORGAMT';
        L_TXMSG.TXFIELDS('16').TYPE := 'N';
        L_TXMSG.TXFIELDS('16').VALUE := REC.ORGAMT;

        --17  FRDATE      C
        L_TXMSG.TXFIELDS('17').DEFNAME := 'FRDATE';
        L_TXMSG.TXFIELDS('17').TYPE := 'D';
        L_TXMSG.TXFIELDS('17').VALUE := REC.FRDATE;

        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
        --32  TODATE      C
        L_TXMSG.TXFIELDS('32').DEFNAME := 'TODATE';
        L_TXMSG.TXFIELDS('32').TYPE := 'D';
        L_TXMSG.TXFIELDS('32').VALUE := REC.TODATE;
        --31  INTRATE      N
        L_TXMSG.TXFIELDS('31').DEFNAME := 'INTRATE';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.INTRATE;
        --33  CUSTBANK      C
        L_TXMSG.TXFIELDS('33').DEFNAME := 'CUSTBANK';
        L_TXMSG.TXFIELDS('33').TYPE := 'C';
        L_TXMSG.TXFIELDS('33').VALUE := REC.CUSTBANK;

        BEGIN
          IF TXPKS_#1600.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 1600: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

      ELSE
        -- Neu so du da >=0
        V_STRTEMPAFACCTNO := REC.AFACCTNO;
      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TDAW');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_TDAW');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TDAW');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TDAW;

  --Xu ly truoc khi chay batch
  PROCEDURE PR_SABEGINBATCH(P_ERR_CODE OUT VARCHAR2) IS
    Currdate  DATE;
    nextdate VARCHAR2(20);
    l_count     number(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_SABEGINBATCH');
    --Ap lich tinh lai tien gui moi
    IF CSPKS_SAPROC.FN_APPLY_CRINTACR_SCHEDULE(P_ERR_CODE) <> 0 THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR; --Loi he thong
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABEGINBATCH');
      RETURN;
    END IF;

    SELECT TO_DATE(VARVALUE,'DD/MM/YYYY') INTO Currdate
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM' AND VARNAME ='CURRDATE';
    SELECT VARVALUE INTO nextdate
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM' AND VARNAME = 'NEXTDATE';

    --Log lai nhung tai khoan bi call truoc khi chay giai ngan
    --Tam thoi chuyen trang thai hoi so thanh Active de log du lieu
    UPDATE SYSVAR
       SET VARVALUE = '1'
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'HOSTATUS';
    CSPKS_LOGPROC.PR_LOG_MR0002('BF-EOD');
    CSPKS_LOGPROC.PR_LOG_MR3008('BF-EOD');
    CSPKS_LOGPROC.PR_LOG_MR3009('BF-EOD');
    --Tra lai trang thai hoi so thanh DeActive sau khi log du lieu
    delete from CHECK_TRADING_RESULT_HIST where backup_date = Currdate;

    INSERT INTO CHECK_TRADING_RESULT_HIST (BACKUP_DATE,TRADING_DATE,ACCTNO,BORS,SEC_CODE,PRICE,QTTY,LECH,TRADEPLACE)
    ( SELECT Currdate, TRADING_DATE,ACCTNO,BORS,SEC_CODE,PRICE,QTTY,LECH,TRADEPLACE FROM V_CHECK_TRADING_RESULT);

    UPDATE SYSVAR
       SET VARVALUE = '0'
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'HOSTATUS';
 /*  --DungNH dat lenh trong ngay lam bu
    select count(*) into l_count
    from sbcldr sbc
    where sbc.cldrtype IN ('001','002')
        and nvl(sbc.holiday,'N') = 'Y'
        and sbc.sbdate = Currdate;
    if l_count <> 0 then*/
 /*       update odmast set txdate = to_date(nextdate,'dd/mm/rrrr'),
            expdate = to_date(nextdate,'dd/mm/rrrr'), txnum =  '98' || substr(txnum,3,10)
        where txdate = Currdate;
        update OOD set txdate = to_date(nextdate,'dd/mm/rrrr'), txnum =  '98' || substr(txnum,3,10)
        where txdate = Currdate;*/
 --   end if;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_SABEGINBATCH');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_SABEGINBATCH');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_SABEGINBATCH;

  ---------------------------------pr_LNAdvPayment------------------------------------------------
  PROCEDURE PR_LNADVPAYMENTAFTSENDMONEY(P_BCHMDL   VARCHAR,
                                        P_DUEPAID  VARCHAR2,
                                        P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG              TX.MSG_RECTYPE;
    L_CURRDATE           VARCHAR2(20);
    L_DESC               VARCHAR2(1000);
    L_EN_DESC            VARCHAR2(1000);
    L_ORGDESC            VARCHAR2(1000);
    L_EN_ORGDESC         VARCHAR2(1000);
    L_ERR_PARAM          VARCHAR2(300);
    L_T0PRINDUE          NUMBER(20, 0);
    L_T0PRINNML          NUMBER(20, 0);
    L_T0PRINOVD          NUMBER(20, 0);
    L_AVLAMT             NUMBER(20, 0);
    L_FEEOVD             NUMBER(20, 0);
    L_T0INTNMLOVD        NUMBER(20, 0);
    L_INTNMLOVD          NUMBER(20, 0);
    L_T0INTOVDACR        NUMBER(20, 0);
    L_INTOVDACR          NUMBER(20, 0);
    L_FEEDUE             NUMBER(20, 0);
    L_T0INTDUE           NUMBER(20, 0);
    L_INTDUE             NUMBER(20, 0);
    L_FEENML             NUMBER(20, 0);
    L_T0INTNMLACR        NUMBER(20, 0);
    L_INTNMLACR          NUMBER(20, 0);
    L_PRINOVD            NUMBER(20, 0);
    L_PRINDUE            NUMBER(20, 0);
    L_PRINNML            NUMBER(20, 0);
    L_FEEINTNMLOVD       NUMBER(20, 0);
    L_FEEINTNMLACR       NUMBER(20, 0);
    L_FEEINTOVDACR       NUMBER(20, 0);
    L_FEEINTDUE          NUMBER(20, 0);
    L_ADVPAYFEE          NUMBER(20, 0);
    L_SPLITRATE          NUMBER(20, 8);
    L_MAXDEBTCF          NUMBER(20, 0);
    L_MINLOANAUTOPAYMENT NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_LNAdvPaymentAftSendMoney');
    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = '5567';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '5567';

    SELECT TO_NUMBER(VARVALUE)
      INTO L_MAXDEBTCF
      FROM SYSVAR
     WHERE VARNAME = 'MAXDEBTCF';
    SELECT DECODE (P_DUEPAID,'NML',TO_NUMBER(VARVALUE),'OVD',0)
      INTO L_MINLOANAUTOPAYMENT
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'LOANAUTOPAYAMT';
    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT CI.ACCTNO TRFACCTNO,
                       ROUND(BALANCE + CASE
                               WHEN P_DUEPAID = 'OVD' THEN
                                NVL(AVLADVANCE, 0)
                               ELSE
                                0
                             END,
                             0) AVLBAL
                  FROM CIMAST CI,
                       AFMAST AF,
                       AFTYPE AFT,
                       MRTYPE MRT,
                       ( --select sum(advamt) avladvance,afacctno
                        SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV /*,
                                v_getbuyorderinfo b,
                                v_getsecmargininfo sec*/
                 WHERE CI.ACCTNO = AF.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND CI.ACCTNO = ADV.AFACCTNO(+)
                      /*and ci.acctno = b.afacctno(+)
                      and ci.acctno = sec.afacctno(+)*/
                      --and round(BALANCE + case when p_duepaid='OVD' then nvl(avladvance,0) else 0 end,0) > 0
                      --So tien tra no > so tien tra no toi thieu
                   AND ROUND(BALANCE + (CASE
                               WHEN P_DUEPAID = 'OVD' THEN
                                NVL(AVLADVANCE, 0)
                               ELSE
                                0
                             END),
                             0) > L_MINLOANAUTOPAYMENT

                   AND EXISTS
                 (SELECT 1
                          FROM LNMAST
                         WHERE FTYPE = 'AF'
                           AND TRFACCTNO = CI.ACCTNO
                           AND PRINNML + PRINOVD + INTNMLACR + INTDUE +
                               INTOVDACR + INTNMLOVD + FEEINTNMLACR +
                               FEEINTDUE + FEEINTOVDACR + FEEINTNMLOVD +
                               OPRINNML + OPRINOVD + OINTNMLACR + OINTDUE +
                               OINTOVDACR + OINTNMLOVD > 0)
                 ORDER BY CI.ACCTNO) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for' || REC.TRFACCTNO);
      IF CSPKS_LNPROC.FN_GEN_PREPAID_PAYMENT(REC.TRFACCTNO,
                                             REC.AVLBAL,
                                             'L',
                                             P_DUEPAID,
                                             P_ERR_CODE) <>
         SYSTEMNUMS.C_SUCCESS THEN
        PLOG.SETENDSECTION(PKGCTX, 'pr_LNAdvPaymentAftSendMoney');
        RETURN;
      END IF;
      L_DESC := 'CL.' || L_ORGDESC;

      FOR REC2 IN (SELECT LN.TRFACCTNO,
                          LN.ACCTNO,
                          LS.AUTOID LNSCHDID,
                          LP.AUTOID,
                          MAX(CASE
                                WHEN LN.FTYPE = 'AF' THEN
                                 1
                                ELSE
                                 0
                              END) FINANCETYPE,
                          MAX(LN.ADVPAYFEE) ADVPAYFEE,
                          SUM(LP.AMT - LP.PAIDAMT) AVLAMT,

                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) T0INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) T0INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) T0PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) T0INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) T0INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'GP' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) T0PRINNML,

                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEOVD
                                ELSE
                                 0
                              END) FEEOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVD
                                ELSE
                                 0
                              END) INTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLOVD
                                ELSE
                                 0
                              END) FEEINTNMLOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTOVDPRIN
                                ELSE
                                 0
                              END) INTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTOVDACR
                                ELSE
                                 0
                              END) FEEINTOVDACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.OVD
                                ELSE
                                 0
                              END) PRINOVD,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEDUE
                                ELSE
                                 0
                              END) FEEDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTDUE
                                ELSE
                                 0
                              END) INTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTDUE
                                ELSE
                                 0
                              END) FEEINTDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE = L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINDUE,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEE
                                ELSE
                                 0
                              END) FEENML,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.INTNMLACR
                                ELSE
                                 0
                              END) INTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.FEEINTNMLACR
                                ELSE
                                 0
                              END) FEEINTNMLACR,
                          SUM(CASE
                                WHEN REFTYPE = 'P' AND OVERDUEDATE <> L_CURRDATE THEN
                                 LS.NML
                                ELSE
                                 0
                              END) PRINNML,
                           SUM(CASE
                                WHEN REFTYPE = 'P' THEN
                                 LS.ACCRUALSAMT
                                ELSE
                                 0
                              END) ACCRUALSAMT

                     FROM LNMAST LN, LNPAIDALLOC LP, LNSCHD LS
                    WHERE LN.ACCTNO = LP.LNACCTNO
                      AND LP.LNSCHDID = LS.AUTOID
                      AND LN.TRFACCTNO = REC.TRFACCTNO
                      AND INSTR(LS.REFTYPE, 'P') > 0
                      AND LP.AMT > LP.PAIDAMT
                      AND LP.STATUS = 'P'
                    GROUP BY LN.TRFACCTNO, LN.ACCTNO, LS.AUTOID, LP.AUTOID
                    ORDER BY LP.AUTOID) LOOP
        -- rec2
        L_AVLAMT := REC2.AVLAMT;
        --So tien phai tra cho tung khoan
        -- Bao lanh
        --03.T0PRINOVD
        L_T0PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.T0PRINOVD), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINOVD;
        END IF;
        --05.T0PRINDUE
        L_T0PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.T0PRINDUE), 0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINDUE;
        END IF;

        --01.T0INTNMLOVD
        L_T0INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLOVD := GREATEST( ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLOVD), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLOVD;
        END IF;
        --02.T0INTOVDACR
        L_T0INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTOVDACR := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0INTOVDACR), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTOVDACR;
        END IF;
        /* --03.T0PRINOVD
        l_T0PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
        end if;*/
        --04.T0INTDUE
        L_T0INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0INTDUE), 0),0);
          L_AVLAMT   := L_AVLAMT - L_T0INTDUE;
        END IF;
        /* --05.T0PRINDUE
        l_T0PRINDUE := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
        End If;*/
        --06.T0INTNMLACR
        L_T0INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_T0INTNMLACR := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0INTNMLACR), 0),0);
          L_AVLAMT      := L_AVLAMT - L_T0INTNMLACR;
        END IF;

        --07.T0PRINNML
        L_T0PRINNML := 0;
        IF L_AVLAMT > 0 THEN
          L_T0PRINNML := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.T0PRINNML), 0),0);
          L_AVLAMT    := L_AVLAMT - L_T0PRINNML;
        END IF;
        /* --07.T0PRINNML
        l_T0PRINNML := 0;
        If l_AvlAmt > 0 Then
            l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
            l_AvlAmt := l_AvlAmt - l_T0PRINNML;
        End If;*/

        -- CL
        -- Goc
        --18.PRINOVD
        L_PRINOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINOVD := ROUND(LEAST(L_AVLAMT, REC2.PRINOVD), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINOVD;
        END IF;
        --19.PRINDUE
        L_PRINDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_PRINDUE := ROUND(LEAST(L_AVLAMT, REC2.PRINDUE), 0);
          L_AVLAMT  := L_AVLAMT - L_PRINDUE;
        END IF;

        -- Phi
        --08.FEEINTNMLOVD
        L_FEEINTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLOVD), 0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLOVD;
        END IF;

        --11.INTNMLOVD
        L_INTNMLOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLOVD :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.INTNMLOVD), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLOVD;
        END IF;
        --12.INTOVDACR
        L_INTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTOVDACR :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.INTOVDACR), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTOVDACR;
        END IF;

        --22.FEEINTOVDACR
        L_FEEINTOVDACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTOVDACR :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEEINTOVDACR), 0),0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTOVDACR;
        END IF;

        --15.FEEOVD
        L_FEEOVD := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEOVD := ROUND(LEAST(L_AVLAMT, REC2.FEEOVD), 0);
          L_AVLAMT := L_AVLAMT - L_FEEOVD;
        END IF;

        --13.INTDUE
        L_INTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_INTDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTDUE), 0),0);
          L_AVLAMT := L_AVLAMT - L_INTDUE;
        END IF;

        --09.FEEINTDUE
        L_FEEINTDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.FEEINTDUE), 0),0);
          L_AVLAMT    := L_AVLAMT - L_FEEINTDUE;
        END IF;

        --16.FEEDUE
        L_FEEDUE := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEDUE := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.FEEDUE), 0),0);
          L_AVLAMT := L_AVLAMT - L_FEEDUE;
        END IF;

        --10.FEEINTNMLACR
        L_FEEINTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_FEEINTNMLACR := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.FEEINTNMLACR), 0),0);
          L_AVLAMT       := L_AVLAMT - L_FEEINTNMLACR;
        END IF;

        --14.INTNMLACR
        L_INTNMLACR := 0;
        IF L_AVLAMT > 0 THEN
          L_INTNMLACR := GREATEST(ROUND(LEAST(L_AVLAMT, REC2.INTNMLACR), 0),0);
          L_AVLAMT    := L_AVLAMT - L_INTNMLACR;
        END IF;
        -- Lai

        --17.FEENML
        L_FEENML := 0;
        IF L_AVLAMT > 0 THEN
          L_FEENML :=GREATEST( ROUND(LEAST(L_AVLAMT, REC2.FEENML), 0),0);
          L_AVLAMT := L_AVLAMT - L_FEENML;
        END IF;

        /*  -- Goc
        --18.PRINOVD
        l_PRINOVD := 0;
        If l_AvlAmt > 0 Then
            l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
            l_AvlAmt := l_AvlAmt - l_PRINOVD;
        End If;
        --19.PRINDUE
        l_PRINDUE := 0;
        If l_AvlAmt > 0 Then
           l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
           l_AvlAmt := l_AvlAmt - l_PRINDUE;
        End If;
        --20.PRINNML
        l_PRINNML := 0;
        if rec2.PRINNML > 0 then
            If l_AvlAmt > 0 Then
                 l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                 l_AvlAmt := l_AvlAmt - l_PRINNML;
            End If;
        end if;*/

        -- Lai Phi

        --20.PRINNML
        L_PRINNML := 0;
        IF REC2.PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_PRINNML := GREATEST(ROUND(LEAST(REC2.PRINNML,
                                     L_AVLAMT * 1 /
                                     (1 + REC2.ADVPAYFEE / 100)),0),
                               0);
            L_AVLAMT  := L_AVLAMT - L_PRINNML;
          END IF;
        END IF;
        --21.ADVPAYFEE
        L_ADVPAYFEE := 0;
        IF L_PRINNML > 0 THEN
          IF L_AVLAMT > 0 THEN
            L_ADVPAYFEE := ROUND(REC2.FINANCETYPE *
                                 TRUNC(LEAST(L_AVLAMT,
                                             L_PRINNML * REC2.ADVPAYFEE / 100),
                                       0),
                                 0);
            L_AVLAMT    := L_AVLAMT - L_ADVPAYFEE;
          END IF;
        END IF;

        --set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.TRFACCTNO, 1, 4);

        --Set cac field giao dich
        --01   C   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'C';
        L_TXMSG.TXFIELDS('01').VALUE := REC2.LNSCHDID;

        --03   C   ACCTNO
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC2.ACCTNO;

        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.TRFACCTNO;

        --09   N   T0ODAMT
        L_TXMSG.TXFIELDS('09').DEFNAME := 'T0ODAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := 0;

        --45   N   PRINAMT
        L_TXMSG.TXFIELDS('45').DEFNAME := 'PRINAMT';
        L_TXMSG.TXFIELDS('45').TYPE := 'N';
        L_TXMSG.TXFIELDS('45').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML;
        --46   N   INTAMT
        L_TXMSG.TXFIELDS('46').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('46').TYPE := 'N';
        L_TXMSG.TXFIELDS('46').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;

        --47   N   ADVFEE
        L_TXMSG.TXFIELDS('47').DEFNAME := 'ADVFEE';
        L_TXMSG.TXFIELDS('47').TYPE := 'N';
        L_TXMSG.TXFIELDS('47').VALUE := REC2.FINANCETYPE *
                                        ROUND(REC2.ADVPAYFEE, 0);

        --60   N   PT0PRINOVD
        L_TXMSG.TXFIELDS('60').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := L_T0PRINOVD;
        --61   N   PT0PRINDUE
        L_TXMSG.TXFIELDS('61').DEFNAME := 'PT0PRINDUE';
        L_TXMSG.TXFIELDS('61').TYPE := 'N';
        L_TXMSG.TXFIELDS('61').VALUE := L_T0PRINDUE;
        --62   N   PT0PRINNML
        L_TXMSG.TXFIELDS('62').DEFNAME := 'PT0PRINNML';
        L_TXMSG.TXFIELDS('62').TYPE := 'N';
        L_TXMSG.TXFIELDS('62').VALUE := L_T0PRINNML;
        --63   N   PPRINOVD
        L_TXMSG.TXFIELDS('63').DEFNAME := 'PPRINOVD';
        L_TXMSG.TXFIELDS('63').TYPE := 'N';
        L_TXMSG.TXFIELDS('63').VALUE := L_PRINOVD;
        --64   N   PPRINDUE
        L_TXMSG.TXFIELDS('64').DEFNAME := 'PPRINDUE';
        L_TXMSG.TXFIELDS('64').TYPE := 'N';
        L_TXMSG.TXFIELDS('64').VALUE := L_PRINDUE;
        --65   N   PPRINNML
        L_TXMSG.TXFIELDS('65').DEFNAME := 'PT0PRINOVD';
        L_TXMSG.TXFIELDS('65').TYPE := 'N';
        L_TXMSG.TXFIELDS('65').VALUE := L_PRINNML;
        --70   N   PFEEOVD
        L_TXMSG.TXFIELDS('70').DEFNAME := 'PFEEOVD';
        L_TXMSG.TXFIELDS('70').TYPE := 'N';
        L_TXMSG.TXFIELDS('70').VALUE := L_FEEOVD;
        --71   N   PT0INTNMLOVD
        L_TXMSG.TXFIELDS('71').DEFNAME := 'PT0INTNMLOVD';
        L_TXMSG.TXFIELDS('71').TYPE := 'N';
        L_TXMSG.TXFIELDS('71').VALUE := L_T0INTNMLOVD;
        --72   N   PINTNMLOVD
        L_TXMSG.TXFIELDS('72').DEFNAME := 'PINTNMLOVD';
        L_TXMSG.TXFIELDS('72').TYPE := 'N';
        L_TXMSG.TXFIELDS('72').VALUE := L_INTNMLOVD;
        --52   N   PFEEINTNMLOVD
        L_TXMSG.TXFIELDS('52').DEFNAME := 'PFEEINTNMLOVD';
        L_TXMSG.TXFIELDS('52').TYPE := 'N';
        L_TXMSG.TXFIELDS('52').VALUE := L_FEEINTNMLOVD;
        --73   N   PT0INTOVDACR
        L_TXMSG.TXFIELDS('73').DEFNAME := 'PT0INTOVDACR';
        L_TXMSG.TXFIELDS('73').TYPE := 'N';
        L_TXMSG.TXFIELDS('73').VALUE := L_T0INTOVDACR;
        --74   N   PINTOVDACR
        L_TXMSG.TXFIELDS('74').DEFNAME := 'PINTOVDACR';
        L_TXMSG.TXFIELDS('74').TYPE := 'N';
        L_TXMSG.TXFIELDS('74').VALUE := L_INTOVDACR;
        --54   N   PFEEINTOVDACR
        L_TXMSG.TXFIELDS('54').DEFNAME := 'PFEEINTOVDACR';
        L_TXMSG.TXFIELDS('54').TYPE := 'N';
        L_TXMSG.TXFIELDS('54').VALUE := L_FEEINTOVDACR;
        --75   N   PFEEDUE
        L_TXMSG.TXFIELDS('75').DEFNAME := 'PFEEDUE';
        L_TXMSG.TXFIELDS('75').TYPE := 'N';
        L_TXMSG.TXFIELDS('75').VALUE := L_FEEDUE;
        --76   N   PT0INTDUE
        L_TXMSG.TXFIELDS('76').DEFNAME := 'PT0INTDUE';
        L_TXMSG.TXFIELDS('76').TYPE := 'N';
        L_TXMSG.TXFIELDS('76').VALUE := L_T0INTDUE;
        --77   N   PINTDUE
        L_TXMSG.TXFIELDS('77').DEFNAME := 'PINTDUE';
        L_TXMSG.TXFIELDS('77').TYPE := 'N';
        L_TXMSG.TXFIELDS('77').VALUE := L_INTDUE;
        --57   N   PFEEINTDUE
        L_TXMSG.TXFIELDS('57').DEFNAME := 'PFEEINTDUE';
        L_TXMSG.TXFIELDS('57').TYPE := 'N';
        L_TXMSG.TXFIELDS('57').VALUE := L_FEEINTDUE;
        --78   N   PFEE
        L_TXMSG.TXFIELDS('78').DEFNAME := 'PFEE';
        L_TXMSG.TXFIELDS('78').TYPE := 'N';
        L_TXMSG.TXFIELDS('78').VALUE := L_FEENML;
        --79   N   PT0INTNMLACR
        L_TXMSG.TXFIELDS('79').DEFNAME := 'PT0INTNMLACR';
        L_TXMSG.TXFIELDS('79').TYPE := 'N';
        L_TXMSG.TXFIELDS('79').VALUE := L_T0INTNMLACR;
        --80   N   PINTNMLACR
        L_TXMSG.TXFIELDS('80').DEFNAME := 'PINTNMLACR';
        L_TXMSG.TXFIELDS('80').TYPE := 'N';
        L_TXMSG.TXFIELDS('80').VALUE := L_INTNMLACR;
        --50   N   PFEEINTNMLACR
        L_TXMSG.TXFIELDS('50').DEFNAME := 'PFEEINTNMLACR';
        L_TXMSG.TXFIELDS('50').TYPE := 'N';
        L_TXMSG.TXFIELDS('50').VALUE := L_FEEINTNMLACR;
        --81   N   ADVPAYAMT
        L_TXMSG.TXFIELDS('81').DEFNAME := 'ADVPAYAMT';
        L_TXMSG.TXFIELDS('81').TYPE := 'N';
        L_TXMSG.TXFIELDS('81').VALUE := L_PRINNML;
        --82   N   FEEAMT
        L_TXMSG.TXFIELDS('82').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('82').TYPE := 'N';
        L_TXMSG.TXFIELDS('82').VALUE := ROUND(L_ADVPAYFEE, 0); --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
        --83   N   PAYAMT
        L_TXMSG.TXFIELDS('83').DEFNAME := 'PAYAMT';
        L_TXMSG.TXFIELDS('83').TYPE := 'N';
        L_TXMSG.TXFIELDS('83').VALUE := L_T0PRINOVD + L_T0PRINNML +
                                        L_T0PRINDUE + L_PRINOVD + L_PRINDUE +
                                        L_PRINNML + L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR;
        PLOG.DEBUG(PKGCTX,
                   'Balance check:' || L_TXMSG.TXFIELDS('83').VALUE);
        --20    N   FINANCETYPE
        L_TXMSG.TXFIELDS('20').DEFNAME := 'FINANCETYPE';
        L_TXMSG.TXFIELDS('20').TYPE := 'N';
        L_TXMSG.TXFIELDS('20').VALUE := REC2.FINANCETYPE;

               --85    N   ACCRUALSAMT
        L_TXMSG.TXFIELDS('85').DEFNAME := 'ACCRUALSAMT';
        L_TXMSG.TXFIELDS('85').TYPE := 'N';
        L_TXMSG.TXFIELDS('85').VALUE := LEAST( REC2.ACCRUALSAMT,L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR)  ;

              --86    N   NOTACCRUALSAMT
        L_TXMSG.TXFIELDS('86').DEFNAME := 'NOTACCRUALSAMT';
        L_TXMSG.TXFIELDS('86').TYPE := 'N';
        L_TXMSG.TXFIELDS('86').VALUE := L_ADVPAYFEE + L_FEEOVD +
                                        L_T0INTNMLOVD + L_INTNMLOVD +
                                        L_FEEINTNMLOVD + L_FEEDUE +
                                        L_T0INTDUE + L_INTDUE + L_FEEINTDUE +
                                        L_T0INTOVDACR + L_INTOVDACR +
                                        L_FEEINTOVDACR + L_FEENML +
                                        L_T0INTNMLACR + L_INTNMLACR +
                                        L_FEEINTNMLACR - REC2.ACCRUALSAMT;

        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := L_DESC;

        BEGIN
          IF TXPKS_#5567.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 5567: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;

        UPDATE LNPAIDALLOC
           SET STATUS = 'C'
         WHERE STATUS = 'P'
           AND AUTOID = REC2.AUTOID;
      END LOOP; -- rec2

    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_LNAdvPaymentAftSendMoney');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_LNAdvPaymentAftSendMoney');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_LNADVPAYMENTAFTSENDMONEY;

  -------------------------------------pr_reExecuteRouter--------------------------------------------
  PROCEDURE PR_REEXECUTEROUTER(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_reExecuteRouter');
    P_LASTRUN := 'Y';
    IF P_BCHMDL = 'CALREVENUE' THEN
      --txpks_batch.pr_reCALREVENUE(p_bchmdl ,p_err_code);
      CSPKS_REPROC.PR_RECALREVENUE(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'CALFEECOMM' THEN
      --txpks_batch.pr_reCALFEECOMM(p_bchmdl ,p_err_code);
      CSPKS_REPROC.PR_RECALFEECOMM(P_BCHMDL, P_ERR_CODE);
    ELSIF P_BCHMDL = 'CHANGECFSTS' THEN
      --txpks_batch.pr_reCHANGECFSTS(p_bchmdl ,p_err_code);
      CSPKS_REPROC.RE_CHANGE_CFSTATUS_AF;

    END IF;
    PLOG.SETENDSECTION(PKGCTX, 'pr_reExecuteRouter');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_reExecuteRouter');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_REEXECUTEROUTER;

  PROCEDURE PR_RECALREVENUE(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    V_CURRDATE DATE;
    V_ERR      VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_reCALREVENUE');
    -- Tinh Doanh so hang ngay cho moi gioi
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_CURRDATE
      FROM SYSVAR
     WHERE VARNAME = 'CURRDATE';

    RE_CHANGE_CFSTATUS_BF;

    --Backup reinttran sang reinttrana
    INSERT INTO REINTTRANA
      SELECT *
        FROM REINTTRAN
       WHERE TODATE <= TO_DATE(V_CURRDATE, 'DD/MM/RRRR');
    DELETE FROM REINTTRAN
     WHERE TODATE <= TO_DATE(V_CURRDATE, 'DD/MM/RRRR');

    --Cap nhat lai REMAST
    UPDATE REMAST
       SET DAMTACR = 0, IAMTACR = 0, DFEEACR = 0, IFEEACR = 0
     WHERE STATUS = 'A';
    FOR VC IN (SELECT RE.REFRECFLNKID,
                      RE.REACCTNO,
                      SUM(OD.EXECAMT) MATCHAMT,
                      SUM(OD.FEEACR) FEEACR,
                      MAX(REM.DAMTLASTDT) DAMTLASTDT
                 FROM REAFLNK RE,
                      ODMAST  OD,
                      RECFDEF RED,
                      RETYPE  RET,
                      REMAST  REM,
                      AFMAST  AF
                WHERE RE.STATUS = 'A'
                  AND RE.DELTD <> 'Y'
                  AND RE.FRDATE <= V_CURRDATE
                  AND V_CURRDATE <= RE.TODATE
                  AND OD.DELTD <> 'Y'
                  AND OD.TXDATE = (SELECT TO_DATE(VARVALUE, 'dd/mm/yyyy')
                                     FROM SYSVAR
                                    WHERE VARNAME = 'CURRDATE')
                  AND RE.AFACCTNO = AF.CUSTID
                  AND AF.ACCTNO = OD.AFACCTNO
                  AND OD.EXECAMT > 0
                  AND RE.REFRECFLNKID = RED.REFRECFLNKID
                  AND SUBSTR(RE.REACCTNO, 11, 4) = RED.REACTYPE
                  AND RED.EFFDATE <= V_CURRDATE
                  AND V_CURRDATE < RED.EXPDATE
                  AND RED.REACTYPE = RET.ACTYPE
                  AND RET.RETYPE = 'D'
                  AND RE.REACCTNO = REM.ACCTNO
                GROUP BY RE.REFRECFLNKID, RE.REACCTNO) LOOP
      INSERT INTO REINTTRAN
        (AUTOID,
         ACCTNO,
         INTTYPE,
         FRDATE,
         TODATE,
         ICRULE,
         IRRATE,
         INTBAL,
         INTAMT)
      VALUES
        (SEQ_REINTTRAN.NEXTVAL,
         VC.REACCTNO,
         'DBR',
         VC.DAMTLASTDT,
         V_CURRDATE,
         'S',
         1,
         VC.MATCHAMT,
         VC.FEEACR);
      UPDATE REMAST
         SET DAMTACR      = VC.MATCHAMT,
             DFEEACR      = VC.FEEACR,
             DIRECTACR    = NVL(DIRECTACR, 0) + VC.MATCHAMT,
             DIRECTFEEACR = NVL(DIRECTFEEACR, 0) + VC.FEEACR,
             DAMTLASTDT   = V_CURRDATE
       WHERE ACCTNO = VC.REACCTNO;

    END LOOP;

    -- Tinh doanh so, doanh thu gian tiep
    FOR VC IN (SELECT RG.CUSTID || RG.ACTYPE REACCTNO,
                      RGL.DAMTACR,
                      RGL.DFEEACR,
                      V_CURRDATE IAMTLASTDT
                 FROM REGRP RG,
                      (SELECT RGL.REFRECFLNKID,
                              SUM(RM.DAMTACR) DAMTACR,
                              SUM(RM.DFEEACR) DFEEACR
                         FROM REGRPLNK RGL, REMAST RM, RETYPE RET
                        WHERE RGL.REACCTNO = RM.ACCTNO
                          AND RGL.FRDATE <= V_CURRDATE
                          AND V_CURRDATE <= RGL.TODATE
                          AND RGL.DELTD <> 'Y'
                          AND RGL.STATUS = 'A'
                          AND RM.STATUS = 'A'
                          AND RM.ACTYPE = RET.ACTYPE
                          AND RET.RETYPE = 'D'
                        GROUP BY RGL.REFRECFLNKID) RGL
                WHERE SP_FORMAT_REGRP_MAPCODE(RGL.REFRECFLNKID) LIKE
                      SP_FORMAT_REGRP_MAPCODE(RG.AUTOID) || '%') LOOP
      INSERT INTO REINTTRAN
        (AUTOID,
         ACCTNO,
         INTTYPE,
         FRDATE,
         TODATE,
         ICRULE,
         IRRATE,
         INTBAL,
         INTAMT)
      VALUES
        (SEQ_REINTTRAN.NEXTVAL,
         VC.REACCTNO,
         'IBR',
         VC.IAMTLASTDT,
         V_CURRDATE,
         'S',
         1,
         VC.DAMTACR,
         VC.DFEEACR);
      UPDATE REMAST
         SET IAMTACR        = NVL(IAMTACR, 0) + VC.DAMTACR,
             IFEEACR        = NVL(IFEEACR, 0) + VC.DFEEACR,
             INDIRECTACR    = NVL(INDIRECTACR, 0) + VC.DAMTACR,
             INDIRECTFEEACR = NVL(INDIRECTFEEACR, 0) + VC.DFEEACR,
             IAMTLASTDT     = V_CURRDATE
       WHERE ACCTNO = VC.REACCTNO;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_reCALREVENUE');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_reCALREVENUE');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RECALREVENUE;

  PROCEDURE PR_RECALFEECOMM(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    V_CURRDATE       DATE;
    V_NEXTDATE       DATE;
    V_LASTDAY        NUMBER(20); -- Ngay lam viec cuoi cung cua thang
    V_BMDAYS         NUMBER(20); -- So ngay hoat dong cua moi gioi
    V_COMMDAYS       NUMBER(20); -- So ngay cua ky tinh hoa hong
    V_LASTCUSTID     VARCHAR2(20);
    V_DISACR         NUMBER(20, 4); -- Dinh muc cua moi gio, bi tru dan sau khi phan bo cho tai khoan moi gioi
    V_DISDIRECTACR   NUMBER(20, 4); -- Phan doanh so dc tinh hoa hong cua tk moi gioi (= Doanh so - Dinh muc)
    V_REVENUE        NUMBER(20, 4); -- Doanh thu cua tai khoan mg
    V_COMMISION      NUMBER(20, 4); -- Hoa Hong cua tk moi gio
    V_MINDREVAMTREAL NUMBER(20, 4); -- Dinh muc truc tiep thuc te = Dinh muc truc tiep * So ngay MG hoat dong / So ngay cua thang
    V_MINIREVAMTREAL NUMBER(20, 4); -- Dinh muc gian tiep thuc te = Dinh muc gian tiep * So ngay MG hoat dong / So ngay cua thang
    PKGCTX           PLOG.LOG_CTX;
    L_TXMSG          TX.MSG_RECTYPE;
    V_STRCURRDATE    VARCHAR2(20);
    V_STRDESC        VARCHAR2(1000);
    V_STREN_DESC     VARCHAR2(1000);
    V_STRORGDESC     VARCHAR2(1000);
    V_STREN_ORGDESC  VARCHAR2(1000);
    L_ERR_PARAM      VARCHAR2(300);
    V_PERIODDATE     DATE;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_reCALFEECOMM');
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_NEXTDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'NEXTDATE';
    --Xac dinh ngay cuoi cung cua thang
    SELECT TO_NUMBER(TO_CHAR(MAX(SBDATE), 'DD'))
      INTO V_LASTDAY
      FROM SBCLDR
     WHERE TO_CHAR(SBDATE, 'MM/YYYY') = TO_CHAR(V_CURRDATE, 'MM/YYYY')
       AND CLDRTYPE = '000';

    DELETE RECOMMISION WHERE COMMDATE = V_CURRDATE;
    V_LASTCUSTID := 'ZZZZZ';
    V_DISACR     := 0;
    -- Tinh Hoa Hong Truc Tiep
    FOR VC IN (SELECT RCL.AUTOID,
                      RCL.CUSTID,
                      RCL.EFFDATE,
                      RCL.MINDREVAMT,
                      RCL.MINIREVAMT, -- dinh muc doanh so gian tiep
                      RCL.MININCOME, -- luong toi thieu
                      RCL.MINRATESAL, -- ti le huong luong toi thieu khi ko hoan thanh dinh muc
                      RCL.SALTYPE, -- Kieu tinh luong toi thieu
                      RCD.REACTYPE,
                      -- Chi RM,BM chiu dinh muc
                      CASE
                        WHEN RTY.REROLE IN ('RM', 'BM') THEN
                         RCD.ISDREV
                        ELSE
                         'N'
                      END ISDREV, -- Co chiu luat dinh muc hay khong
                      RCD.ODRNUM, -- thu tu phan bo dinh muc
                      RM.ACCTNO, -- tk moi gioi
                      RM.DIRECTACR, -- Doanh so truc tiep
                      RM.DIRECTFEEACR, -- Doanh thu truc tiep
                      RM.INDIRECTACR, -- Doanh so gian tiep
                      RM.INDIRECTFEEACR, -- Doanh thu gian tiep
                      RM.ODFEETYPE, -- Cach tinh dua tren phi thuc thu hay phi co dinh M/F
                      RM.ODFEERATE, -- ti le phi co dinh
                      ICD.PERIOD,
                      ICD.PERIODDAY,
                      ICD.PERIODDATE
                 FROM RECFLNK RCL,
                      RECFDEF RCD,
                      RETYPE RTY,
                      REMAST RM,
                      (SELECT ACTYPE,
                              PERIOD,
                              PERIODDAY,
                              TO_DATE((CASE
                                        WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                         V_LASTDAY
                                        ELSE
                                         PERIODDAY
                                      END) || '/' ||
                                      TO_CHAR(V_CURRDATE, 'MM/RRRR'),
                                      'DD/MM/RRRR') PERIODDATE
                         FROM ICCFTYPEDEF IC
                        WHERE IC.EVENTCODE = 'CALFEECOMM'
                          AND ((IC.PERIOD = 'M' AND TO_CHAR(V_CURRDATE, 'MM') <>
                              TO_CHAR(V_NEXTDATE, 'MM')) --Monthly, Ngay cuoi thang
                              OR (IC.PERIOD = 'S' AND
                              TO_DATE((CASE
                                             WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                              V_LASTDAY
                                             ELSE
                                              PERIODDAY
                                           END) || '/' ||
                                           TO_CHAR(V_CURRDATE, 'MM/RRRR'),
                                           'DD/MM/RRRR') >= V_CURRDATE AND
                              TO_DATE((CASE
                                             WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                              V_LASTDAY
                                             ELSE
                                              PERIODDAY
                                           END) || '/' ||
                                           TO_CHAR(V_CURRDATE, 'MM/RRRR'),
                                           'DD/MM/RRRR') < V_NEXTDATE) --Ngay hien tai la ngay lam viec gan ngay thu lai co dinh nhat
                              )) ICD
                WHERE RCD.REFRECFLNKID = RCL.AUTOID
                  AND RCD.REACTYPE = RTY.ACTYPE
                  AND RTY.RETYPE = 'D' --and rty.rerole in('RM','BM','RD')
                  AND RCL.CUSTID = RM.CUSTID
                  AND RCD.REACTYPE = RM.ACTYPE
                  AND RTY.ACTYPE = ICD.ACTYPE
                ORDER BY RCL.CUSTID, RCD.ODRNUM) LOOP
      IF V_LASTCUSTID <> VC.CUSTID THEN
        V_LASTCUSTID := VC.CUSTID;
        -- Dinh muc thuc te = Dinh muc khai bao * so ngay hoat dong cua moi gioi / so ngay cua ky tinh hoa hong
        IF VC.SALTYPE = '1' THEN
          -- tron thang
          V_COMMDAYS := LAST_DAY(V_CURRDATE) - TRUNC(V_CURRDATE, 'MM') + 1;
          V_BMDAYS   := V_COMMDAYS;
        ELSE
          -- tinh theo ngay thuc te
          IF VC.PERIOD = 'M' THEN
            -- tinh hang thang
            V_COMMDAYS := LAST_DAY(V_CURRDATE) - TRUNC(V_CURRDATE, 'MM') + 1;
            V_BMDAYS   := LAST_DAY(V_CURRDATE) -
                          GREATEST(VC.EFFDATE, TRUNC(V_CURRDATE, 'MM')) + 1;
          ELSE
            -- tinh vao ngay co dinh
            V_COMMDAYS := VC.PERIODDATE - ADD_MONTHS(VC.PERIODDATE, -1);
            V_BMDAYS   := VC.PERIODDATE -
                          GREATEST(VC.EFFDATE,
                                   ADD_MONTHS(VC.PERIODDATE, -1) + 1) + 1;
          END IF;
        END IF;
        V_DISACR         := VC.MINDREVAMT * V_BMDAYS / V_COMMDAYS;
        V_MINDREVAMTREAL := V_DISACR;
      END IF;

      IF VC.ISDREV = 'Y' THEN
        V_DISDIRECTACR := GREATEST(VC.DIRECTACR - V_DISACR, 0); -- Doanh so duoc tinh hoa hong
      ELSE
        V_DISDIRECTACR := VC.DIRECTACR;
      END IF;
      IF VC.ODFEETYPE = 'F' THEN
        -- Phi co dinh
        V_REVENUE := V_DISDIRECTACR * VC.ODFEERATE / 100; -- Doang thu
      ELSE
        IF VC.DIRECTACR <> 0 THEN
          V_REVENUE := V_DISDIRECTACR * (VC.DIRECTFEEACR / VC.DIRECTACR);
        ELSE
          V_REVENUE := 0;
        END IF;
        -- Phi thuc thu
      END IF;
      V_COMMISION := FN_RE_GETCOMMISION(VC.ACCTNO,
                                        V_DISDIRECTACR,
                                        V_REVENUE);
      /*  dbms_output.put_line('----------');
      dbms_output.put_line(' acctno= '||vc.acctno);
      dbms_output.put_line('   v_revenue ='||v_revenue);
      dbms_output.put_line('   v_commision = '||v_commision);  */
      INSERT INTO RECOMMISION
        (AUTOID,
         REFRECFLNKID,
         CUSTID,
         MINDREVAMT,
         MINIREVAMT,
         MININCOME,
         MINRATESAL,
         SALTYPE,
         REACTYPE,
         ISDREV,
         ODRNUM,
         ACCTNO,
         DIRECTACR,
         DIRECTFEEACR,
         INDIRECTACR,
         INDIRECTFEEACR,
         ODFEETYPE,
         ODFEERATE,
         COMMDATE,
         DISDIRECTACR,
         DISREVACR,
         REVENUE,
         COMMISION,
         RETYPE,
         MINDREVAMTREAL,
         MINIREVAMTREAL,
         BMDAYS,
         COMMDAYS)
      VALUES
        (SEQ_RECOMMISION.NEXTVAL,
         VC.AUTOID,
         VC.CUSTID,
         VC.MINDREVAMT,
         VC.MINIREVAMT,
         VC.MININCOME,
         VC.MINRATESAL,
         VC.SALTYPE,
         VC.REACTYPE,
         VC.ISDREV,
         VC.ODRNUM,
         VC.ACCTNO,
         VC.DIRECTACR,
         VC.DIRECTFEEACR,
         VC.INDIRECTACR,
         VC.INDIRECTFEEACR,
         VC.ODFEETYPE,
         VC.ODFEERATE,
         V_CURRDATE,
         V_DISDIRECTACR,
         DECODE(VC.ISDREV, 'Y', V_DISACR, 0),
         V_REVENUE,
         V_COMMISION,
         'D',
         V_MINDREVAMTREAL,
         0,
         V_BMDAYS,
         V_COMMDAYS);

      IF VC.ISDREV = 'Y' THEN
        V_DISACR := V_DISACR - LEAST(V_DISACR, VC.DIRECTACR);
      END IF;
    END LOOP;
    -- Tinh Hoa Hong Gian Tiep
    FOR VC IN (SELECT RCL.AUTOID,
                      RCL.CUSTID,
                      RCL.MINDREVAMT, --dInh muc doanh so truc tiep
                      RCL.EFFDATE,
                      RCL.MINIREVAMT,
                      RCL.MININCOME, -- luong toi thieu
                      RCL.MINRATESAL, -- ti le huong luong toi thieu khi ko hoan thanh dinh muc
                      RCL.SALTYPE, -- Kieu tinh luong toi thieu
                      RCL.ACTYPE,
                      'Y' ISDREV, -- Co chiu luat dinh muc hay khong
                      0 ODRNUM, -- thu tu phan bo dinh muc
                      RM.ACCTNO, -- tk moi gioi
                      RM.DIRECTACR, -- Doanh so truc tiep
                      RM.DIRECTFEEACR, -- Doanh thu truc tiep
                      RM.INDIRECTACR, -- Doanh so gian tiep
                      RM.INDIRECTFEEACR, -- Doanh thu gian tiep
                      RM.ODFEETYPE, -- Cach tinh dua tren phi thuc thu hay phi co dinh M/F
                      RM.ODFEERATE, -- ti le phi co dinh
                      ICD.PERIOD,
                      ICD.PERIODDAY,
                      ICD.PERIODDATE
                 FROM REGRP RCL,
                      RETYPE RTY,
                      REMAST RM,
                      (SELECT ACTYPE,
                              PERIOD,
                              PERIODDAY,
                              TO_DATE((CASE
                                        WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                         V_LASTDAY
                                        ELSE
                                         PERIODDAY
                                      END) || '/' ||
                                      TO_CHAR(V_CURRDATE, 'MM/RRRR'),
                                      'DD/MM/RRRR') PERIODDATE
                         FROM ICCFTYPEDEF IC
                        WHERE IC.EVENTCODE = 'CALFEECOMM'
                          AND ((IC.PERIOD = 'M' AND TO_CHAR(V_CURRDATE, 'MM') <>
                              TO_CHAR(V_NEXTDATE, 'MM')) --Monthly, Ngay cuoi thang
                              OR (IC.PERIOD = 'S' AND
                              TO_DATE((CASE
                                             WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                              V_LASTDAY
                                             ELSE
                                              PERIODDAY
                                           END) || '/' ||
                                           TO_CHAR(V_CURRDATE, 'MM/RRRR'),
                                           'DD/MM/RRRR') >= V_CURRDATE AND
                              TO_DATE((CASE
                                             WHEN PERIODDAY > V_LASTDAY OR PERIODDAY < 1 THEN
                                              V_LASTDAY
                                             ELSE
                                              PERIODDAY
                                           END) || '/' ||
                                           TO_CHAR(V_CURRDATE, 'MM/RRRR'),
                                           'DD/MM/RRRR') < V_NEXTDATE) --Ngay hien tai la ngay lam viec gan ngay thu lai co dinh nhat
                              )) ICD
                WHERE RCL.CUSTID = RM.CUSTID
                  AND RCL.ACTYPE = RM.ACTYPE
                  AND RCL.ACTYPE = RTY.ACTYPE
                  AND RTY.RETYPE = 'I'
                  AND RTY.ACTYPE = ICD.ACTYPE
                ORDER BY RCL.AUTOID, RCL.CUSTID) LOOP

      -- Dinh muc thuc te = Dinh muc khai bao * so ngay hoat dong cu moi gioi / so ngay cua ky tinh Hoa hong
      IF VC.SALTYPE = '1' THEN
        -- tron thang
        V_COMMDAYS := LAST_DAY(V_CURRDATE) - TRUNC(V_CURRDATE, 'MM') + 1;
        V_BMDAYS   := V_COMMDAYS;
      ELSE
        -- tinh theo ngay thuc te
        IF VC.PERIOD = 'M' THEN
          -- tinh hang thang
          V_COMMDAYS := LAST_DAY(V_CURRDATE) - TRUNC(V_CURRDATE, 'MM') + 1;
          V_BMDAYS   := LAST_DAY(V_CURRDATE) -
                        GREATEST(VC.EFFDATE, TRUNC(V_CURRDATE, 'MM')) + 1;
        ELSE
          -- tinh vao ngay co dinh
          V_COMMDAYS := VC.PERIODDATE - ADD_MONTHS(VC.PERIODDATE, -1);
          V_BMDAYS   := VC.PERIODDATE -
                        GREATEST(VC.EFFDATE,
                                 ADD_MONTHS(VC.PERIODDATE, -1) + 1) + 1;
        END IF;
      END IF;
      V_DISACR         := VC.MINIREVAMT * V_BMDAYS / V_COMMDAYS;
      V_MINIREVAMTREAL := V_DISACR;

      V_DISDIRECTACR := GREATEST(VC.INDIRECTACR - V_DISACR, 0);
      IF VC.ODFEETYPE = 'F' THEN
        -- Phi co dinh
        V_REVENUE := V_DISDIRECTACR * VC.ODFEERATE / 100;
      ELSE
        -- Phi thuc thu
        IF VC.INDIRECTACR <> 0 THEN
          V_REVENUE := V_DISDIRECTACR * VC.INDIRECTFEEACR / VC.INDIRECTACR;
        ELSE
          V_REVENUE := 0;
        END IF;
      END IF;
      V_COMMISION := FN_RE_GETCOMMISION(VC.ACCTNO,
                                        V_DISDIRECTACR,
                                        V_REVENUE);
      INSERT INTO RECOMMISION
        (AUTOID,
         REFRECFLNKID,
         CUSTID,
         MINDREVAMT,
         MINIREVAMT,
         MININCOME,
         MINRATESAL,
         SALTYPE,
         REACTYPE,
         ISDREV,
         ODRNUM,
         ACCTNO,
         DIRECTACR,
         DIRECTFEEACR,
         INDIRECTACR,
         INDIRECTFEEACR,
         ODFEETYPE,
         ODFEERATE,
         COMMDATE,
         DISDIRECTACR,
         DISREVACR,
         REVENUE,
         COMMISION,
         RETYPE,
         MINDREVAMTREAL,
         MINIREVAMTREAL,
         BMDAYS,
         COMMDAYS)
      VALUES
        (SEQ_RECOMMISION.NEXTVAL,
         VC.AUTOID,
         VC.CUSTID,
         VC.MINDREVAMT,
         VC.MINIREVAMT,
         VC.MININCOME,
         VC.MINRATESAL,
         VC.SALTYPE,
         VC.ACTYPE,
         VC.ISDREV,
         VC.ODRNUM,
         VC.ACCTNO,
         VC.DIRECTACR,
         VC.DIRECTFEEACR,
         VC.INDIRECTACR,
         VC.INDIRECTFEEACR,
         VC.ODFEETYPE,
         VC.ODFEERATE,
         V_CURRDATE,
         V_DISDIRECTACR,
         V_DISACR,
         V_REVENUE,
         V_COMMISION,
         'I',
         0,
         V_MINIREVAMTREAL,
         V_BMDAYS,
         V_COMMDAYS);
    END LOOP;

    -- Sinh giao dich chot hoa hong
    SELECT TXDESC, EN_TXDESC
      INTO V_STRORGDESC, V_STREN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = '0320';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '0320';

    FOR REC IN (SELECT *
                  FROM RECOMMISION R
                 WHERE R.COMMDATE = V_CURRDATE
                   AND (R.COMMISION <> 0 OR R.DIRECTACR <> 0 OR
                       R.INDIRECTACR <> 0)
                   AND TXNUM IS NULL) LOOP
      V_STRDESC := V_STRORGDESC;
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

      --Set cac field giao dich
      --03   C   so tai khoan moi gioi
      L_TXMSG.TXFIELDS('03').DEFNAME := 'REACCTNO';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

      --20   C   custid moi gio
      L_TXMSG.TXFIELDS('20').DEFNAME := 'RECUSTID';
      L_TXMSG.TXFIELDS('20').TYPE := 'C';
      L_TXMSG.TXFIELDS('20').VALUE := REC.CUSTID;

      --21   C   RECUSTNAME moi gio
      L_TXMSG.TXFIELDS('21').DEFNAME := 'RECUSTNAME';
      L_TXMSG.TXFIELDS('21').TYPE := 'C';
      L_TXMSG.TXFIELDS('21').VALUE := '';

      --10   N   AMT hoa hong
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.COMMISION;

      --11   N   DIRECTACR doanh thu truc tiep
      L_TXMSG.TXFIELDS('11').DEFNAME := 'DIRECTACR';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.DIRECTACR;

      --12   N   INDIRECTACR doanh thu gian tiep
      L_TXMSG.TXFIELDS('12').DEFNAME := 'INDIRECTACR';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.INDIRECTACR;

      --13   N   DIRECTFEEACR PHI truc tiep
      L_TXMSG.TXFIELDS('13').DEFNAME := 'DIRECTFEEACR';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.DIRECTFEEACR;
      -- 14
      L_TXMSG.TXFIELDS('14').DEFNAME := 'INDIRECTFEEACR';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := REC.INDIRECTFEEACR;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'T_DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;

      BEGIN
        IF TXPKS_#0320.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 0320: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
      UPDATE RECOMMISION
         SET TXNUM = L_TXMSG.TXNUM, TXDATE = L_TXMSG.TXDATE
       WHERE AUTOID = REC.AUTOID;
    END LOOP;
    -- tinh luong co ban cho moi gio
    DELETE RESALARY WHERE COMMDATE = V_CURRDATE;
    FOR VC IN (SELECT RC.COMMDATE,
                      RC.CUSTID,
                      RC.RETYPE,
                      RC.MINDREVAMT,
                      RC.MINIREVAMT,
                      RC.MININCOME,
                      RC.MINRATESAL,
                      RC.SALTYPE,
                      RC.MINDREVAMTREAL,
                      RC.MINIREVAMTREAL,
                      RC.BMDAYS,
                      RC.COMMDAYS,
                      SUM(DIRECTACR) DIRECTACR,
                      SUM(DIRECTFEEACR) DIRECTFEEACR,
                      SUM(INDIRECTACR) INDIRECTACR,
                      SUM(INDIRECTFEEACR) INDIRECTFEEACR,
                      SUM(REVENUE) REVENUE,
                      SUM(COMMISION) COMMISION,
                      CASE
                        WHEN RC.RETYPE = 'D' AND RC.MINRATESAL > 0 THEN
                         RC.MININCOME *
                         LEAST(1,
                               GREATEST(RC.MINRATESAL / 100,
                                        SUM(RC.DIRECTACR) /
                                        (RC.MINDREVAMTREAL + 0.00001))) *
                         RC.BMDAYS / RC.COMMDAYS
                        WHEN RC.RETYPE = 'D' AND RC.MINRATESAL = 0 AND
                             SUM(RC.DIRECTACR) >= RC.MINDREVAMTREAL THEN
                         RC.MININCOME * RC.BMDAYS / RC.COMMDAYS
                        WHEN RC.RETYPE = 'D' AND RC.MINRATESAL = 0 AND
                             SUM(RC.DIRECTACR) < RC.MINDREVAMTREAL THEN
                         0

                        WHEN RC.RETYPE = 'I' AND RC.MINRATESAL > 0 THEN
                         RC.MININCOME *
                         LEAST(1,
                               GREATEST(RC.MINRATESAL / 100,
                                        SUM(RC.INDIRECTACR) /
                                        (RC.MINIREVAMTREAL + 0.00001))) *
                         RC.BMDAYS / RC.COMMDAYS
                        WHEN RC.RETYPE = 'I' AND RC.MINRATESAL = 0 AND
                             SUM(RC.INDIRECTACR) >= RC.MINIREVAMTREAL THEN
                         RC.MININCOME * RC.BMDAYS / RC.COMMDAYS
                        WHEN RC.RETYPE = 'I' AND RC.MINRATESAL = 0 AND
                             SUM(RC.INDIRECTACR) < RC.MINIREVAMTREAL THEN
                         0
                      END SALARY
                 FROM RECOMMISION RC, RETYPE RTY
                WHERE RC.COMMDATE = V_CURRDATE
                  AND RC.REACTYPE = RTY.ACTYPE
                  AND (RC.RETYPE = 'I' OR
                      RC.RETYPE = 'D' AND RTY.REROLE IN ('BM', 'RM'))
                GROUP BY RC.COMMDATE,
                         RC.CUSTID,
                         RC.RETYPE,
                         RC.MINDREVAMT,
                         RC.MINIREVAMT,
                         RC.MININCOME,
                         RC.MINRATESAL,
                         RC.SALTYPE,
                         RC.MINDREVAMTREAL,
                         RC.MINIREVAMTREAL,
                         RC.BMDAYS,
                         RC.COMMDAYS) LOOP
      INSERT INTO RESALARY
        (AUTOID,
         COMMDATE,
         CUSTID,
         RETYPE,
         MINDREVAMT,
         MINIREVAMT,
         MININCOME,
         MINRATESAL,
         SALTYPE,
         DIRECTACR,
         DIRECTFEEACR,
         INDIRECTACR,
         INDIRECTFEEACR,
         REVENUE,
         COMMISION,
         SALARY,
         MINDREVAMTREAL,
         MINIREVAMTREAL,
         BMDAYS,
         COMMDAYS)
      VALUES
        (SEQ_RESALARY.NEXTVAL,
         VC.COMMDATE,
         VC.CUSTID,
         VC.RETYPE,
         VC.MINDREVAMT,
         VC.MINIREVAMT,
         VC.MININCOME,
         VC.MINRATESAL,
         VC.SALTYPE,
         VC.DIRECTACR,
         VC.DIRECTFEEACR,
         VC.INDIRECTACR,
         VC.INDIRECTFEEACR,
         VC.REVENUE,
         VC.COMMISION,
         VC.SALARY,
         VC.MINDREVAMTREAL,
         VC.MINIREVAMTREAL,
         VC.BMDAYS,
         VC.COMMDAYS);
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_reCALFEECOMM');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_reCALFEECOMM');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RECALFEECOMM;

  PROCEDURE PR_RECHANGECFSTS(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    V_CURRDATE DATE;
    V_DMDAY    NUMBER(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_reCHANGECFSTS');
    RE_CHANGE_CFSTATUS_AF;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_reCHANGECFSTS');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_reCHANGECFSTS');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RECHANGECFSTS;

  PROCEDURE PR_DFAUTOMARGINLOANDRAWNDOWN(P_BCHMDL   VARCHAR,
                                         P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   DATE;
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);

    L_RLSAMOUNT         NUMBER(20, 0); -- So tien can giai ngan.
    L_EXECRLSAMOUNT     NUMBER(20, 0); -- So tien giai ngan tren moi deal TONG DF
    L_ITEMEXECRLSAMOUNT NUMBER(20, 0); -- So tien giai ngan chi tiet Item moi deal Tong DF.
    L_DFGROUPID         VARCHAR2(30);
    L_STRINGDATA        VARCHAR2(4000);
    L_DFAVLAMOUNT       NUMBER(20, 0);
    L_SYMBOL            VARCHAR2(30);
    L_DFPRICE           NUMBER(20, 0);
    L_ORGDFPRICE        NUMBER(20, 0);
    L_DFQTTY            NUMBER(20, 0);
    L_REFDEAL           VARCHAR2(1000);
    L_TRADELOT          NUMBER(20, 0);
    L_TOTALBLOCKEDQTTY  NUMBER(20, 0);
    L_TOTALRECVQTTY     NUMBER(20, 0);
    L_COUNT             NUMBER;
    L_AVLCFLIMIT        NUMBER(20, 0);
    L_MRRATE            NUMBER(20, 4);
    L_MRPRICE           NUMBER(20, 0);
    L_MRCRLIMITMAX      NUMBER(20, 0);
    L_AVLRLSCL          NUMBER(20, 0);
    L_ROOMREMAINQTTY    NUMBER(20, 0);
    L_AVLQTTY           NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_DFAutoMarginLoanDrawnDown');
    -- Lay ra khach hang can giai ngan.

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = '2676';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := L_CURRDATE;
    L_TXMSG.BUSDATE   := L_CURRDATE;
    L_TXMSG.TLTXCD    := '2676';

    PLOG.DEBUG(PKGCTX, 'Into for rec in');
    FOR REC IN (SELECT CI.*, AF.CUSTID AFCUSTID, AF.ACTYPE AFTYPE, cf.custodycd,cf.fullname
                  FROM CIMAST CI, AFMAST AF, AFTYPE AFT, MRTYPE MRT,cfmast cf
                 WHERE CI.ACCTNO = AF.ACCTNO
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND AFT.MRTYPE = MRT.ACTYPE
                   AND MRT.MRTYPE = 'F'
                   AND CI.BALANCE < 0
                   and af.custid = cf.custid
                 ORDER BY CI.ACCTNO) LOOP
      PLOG.DEBUG(PKGCTX, 'Inside for rec in:' || REC.ACCTNO);
      -- Voi tung khach hang can giai ngan. Thuc hien deal vay DF Tong den min (tong so tien DF co the phat vay, - so tien balance bi am).
      L_RLSAMOUNT     := GREATEST(-REC.BALANCE, 0);
      L_EXECRLSAMOUNT := 0;
      -- Thuc hien giai ngan:
      PLOG.DEBUG(PKGCTX, 'Into rec_dftype rec in');
      FOR REC_DFTYPE IN -- Lua chon thu tu giai ngan theo DFTYPE.
       (SELECT *
          FROM (SELECT DFT.*,
                       LNT.RRTYPE LNRRTYPE,
                       LNT.CUSTBANK LNCUSTBANK,
                       ODRNUM,
                       'Y' ISSUBRESOURCE
                  FROM AFMAST   AF,
                       AFTYPE   AFT,
                       AFIDTYPE AFID,
                       DFTYPE   DFT,
                       LNTYPE   LNT
                 WHERE AFT.ACTYPE = AFID.AFTYPE
                   AND AFID.ACTYPE = DFT.ACTYPE
                   AND AF.ACTYPE = AFT.ACTYPE
                   AND DFT.LNTYPE = LNT.ACTYPE
                  -- AND LNT.RRTYPE = 'B'
                   AND AF.ACCTNO = REC.ACCTNO
                   AND OBJNAME = 'DF.DFTYPE'
                   AND DFT.STATUS <> 'N'
                UNION ALL
                SELECT DFT.*,
                       LNT.RRTYPE LNRRTYPE,
                       LNT.CUSTBANK LNCUSTBANK,
                       999 ODRNUM,
                       'N' ISSUBRESOURCE
                  FROM AFMAST AF, AFTYPE AFT, DFTYPE DFT, LNTYPE LNT
                 WHERE AF.ACTYPE = AFT.ACTYPE
                   AND DFT.LNTYPE = LNT.ACTYPE
                  -- AND LNT.RRTYPE = 'B'
                   AND AF.ACCTNO = REC.ACCTNO
                   AND AFT.DFTYPE = DFT.ACTYPE
                   AND DFT.STATUS <> 'N')
         ORDER BY CASE
                    WHEN ISSUBRESOURCE = 'Y' THEN
                     0
                    ELSE
                     1
                  END,
                  ODRNUM) LOOP
        -- Tren tung DFTYPE duoc chon:
        PLOG.DEBUG(PKGCTX,
                   'Inside rec_dftype rec in:' || REC_DFTYPE.DFTYPE);
        L_STRINGDATA    := ''; -- reset string
        L_EXECRLSAMOUNT := 0;
        -- Theo Ngan Hang: Lay han muc con lai co the dung:
        BEGIN
          L_AVLCFLIMIT := GREATEST(CSPKS_CFPROC.FN_GETAVLCFLIMIT(REC_DFTYPE.LNCUSTBANK,
                                                                 REC.AFCUSTID,
                                                                 'DFMR'),
                                   0);
        EXCEPTION
          WHEN OTHERS THEN
            L_AVLCFLIMIT := 0;
        END;
        L_AVLCFLIMIT:=10000000000000;
        PLOG.DEBUG(PKGCTX, 'l_avlcflimit:' || L_AVLCFLIMIT);
        EXIT WHEN L_AVLCFLIMIT <= 0;
        PLOG.DEBUG(PKGCTX, 'Into dfrlsRecords rec in');
        FOR DFRLS_REC IN (SELECT SE.CODEID,
                                10000000000000 SI,
                              0 QI,
                              10000000000000 RI,
                              10000000000000 PRAVLLIMIT,
                                 DECODE(SE.CODEID, NULL, 'N', 'Y') ISMARGIN
                                 FROM SEMAST SE WHERE AFACCTNO = REC.ACCTNO
                                           ) LOOP
          PLOG.DEBUG(PKGCTX,
                     'Inside dfrlsRecords dfrls_rec in:' ||
                     DFRLS_REC.CODEID);

          -- Voi Ma chung khoan da chon. xac dinh so chung khoan co the giai ngan voi DFTYPE.
          SELECT SYMBOL, TRADELOT
            INTO L_SYMBOL, L_TRADELOT
            FROM SECURITIES_INFO
           WHERE CODEID = DFRLS_REC.CODEID;
          PLOG.DEBUG(PKGCTX, 'Into rec_basket rec in');
          FOR REC_BASKET IN (SELECT NVL(SUM( TRADE  - NVL(STS.EXECSELLQTTY, 0))
                                              ,
                                        0) DFQTTY,
                                    NVL(SUM(
                                               NVL(STS2.EXECBUYQTTY, 0)
                                           ),
                                        0) RECEIVING,
                                    NVL(SUM(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               SE.BLOCKED
                                              ELSE
                                               0
                                            END),
                                        0) BLOCKED,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.IRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) IRATE_N,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.IRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) IRATE_R,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               DFBK.IRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) IRATE_B,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.MRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) MRATE_N,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.MRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) MRATE_R,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               DFBK.MRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) MRATE_B,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.LRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) LRATE_N,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.LRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) LRATE_R,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               DFBK.LRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) LRATE_B,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.DFRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) DFRATE_N,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.DFRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) DFRATE_R,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               DFBK.DFRATE
                                              ELSE
                                               NULL
                                            END),
                                        0) DFRATE_B,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.DFPRICE
                                              ELSE
                                               NULL
                                            END),
                                        0) DFPRICE_N,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.DFPRICE
                                              ELSE
                                               NULL
                                            END),
                                        0) DFPRICE_R,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               DFBK.DFPRICE
                                              ELSE
                                               NULL
                                            END),
                                        0) DFPRICE_B,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.REFPRICE
                                              ELSE
                                               NULL
                                            END),
                                        0) REFPRICE_N,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'N' THEN
                                               DFBK.REFPRICE
                                              ELSE
                                               NULL
                                            END),
                                        0) REFPRICE_R,
                                    NVL(MAX(CASE
                                              WHEN DFBK.DEALTYPE = 'B' THEN
                                               DFBK.REFPRICE
                                              ELSE
                                               NULL
                                            END),
                                        0) REFPRICE_B,
                                    NVL(MIN(SEC.DFRLSPRICE), 0) DFREFPRICE

                               FROM AFMAST AF,
                                    AFIDTYPE AFID,
                                    DFTYPE DFT,
                                    DFBASKET DFBK,
                                    SEMAST SE,
                                    SECURITIES_INFO SEC,
                                    (SELECT AFACCTNO,
                                            CODEID,
                                            SUM(CASE
                                                  WHEN DUETYPE = 'SS' THEN
                                                   QTTY -
                                                   DECODE(STATUS, 'C', QTTY, AQTTY)
                                                  ELSE
                                                   0
                                                END) EXECSELLQTTY
                                       FROM STSCHD
                                      WHERE DUETYPE = 'SS'
                                        AND DELTD <> 'Y'
                                        AND STATUS <> 'C'
                                        AND AFACCTNO = REC.ACCTNO
                                        AND CODEID = DFRLS_REC.CODEID
                                      GROUP BY AFACCTNO, CODEID) STS,
                                    (SELECT AFACCTNO,
                                            CODEID,
                                            SUM(QTTY - AQTTY) EXECBUYQTTY
                                       FROM STSCHD
                                      WHERE DUETYPE = 'RS'
                                        AND DELTD <> 'Y'
                                        AND STATUS <> 'C'
                                      GROUP BY AFACCTNO, CODEID) STS2
                              WHERE SE.AFACCTNO = STS.AFACCTNO(+)
                                AND SE.CODEID = STS.CODEID(+)
                                AND SE.AFACCTNO = STS2.AFACCTNO(+)
                                AND SE.CODEID = STS2.CODEID(+)
                                AND AF.ACCTNO = SE.AFACCTNO
                                AND AF.ACTYPE = AFID.AFTYPE
                                AND AFID.ACTYPE = DFT.ACTYPE
                                AND AFID.OBJNAME = 'DF.DFTYPE'
                                AND DFT.BASKETID = DFBK.BASKETID
                                AND DFBK.SYMBOL = SEC.SYMBOL
                                AND DFBK.DEALTYPE ='N'
                                AND SEC.CODEID = SE.CODEID
                             -- AND DFT.ACTYPE = REC_DFTYPE.ACTYPE
                                AND AF.ACCTNO = REC.ACCTNO
                                AND SE.CODEID = DFRLS_REC.CODEID
                              GROUP BY SE.AFACCTNO, DFT.ACTYPE
                              order by SEC.SYMBOL

                              ) LOOP
            PLOG.DEBUG(PKGCTX, 'Inside rec_basket rec in');
            -- So sanh: Neu Gia vay * Ti le vay trong Ro CL > Gia vay * ti le vay trong ro DF: exit loop;
            BEGIN
              SELECT RSK.MRRATIOLOAN / 100,
                     LEAST(RSK.MRPRICELOAN, SB.MARGINPRICE)
                INTO L_MRRATE, L_MRPRICE
                FROM AFSERISK RSK, SECURITIES_INFO SB
               WHERE ACTYPE = REC.AFTYPE
                 AND RSK.CODEID = DFRLS_REC.CODEID
                 AND SB.CODEID = RSK.CODEID;
            EXCEPTION
              WHEN OTHERS THEN
                L_MRRATE  := 0;
                L_MRPRICE := 0;
            END;

            -- Xac dinh chuoi STRDATA:
            -- Template
            /*
            --ACTYPE,DFTYPE,ORGAMT,TXTIME,TXDATE,TXNUM,MAKER,IRATE,MRATE,LRATE,AUTODRAWNDOWN,
            --ISAPPROVE,DESCRIPTION,AFACCTNO,DTYPE,SYMBOL,CODEID,QTTY,DFPRICE,DFRATE,AMT,GROUPID,AUTODRAWNDOWN
            --ISAPPROVE,AFACCTNODRD,REF
            -- Example:
            --0055|A|305600000|15:27:48|14/05/2012|9900111111|0001|100|90|80|1|
            --Y|Test DF Tong ALL|0001686868|N|KLS|000419|40000|3760|40|150400000|0001140512000021|1|
            --N|Y|0001686868|
            --$
            --0055|A|305600000|15:27:48|14/05/2012|9900111111|0001|100|90|80|1|
            --Y|Test DF Tong ALL|0001686868|N|SSI|103|20000|7760|40|155200000|0001140512000021|1|
            --N|Y|0001686868|
            --$
            */
            -- DEALTYPE = N: Chung khoan Thuong.
            PLOG.DEBUG(PKGCTX,
                       'pr_DFAutoMarginLoanDrawnDown:rec_basket.DFQTTY:' ||
                       REC_BASKET.DFQTTY);
            IF REC_BASKET.DFQTTY  > 0 AND REC_BASKET.DFRATE_N > 0 THEN
              PLOG.DEBUG(PKGCTX,
                         'pr_DFAutoMarginLoanDrawnDown:l_avlcflimit:' ||
                         L_AVLCFLIMIT);

              SELECT NVL(SUM(MST.SYROOMLIMIT - MST.SYROOMUSED -
                             (NVL(SY_PRINUSED, 0) + NVL(SY_PRINUSED_AF, 0))),
                         0)
                INTO L_ROOMREMAINQTTY
                FROM VW_MARGINROOMSYSTEM MST,
                     (SELECT CODEID,
                             SUM(DECODE(RESTYPE, 'S', PRINUSED, 0)) SY_PRINUSED,
                             SUM(CASE
                                   WHEN RESTYPE = 'S' AND AFACCTNO = REC.ACCTNO THEN
                                    PRINUSED
                                   ELSE
                                    0
                                 END) SY_PRINUSED_AF
                        FROM VW_AFPRALLOC_ALL
                       WHERE CODEID = DFRLS_REC.CODEID
                       GROUP BY CODEID) USED
               WHERE MST.CODEID = DFRLS_REC.CODEID
                 AND MST.CODEID = USED.CODEID(+);
      L_ROOMREMAINQTTY:=10000000000000;
              L_AVLQTTY := REC_BASKET.DFQTTY;

              L_REFDEAL := '';

              L_DFPRICE := (CASE
                             WHEN REC_BASKET.DFPRICE_N <= 0 THEN
                              ROUND((CASE
                                      WHEN REC_BASKET.REFPRICE_N <= 0 THEN
                                       REC_BASKET.DFREFPRICE
                                      ELSE
                                       LEAST(REC_BASKET.REFPRICE_N, REC_BASKET.DFREFPRICE)
                                    END) * REC_BASKET.DFRATE_N / 100,
                                    0)
                             ELSE
                              LEAST(REC_BASKET.DFPRICE_N,
                                    REC_BASKET.DFREFPRICE * REC_BASKET.DFRATE_N / 100)
                           END);
              L_ORGDFPRICE := L_DFPRICE;
              PLOG.DEBUG(PKGCTX,
                         'pr_DFAutoMarginLoanDrawnDown:l_DFPrice:' ||
                         L_DFPRICE);

              -- Check on MrCrLimitMax -- So tien con giai ngan CL.
              SELECT GREATEST(MRCRLIMITMAX - DFODAMT, 0),
                     GREATEST(LEAST(MRCRLIMITMAX - DFODAMT,
                                    NVL(SEC.SEAMT, 0)) -
                              GREATEST(NVL(MARGINPRIN, 0) /*- af.mrcrlimit*/,
                                       0),
                              0)
                INTO L_MRCRLIMITMAX, L_AVLRLSCL
                FROM AFMAST AF,
                     CIMAST CI,
                     V_GETSECMARGININFO SEC,
                     (SELECT TRFACCTNO,
                             SUM(PRINNML + PRINOVD + INTNMLACR + INTDUE +
                                 INTNMLOVD + INTOVDACR + FEEINTNMLACR +
                                 FEEINTDUE + FEEINTNMLOVD + FEEINTOVDACR) MARGINPRIN
                        FROM LNMAST
                       WHERE FTYPE <> 'DF'
                         AND TRFACCTNO = REC.ACCTNO
                       GROUP BY TRFACCTNO) LN
               WHERE AF.ACCTNO = CI.ACCTNO
                 AND AF.ACCTNO = LN.TRFACCTNO(+)
                 AND AF.ACCTNO = REC.ACCTNO
                 AND AF.ACCTNO = SEC.AFACCTNO(+);

              -- Qui doi sang so tien co the giai ngan DF.
              IF L_ORGDFPRICE >= (L_MRPRICE * L_MRRATE) AND
                 (L_MRPRICE * L_MRRATE) <> 0 THEN
                L_MRCRLIMITMAX := LEAST(L_MRCRLIMITMAX,
                                        GREATEST(L_AVLRLSCL * L_ORGDFPRICE /
                                                 (L_MRPRICE * L_MRRATE),
                                                 0));
              END IF;

              L_ITEMEXECRLSAMOUNT := LEAST(L_AVLQTTY * L_ORGDFPRICE,
                                           L_RLSAMOUNT - L_EXECRLSAMOUNT,
                                           L_AVLCFLIMIT,
                                           L_MRCRLIMITMAX);
              PLOG.DEBUG(PKGCTX,
                         'pr_DFAutoMarginLoanDrawnDown:l_ItemExecRlsAmount:' ||
                         L_ITEMEXECRLSAMOUNT);

              -- Lam tron khoi luong theo lo TradeLot
              IF L_DFPRICE > 0 THEN
                L_DFQTTY := LEAST(FLOOR(L_AVLQTTY / L_TRADELOT) *
                                  L_TRADELOT,
                                  CEIL((L_ITEMEXECRLSAMOUNT / L_DFPRICE) /
                                       L_TRADELOT) * L_TRADELOT);
              ELSE
                L_DFQTTY := 0;
              END IF;
              PLOG.DEBUG(PKGCTX,
                         'pr_DFAutoMarginLoanDrawnDown:l_DFQtty:' ||
                         L_DFQTTY);
              -- Tinh lai so tien giai ngan.
              L_ITEMEXECRLSAMOUNT := LEAST(L_DFPRICE * L_DFQTTY,
                                           L_RLSAMOUNT - L_EXECRLSAMOUNT,
                                           L_AVLCFLIMIT);
              PLOG.DEBUG(PKGCTX,
                         'pr_DFAutoMarginLoanDrawnDown:l_ItemExecRlsAmount:' ||
                         L_ITEMEXECRLSAMOUNT);
              IF L_DFQTTY > 0 THEN
                L_DFPRICE := ROUND(L_ITEMEXECRLSAMOUNT / L_DFQTTY, 0);
              END IF;

              IF --NAMNT(L_MRPRICE * L_MRRATE) <= L_ORGDFPRICE AND
                 L_ITEMEXECRLSAMOUNT > 0 THEN
                PLOG.DEBUG(PKGCTX,
                           'pr_DFAutoMarginLoanDrawnDown:l_ItemExecRlsAmount>0:' ||
                           'DFQTTY');
                L_EXECRLSAMOUNT := L_EXECRLSAMOUNT + L_ITEMEXECRLSAMOUNT;
                L_AVLCFLIMIT    := L_AVLCFLIMIT - L_ITEMEXECRLSAMOUNT;

                L_STRINGDATA := L_STRINGDATA || REC_DFTYPE.ACTYPE || '|'; --ACTYPE
                L_STRINGDATA := L_STRINGDATA || REC_DFTYPE.DFTYPE || '|'; --DFTYPE
                L_STRINGDATA := L_STRINGDATA || '<$ORGAMT>' || '|'; --ORGAMT
                L_STRINGDATA := L_STRINGDATA || '<$TXTIME>' || '|'; --TXTIME
                L_STRINGDATA := L_STRINGDATA || '<$TXDATE>' || '|'; --TXDATE
                L_STRINGDATA := L_STRINGDATA || '<$TXNUM>' || '|'; --TXNUM
                L_STRINGDATA := L_STRINGDATA || '<$MAKER>' || '|'; --MAKER
                L_STRINGDATA := L_STRINGDATA || REC_BASKET.IRATE_N || '|'; --IRATE
                L_STRINGDATA := L_STRINGDATA || REC_BASKET.MRATE_N || '|'; --MRATE
                L_STRINGDATA := L_STRINGDATA || REC_BASKET.LRATE_N || '|'; --LRATE
                L_STRINGDATA := L_STRINGDATA || '1' || '|'; --AUTODRAWNDOWN
                L_STRINGDATA := L_STRINGDATA || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                L_STRINGDATA := L_STRINGDATA || '<$DESCRIPTION>' || '|'; --DESCRIPTION
                L_STRINGDATA := L_STRINGDATA || REC.ACCTNO || '|'; --AFACCTNO
                L_STRINGDATA := L_STRINGDATA || 'N' || '|'; --DTYPE
                L_STRINGDATA := L_STRINGDATA || L_SYMBOL || '|'; --SYMBOL
                L_STRINGDATA := L_STRINGDATA || DFRLS_REC.CODEID || '|'; --CODEID
                L_STRINGDATA := L_STRINGDATA || L_DFQTTY || '|'; --QTTY
                L_STRINGDATA := L_STRINGDATA || L_DFPRICE || '|'; --DFPRICE
                L_STRINGDATA := L_STRINGDATA || REC_BASKET.DFRATE_N || '|'; --DFRATE
                L_STRINGDATA := L_STRINGDATA || L_ITEMEXECRLSAMOUNT || '|'; --AMT
                L_STRINGDATA := L_STRINGDATA || '<$GROUPID>' || '|'; --GROUPID
                L_STRINGDATA := L_STRINGDATA || '1' || '|'; --AUTODRAWNDOWN
                L_STRINGDATA := L_STRINGDATA || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                L_STRINGDATA := L_STRINGDATA || REC.ACCTNO || '|'; --AFACCTNODRD
                L_STRINGDATA := L_STRINGDATA || L_REFDEAL; --REF
                L_STRINGDATA := L_STRINGDATA || '$'; --$
              END IF;
            END IF;
            PLOG.DEBUG(PKGCTX,
                       'After.DFQTTY:' ||
                       TO_NUMBER(L_RLSAMOUNT - L_EXECRLSAMOUNT));
            EXIT WHEN L_RLSAMOUNT - L_EXECRLSAMOUNT <= 0 OR L_AVLCFLIMIT <= 0;

            PLOG.DEBUG(PKGCTX,
                       'Before.RECEIVING:' ||
                       TO_NUMBER(REC_BASKET.RECEIVING));
            PLOG.DEBUG(PKGCTX,
                       'Before.rec_basket.dfrate_r:' ||
                       TO_NUMBER(REC_BASKET.DFRATE_R));
            IF REC_BASKET.RECEIVING > 0 AND REC_BASKET.DFRATE_R > 0 THEN

              SELECT NVL(SUM(MST.SYROOMLIMIT - MST.SYROOMUSED -
                             (NVL(SY_PRINUSED, 0) + NVL(SY_PRINUSED_AF, 0))),
                         0)
                INTO L_ROOMREMAINQTTY
                FROM VW_MARGINROOMSYSTEM MST,
                     (SELECT CODEID,
                             SUM(DECODE(RESTYPE, 'S', PRINUSED, 0)) SY_PRINUSED,
                             SUM(CASE
                                   WHEN RESTYPE = 'S' AND AFACCTNO = REC.ACCTNO THEN
                                    PRINUSED
                                   ELSE
                                    0
                                 END) SY_PRINUSED_AF
                        FROM VW_AFPRALLOC_ALL
                       WHERE CODEID = DFRLS_REC.CODEID
                       GROUP BY CODEID) USED
               WHERE MST.CODEID = DFRLS_REC.CODEID
                 AND MST.CODEID = USED.CODEID(+);

            /*  L_TOTALRECVQTTY := LEAST(REC_BASKET.RECEIVING,
                                       L_ROOMREMAINQTTY);*/
              L_TOTALRECVQTTY := REC_BASKET.RECEIVING;
              FOR REC_SERECV IN (SELECT TXDATE,
                                        CLEARDATE,
                                        AUTOID,
                                        AFACCTNO,
                                        CODEID,
                                        (QTTY - AQTTY) RECEIVING
                                   FROM VW_STSCHD_DEALGROUP
                                  WHERE DUETYPE = 'RS'
                                    AND QTTY - AQTTY > 0
                                    AND AFACCTNO = REC.ACCTNO
                                    AND CODEID = DFRLS_REC.CODEID) LOOP
                IF L_TOTALRECVQTTY > 0 THEN
                  L_REFDEAL := REC_SERECV.AUTOID;

                  L_DFPRICE := (CASE
                                 WHEN REC_BASKET.DFPRICE_R <= 0 THEN
                                  ROUND((CASE
                                          WHEN REC_BASKET.REFPRICE_R <= 0 THEN
                                           REC_BASKET.DFREFPRICE
                                          ELSE
                                           LEAST(REC_BASKET.REFPRICE_R, REC_BASKET.DFREFPRICE)
                                        END) * REC_BASKET.DFRATE_R / 100,
                                        0)
                                 ELSE
                                  LEAST(REC_BASKET.DFPRICE_R,
                                        REC_BASKET.DFREFPRICE * REC_BASKET.DFRATE_R / 100)
                               END);
                  L_ORGDFPRICE := L_DFPRICE;
                  PLOG.DEBUG(PKGCTX,
                             'pr_DFAutoMarginLoanDrawnDown:l_DFPrice:' ||
                             L_DFPRICE);

                  -- Check on MrCrLimitMax
                  SELECT GREATEST(MRCRLIMITMAX - DFODAMT, 0),
                         GREATEST(LEAST(MRCRLIMITMAX - DFODAMT,
                                        NVL(SEC.SEAMT, 0)) -
                                  GREATEST(NVL(MARGINPRIN, 0) /*- af.mrcrlimit*/,
                                           0),
                                  0)
                    INTO L_MRCRLIMITMAX, L_AVLRLSCL
                    FROM AFMAST AF,
                         CIMAST CI,
                         V_GETSECMARGININFO SEC,
                         (SELECT TRFACCTNO,
                                 SUM(PRINNML + PRINOVD + INTNMLACR + INTDUE +
                                     INTNMLOVD + INTOVDACR + FEEINTNMLACR +
                                     FEEINTDUE + FEEINTNMLOVD + FEEINTOVDACR) MARGINPRIN
                            FROM LNMAST
                           WHERE FTYPE <> 'DF'
                             AND TRFACCTNO = REC.ACCTNO
                           GROUP BY TRFACCTNO) LN
                   WHERE AF.ACCTNO = CI.ACCTNO
                     AND AF.ACCTNO = LN.TRFACCTNO(+)
                     AND AF.ACCTNO = REC.ACCTNO
                     AND AF.ACCTNO = SEC.AFACCTNO(+);

                  -- Qui doi sang so tien co the giai ngan DF.
                  IF L_ORGDFPRICE >= (L_MRPRICE * L_MRRATE) AND
                     (L_MRPRICE * L_MRRATE) <> 0 THEN
                    L_MRCRLIMITMAX := LEAST(L_MRCRLIMITMAX,
                                            GREATEST(L_AVLRLSCL *
                                                     L_ORGDFPRICE /
                                                     (L_MRPRICE * L_MRRATE),
                                                     0));
                  END IF;

                  L_ITEMEXECRLSAMOUNT := LEAST(LEAST(REC_SERECV.RECEIVING,
                                                     L_TOTALRECVQTTY) *
                                               L_ORGDFPRICE,
                                               L_RLSAMOUNT - L_EXECRLSAMOUNT,
                                               L_AVLCFLIMIT,
                                               L_MRCRLIMITMAX);

                  -- Lam tron khoi luong theo lo TradeLot
                  IF L_DFPRICE > 0 THEN
                    L_DFQTTY := LEAST(FLOOR(LEAST(REC_SERECV.RECEIVING,
                                                  L_TOTALRECVQTTY) /
                                            L_TRADELOT) * L_TRADELOT,
                                      CEIL((L_ITEMEXECRLSAMOUNT / L_DFPRICE) /
                                           L_TRADELOT) * L_TRADELOT);
                  ELSE
                    L_DFQTTY := 0;
                  END IF;

                  -- Tinh lai so tien giai ngan.
                  L_ITEMEXECRLSAMOUNT := LEAST(L_DFPRICE * L_DFQTTY,
                                               L_RLSAMOUNT - L_EXECRLSAMOUNT,
                                               L_AVLCFLIMIT);
                  IF L_DFQTTY > 0 THEN
                    L_DFPRICE := ROUND(L_ITEMEXECRLSAMOUNT / L_DFQTTY, 0);
                  END IF;

                  PLOG.DEBUG(PKGCTX, 'Inside.l_DFPrice:' || L_DFPRICE);
                  PLOG.DEBUG(PKGCTX, 'Inside.l_DFQtty:' || L_DFQTTY);
                  PLOG.DEBUG(PKGCTX,
                             'Inside.(l_mrprice * l_mrrate):' ||
                             (L_MRPRICE * L_MRRATE));
                  PLOG.DEBUG(PKGCTX,
                             'Inside.l_ItemExecRlsAmount:' ||
                             L_ITEMEXECRLSAMOUNT);
                  IF (L_MRPRICE * L_MRRATE) <= L_ORGDFPRICE AND
                     L_ITEMEXECRLSAMOUNT > 0 THEN
                    L_EXECRLSAMOUNT := L_EXECRLSAMOUNT +
                                       L_ITEMEXECRLSAMOUNT;
                    L_AVLCFLIMIT    := L_AVLCFLIMIT - L_ITEMEXECRLSAMOUNT;

                    L_STRINGDATA := L_STRINGDATA || REC_DFTYPE.ACTYPE || '|'; --ACTYPE
                    L_STRINGDATA := L_STRINGDATA || REC_DFTYPE.DFTYPE || '|'; --DFTYPE
                    L_STRINGDATA := L_STRINGDATA || '<$ORGAMT>' || '|'; --ORGAMT
                    L_STRINGDATA := L_STRINGDATA || '<$TXTIME>' || '|'; --TXTIME
                    L_STRINGDATA := L_STRINGDATA || '<$TXDATE>' || '|'; --TXDATE
                    L_STRINGDATA := L_STRINGDATA || '<$TXNUM>' || '|'; --TXNUM
                    L_STRINGDATA := L_STRINGDATA || '<$MAKER>' || '|'; --MAKER
                    L_STRINGDATA := L_STRINGDATA || REC_BASKET.IRATE_R || '|'; --IRATE
                    L_STRINGDATA := L_STRINGDATA || REC_BASKET.MRATE_R || '|'; --MRATE
                    L_STRINGDATA := L_STRINGDATA || REC_BASKET.LRATE_R || '|'; --LRATE
                    L_STRINGDATA := L_STRINGDATA || '1' || '|'; --AUTODRAWNDOWN
                    L_STRINGDATA := L_STRINGDATA || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                    L_STRINGDATA := L_STRINGDATA || '<$DESCRIPTION>' || '|'; --DESCRIPTION
                    L_STRINGDATA := L_STRINGDATA || REC.ACCTNO || '|'; --AFACCTNO
                    L_STRINGDATA := L_STRINGDATA || 'R' || '|'; --DTYPE
                    L_STRINGDATA := L_STRINGDATA || L_SYMBOL || '|'; --SYMBOL
                    L_STRINGDATA := L_STRINGDATA || DFRLS_REC.CODEID || '|'; --CODEID
                    L_STRINGDATA := L_STRINGDATA || L_DFQTTY || '|'; --QTTY
                    L_STRINGDATA := L_STRINGDATA || L_DFPRICE || '|'; --DFPRICE
                    L_STRINGDATA := L_STRINGDATA || REC_BASKET.DFRATE_R || '|'; --DFRATE
                    L_STRINGDATA := L_STRINGDATA || L_ITEMEXECRLSAMOUNT || '|'; --AMT
                    L_STRINGDATA := L_STRINGDATA || '<$GROUPID>' || '|'; --GROUPID
                    L_STRINGDATA := L_STRINGDATA || '1' || '|'; --AUTODRAWNDOWN
                    L_STRINGDATA := L_STRINGDATA || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                    L_STRINGDATA := L_STRINGDATA || REC.ACCTNO || '|'; --AFACCTNODRD
                    L_STRINGDATA := L_STRINGDATA || L_REFDEAL; --REF
                    L_STRINGDATA := L_STRINGDATA || '$'; --$

                    L_TOTALRECVQTTY := L_TOTALRECVQTTY - L_DFQTTY;
                  END IF;

                END IF;

                EXIT WHEN L_TOTALRECVQTTY <= 0 OR L_RLSAMOUNT - L_EXECRLSAMOUNT <= 0 OR L_AVLCFLIMIT <= 0;
              END LOOP;
            END IF;
            EXIT WHEN L_RLSAMOUNT - L_EXECRLSAMOUNT <= 0 OR L_AVLCFLIMIT <= 0;

          END LOOP;
          PLOG.DEBUG(PKGCTX,
                     'l_RlsAmount - l_ExecRlsAmount:' ||
                     TO_NUMBER(L_RLSAMOUNT - L_EXECRLSAMOUNT));
          PLOG.DEBUG(PKGCTX, 'l_avlcflimit:' || L_AVLCFLIMIT);

          EXIT WHEN L_RLSAMOUNT - L_EXECRLSAMOUNT <= 0 OR L_AVLCFLIMIT <= 0;
        END LOOP;

        PLOG.DEBUG(PKGCTX,
                   'Before Execute l_ExecRlsAmount:' || L_EXECRLSAMOUNT);

        IF L_EXECRLSAMOUNT > 0 THEN

          L_DESC := L_ORGDESC;
          -- Gen DGGROUPID:
          SELECT SYSTEMNUMS.C_HO_HOID || TO_CHAR(L_CURRDATE, 'DDMMYY') ||
                 LPAD(SEQ_DFMAST.NEXTVAL, 6, '0')
            INTO L_DFGROUPID
            FROM DUAL;

          L_STRINGDATA := REPLACE(L_STRINGDATA,
                                  '<$ORGAMT>',
                                  TO_CHAR(L_EXECRLSAMOUNT));
          L_STRINGDATA := REPLACE(L_STRINGDATA,
                                  '<$TXTIME>',
                                  TO_CHAR(SYSDATE, 'HH24:MI:SS'));
          L_STRINGDATA := REPLACE(L_STRINGDATA,
                                  '<$TXDATE>',
                                  TO_CHAR(L_CURRDATE, 'DD/MM/RRRR'));
          L_STRINGDATA := REPLACE(L_STRINGDATA, '<$TXNUM>', '9900000000'); -- fixed tam thoi. Trong qua trinh sinh giao dich se gen lai.
          L_STRINGDATA := REPLACE(L_STRINGDATA,
                                  '<$MAKER>',
                                  SYSTEMNUMS.C_SYSTEM_USERID);
          L_STRINGDATA := REPLACE(L_STRINGDATA, '<$GROUPID>', L_DFGROUPID);
          L_STRINGDATA := REPLACE(L_STRINGDATA, '<$DESCRIPTION>', L_DESC);

          --set txnum
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

          --Set cac field giao dich
            --88   C   So tieu khoan
          L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
          L_TXMSG.TXFIELDS('88').TYPE := 'C';
          L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
          --03   C   So tieu khoan
          L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;

          --06   C   Chuoi du lieu
          L_TXMSG.TXFIELDS('06').DEFNAME := 'STRDATA';
          L_TXMSG.TXFIELDS('06').TYPE := 'C';
          L_TXMSG.TXFIELDS('06').VALUE := L_STRINGDATA;

          --10   N   So tien giai ngan
          L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := L_EXECRLSAMOUNT;

          --20   C   Tieu khoan DFGROUP
          L_TXMSG.TXFIELDS('20').DEFNAME := 'GROUPID';
          L_TXMSG.TXFIELDS('20').TYPE := 'C';
          L_TXMSG.TXFIELDS('20').VALUE := L_DFGROUPID;

          --21   C   Loai hinh DF
          L_TXMSG.TXFIELDS('21').DEFNAME := 'DFTYPE';
          L_TXMSG.TXFIELDS('21').TYPE := 'C';
          L_TXMSG.TXFIELDS('21').VALUE := REC_DFTYPE.ACTYPE;

                --90   C   ten kh
          L_TXMSG.TXFIELDS('90').DEFNAME := 'FULLNAME';
          L_TXMSG.TXFIELDS('90').TYPE := 'C';
          L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

          --30   C   Dien Giai
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := L_DESC;


          BEGIN
            IF TXPKS_#2676.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 2676: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;
          L_RLSAMOUNT := L_RLSAMOUNT - L_EXECRLSAMOUNT;
        END IF;

        PLOG.DEBUG(PKGCTX, 'After Execute l_RlsAmount:' || L_RLSAMOUNT);

        EXIT WHEN L_RLSAMOUNT <= 0;
      END LOOP;

    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_DFAutoMarginLoanDrawnDown');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'pr_DFAutoMarginLoanDrawnDown');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_DFAUTOMARGINLOANDRAWNDOWN;

  ---------------------------------pr_rmUnholdAccount------------------------------------------------
  PROCEDURE PR_RMUNHOLDACCOUNT(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG     TX.MSG_RECTYPE;
    L_CURRDATE  VARCHAR2(20);
    L_ERR_PARAM VARCHAR2(300);
    L_BEGINDATE VARCHAR2(10);
    L_TRFAMT    NUMBER(20, 0);
    L_UNHOLDAMT NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmUnholdAccount');

/*    FOR REC IN (SELECT AF.ACCTNO
                  FROM AFMAST AF, CIMAST CI
                 WHERE AF.ACCTNO = CI.ACCTNO
                   AND AF.COREBANK = 'Y'
                   AND CI.HOLDBALANCE > 0
                   AND GETBALDEFOVD(AF.ACCTNO) > 0) LOOP
      -- rec
      CSPKS_RMPROC.PR_RM_UNHOLDACCOUNT(REC.ACCTNO, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmUnholdAccount');
        RETURN;
      END IF;
    END LOOP; -- rec*/
    --12/01/2017, NamTv Add, BMS thuc hien UnHold khi huy/sua lenh cuoi ngay
    FOR REC IN (SELECT AF.ACCTNO
                  FROM AFMAST AF, CIMAST CI
                 WHERE AF.ACCTNO = CI.ACCTNO
                   AND AF.ALTERNATEACCT='Y'
                   AND CI.HOLDBALANCE > 0
                   AND GETBALDEFOVD(AF.ACCTNO) > 0) LOOP
      -- rec
      CSPKS_RMPROC.PR_RM_UNHOLDACCOUNTEOD(REC.ACCTNO, P_ERR_CODE);
      IF P_ERR_CODE <> 0 THEN
        PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmUnholdAccount');
        RETURN;
      END IF;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmUnholdAccount');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmUnholdAccount');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMUNHOLDACCOUNT;
  ---------------------------------pr_rmSUBBAMTTRF------------------------------------------------
  PROCEDURE PR_RMSUBBAMTTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG     TX.MSG_RECTYPE;
    L_CURRDATE  VARCHAR2(20);
    L_ERR_PARAM VARCHAR2(300);
    L_BEGINDATE VARCHAR2(10);
    L_TRFAMT    NUMBER(20, 0);
    L_UNHOLDAMT NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSUBBAMTTRF');
    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT VARVALUE
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT GETAVLPP(AF.ACCTNO) - AF.ADVANCELINE PP,
                       CI.BALANCE - CI.OVAMT - CI.DUEAMT - CI.DFDEBTAMT -
                       CI.DFINTDEBTAMT - RAMT - CI.DEPOFEEAMT -
                       NVL(TRF.TRFINDAY, 0) REMAINDAYTRF,
                       CI.HOLDBALANCE,
                       CRA.TRFCODE TRFTYPE,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AF.ACCTNO AFACCTNO,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       AF.BANKNAME BANKCODE,
                       AF.BANKNAME || ':' || CRB.BANKNAME BANKNAME,
                       AF.CAREBY,
                       0 BANKAVAIL,
                       CI.HOLDBALANCE BANKHOLDED,
                       GETAVLPP(AF.ACCTNO) AVLRELEASE,
                       CI.HOLDBALANCE HOLDAMT
                  FROM CIMAST     CI,
                       AFMAST     AF,
                       CFMAST     CF,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB,
                       --(select * from vw_gettrfbuyamt_byDay) trf
                       (SELECT MST.AFACCTNO,
                               --SUM(MST.AMT + OD.FEEACR) TRFINDAY
                               SUM(MST.AMT - OD.Netexecamt - OD.Cfnetexecamt + OD.FEEACR) TRFINDAY -- HSX04
                          FROM STSCHD MST, SBSECURITIES SEC, ODMAST OD
                         WHERE MST.CODEID = SEC.CODEID
                           AND SEC.TRADEPLACE <> '003'
                           AND MST.DUETYPE = 'SM'
                           AND MST.STATUS = 'N'
                           AND MST.DELTD <> 'Y'
                           AND MST.ORGORDERID = OD.ORDERID
                           AND MST.CLEARDATE <= GETCURRDATE
                         GROUP BY MST.AFACCTNO) TRF
                 WHERE CI.ACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.COREBANK = 'N'
                   AND AF.ALTERNATEACCT = 'Y'
                   AND CI.HOLDBALANCE > 0
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFCICAMT'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND AF.ACCTNO = TRF.AFACCTNO(+)) LOOP
      -- rec
      BEGIN
        PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);

        IF REC.PP >= REC.HOLDBALANCE THEN
        plog.error('TR ');
          L_UNHOLDAMT := GREATEST(LEAST(REC.HOLDBALANCE, REC.REMAINDAYTRF),
                                  0);
        plog.error('TR '||L_UNHOLDAMT);
          L_TRFAMT    := REC.HOLDBALANCE - L_UNHOLDAMT;
        ELSE
          --l_trfamt:= least(rec.holdbalance-rec.pp,rec.holdbalance);
          --l_unholdamt:=rec.holdbalance-l_trfamt;
          L_UNHOLDAMT := GREATEST(LEAST(REC.PP, REC.REMAINDAYTRF), 0);
        plog.error('TR1 '||L_UNHOLDAMT);
          L_TRFAMT    := REC.HOLDBALANCE - L_UNHOLDAMT;
        END IF;
        --Chuyen bang ke Ho tro thanh toan tien cho tai khoan chinh
        IF L_TRFAMT > 0 THEN
          L_TXMSG.TLTXCD := '6668';

          --set txnum
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

          --Set cac field giao dich
          --06   C   TRFTYPE
          L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
          L_TXMSG.TXFIELDS('06').TYPE := 'C';
          L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;
          --88  CUSTODYCD
          L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
          L_TXMSG.TXFIELDS('88').TYPE := 'C';
          L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;
          --03  SECACCOUNT
          L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

          --90  CUSTNAME
          L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
          L_TXMSG.TXFIELDS('90').TYPE := 'C';
          L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

          --91  ADDRESS
          L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
          L_TXMSG.TXFIELDS('91').TYPE := 'C';
          L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

          --92  LICENSE
          L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
          L_TXMSG.TXFIELDS('92').TYPE := 'C';
          L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

          --93  BANKACCTNO
          L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
          L_TXMSG.TXFIELDS('93').TYPE := 'C';
          L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

          --05  DESACCTNO
          L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
          L_TXMSG.TXFIELDS('05').TYPE := 'C';
          L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

          --07  DESACCTNAME
          L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
          L_TXMSG.TXFIELDS('07').TYPE := 'C';
          L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

          --94  BANKNAME
          L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
          L_TXMSG.TXFIELDS('94').TYPE := 'C';
          L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

          --95  BANKQUE
          L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
          L_TXMSG.TXFIELDS('95').TYPE := 'C';
          L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

          --10  AMOUNT
          L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := L_TRFAMT;

          --02  CATXNUM
          L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
          L_TXMSG.TXFIELDS('02').TYPE := 'C';
          L_TXMSG.TXFIELDS('02').VALUE := REC.AFACCTNO;

          --30   C   DESC
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6668 || REC.CUSTODYCD || UTF8NUMS.C_CONST_TLTX_TXDESC_6668_1;

          BEGIN
            IF TXPKS_#6668.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 6668: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;
        END IF;
        --Goi giao dich thuc hien Unhold phan con du
        IF L_UNHOLDAMT > 0 THEN
          L_TXMSG.TLTXCD := '6600';
          --set txnum
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

          L_TXMSG.TXFIELDS('88').DEFNAME := 'CUSTODYCD';
          L_TXMSG.TXFIELDS('88').TYPE := 'C';
          L_TXMSG.TXFIELDS('88').VALUE := REC.CUSTODYCD;

          L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

          L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
          L_TXMSG.TXFIELDS('90').TYPE := 'C';
          L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

          L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
          L_TXMSG.TXFIELDS('91').TYPE := 'C';
          L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

          L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
          L_TXMSG.TXFIELDS('92').TYPE := 'C';
          L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

          L_TXMSG.TXFIELDS('97').DEFNAME := 'CAREBY';
          L_TXMSG.TXFIELDS('97').TYPE := 'C';
          L_TXMSG.TXFIELDS('97').VALUE := REC.CAREBY;

          L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCT';
          L_TXMSG.TXFIELDS('93').TYPE := 'C';
          L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

          L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKNAME';
          L_TXMSG.TXFIELDS('95').TYPE := 'C';
          L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

          L_TXMSG.TXFIELDS('11').DEFNAME := 'BANKAVAIL';
          L_TXMSG.TXFIELDS('11').TYPE := 'N';
          L_TXMSG.TXFIELDS('11').VALUE := REC.BANKAVAIL;

          L_TXMSG.TXFIELDS('12').DEFNAME := 'BANKHOLDED';
          L_TXMSG.TXFIELDS('12').TYPE := 'N';
          L_TXMSG.TXFIELDS('12').VALUE := REC.BANKHOLDED;

          L_TXMSG.TXFIELDS('13').DEFNAME := 'AVLRELEASE';
          L_TXMSG.TXFIELDS('13').TYPE := 'N';
          L_TXMSG.TXFIELDS('13').VALUE := REC.AVLRELEASE;

          L_TXMSG.TXFIELDS('96').DEFNAME := 'HOLDAMT';
          L_TXMSG.TXFIELDS('96').TYPE := 'N';
          L_TXMSG.TXFIELDS('96').VALUE := REC.HOLDAMT;

          L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := L_UNHOLDAMT;

          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := 'Unhold tien ho tro suc mua tai khoan chinh';

          BEGIN
            IF TXPKS_#6600.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
               plog.error('TR '|| L_UNHOLDAMT ||' ' || REC.CUSTODYCD);
              PLOG.DEBUG(PKGCTX, 'got error 6600: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmSUBBAMTTRF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSUBBAMTTRF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSUBBAMTTRF;

  ---------------------------------pr_rmSUBReleaseBalance------------------------------------------------
  PROCEDURE PR_RMSUBRELEASEBALANCE(P_BCHMDL   VARCHAR,
                                   P_ERR_CODE OUT VARCHAR2) IS
    L_ERR_PARAM VARCHAR2(300);
    L_BEGINDATE VARCHAR2(10);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSUBReleaseBalance');
    --Lay ra toan bo danh sach cac tieu khoan co tai khoan phu ngan hang de chuyen het tien du sang ngan hang
    --Lay theo so tien duoc rut tru di khoan tien cho ve duoc rut.
    FOR REC IN (SELECT AF.ACCTNO
                  FROM AFMAST AF,
                       CIMAST CI,
                       (SELECT SUM(DEPOAMT) AVLADVANCE, AFACCTNO
                          FROM V_GETACCOUNTAVLADVANCE
                         GROUP BY AFACCTNO) ADV,
                       (SELECT * FROM VW_GETTRFBUYAMT_BYDAY) TRF
                 WHERE AF.COREBANK = 'N'
                   AND AF.ALTERNATEACCT = 'Y'
                   AND AF.AUTOTRF = 'Y' --Cho cho chuyen voi tai khoan co dang ky chuyen tu dong. Neu khong dang ky muon chuyen phai dung giao dich chuyen tien
                   AND AF.ACCTNO = CI.ACCTNO
                   AND LEAST(GETBALDEFOVD(AF.ACCTNO),
                             CI.BALANCE - CI.OVAMT - CI.DUEAMT - CI.DFDEBTAMT -
                             CI.DFINTDEBTAMT - RAMT - CI.DEPOFEEAMT -
                             NVL(TRF.TRFBUY_T3, 0)) > 0
                   AND AF.STATUS <> 'C'
                   AND AF.ACCTNO = ADV.AFACCTNO(+)
                   AND AF.ACCTNO = TRF.AFACCTNO(+)) LOOP
      -- rec
      PLOG.ERROR(PKGCTX, 'NAMTV PR_RMSUBRELEASEBALANCE lan 1'||REC.ACCTNO);
      CSPKS_RMPROC.PR_RMSUBRELEASEBALANCE(REC.ACCTNO,
                                          1000000000000,
                                          P_BCHMDL,
                                          P_ERR_CODE);
      IF P_ERR_CODE <> '0' THEN
        PLOG.SETENDSECTION(PKGCTX, 'pr_rmSUBReleaseBalance');
        ROLLBACK;
        RETURN;
      END IF;
    END LOOP; -- rec
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmSUBReleaseBalance');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSUBReleaseBalance');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSUBRELEASEBALANCE;

  ---------------------------------pr_rmBAMTTRF------------------------------------------------
  PROCEDURE PR_RMBAMTTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmBAMTTRF');
    L_TLTX := '6663';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT OD.TXDATE,
                       CRA.TRFCODE TRFTYPE,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AF.ACCTNO AFACCTNO,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       AF.BANKNAME BANKCODE,
                       AF.BANKNAME || ':' || CRB.BANKNAME BANKNAME,
                       CEIL(OD.AMT) AMOUNT
                  FROM (SELECT OD.AFACCTNO,
                               TO_CHAR(OD.TXDATE, 'DD/MM/RRRR') TXDATE,
                               --SUM(AMT) AMT
                               SUM(OD.EXECAMT - OD.NETEXECAMT - OD.CFNETEXECAMT) AMT -- HSX04
                          FROM STSCHD ST, ODMAST OD
                         WHERE ST.ORGORDERID = OD.ORDERID
                           AND ST.DELTD = 'N'
                           AND ST.DUETYPE IN ('SM')
                           --AND AMT > 0
                           AND OD.EXECAMT - OD.NETEXECAMT - OD.CFNETEXECAMT > 0 -- HSX04
                           AND ST.CLEARDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                         GROUP BY OD.AFACCTNO, OD.TXDATE) OD,
                       AFMAST AF,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB,
                       CIMAST CI,
                       CFMAST CF
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND CI.COREBANK = 'Y'
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFODBUY'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFODBUY'
                           AND REQ.OBJNAME = L_TLTX
                           AND (REQ.TXDATE =
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                               (REQ.STATUS NOT IN ('E') AND
                               REQ.TXDATE <
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))
                           AND REQ.REFCODE = OD.TXDATE || OD.AFACCTNO)) LOOP
      -- rec
      BEGIN
        PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);

        --set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
        L_TXMSG.TXFIELDS('06').TYPE := 'C';
        L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

        --03  SECACCOUNT
        L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

        --90  CUSTNAME
        L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('90').TYPE := 'C';
        L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

        --91  ADDRESS
        L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
        L_TXMSG.TXFIELDS('91').TYPE := 'C';
        L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

        --92  LICENSE
        L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
        L_TXMSG.TXFIELDS('92').TYPE := 'C';
        L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

        --93  BANKACCTNO
        L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
        L_TXMSG.TXFIELDS('93').TYPE := 'C';
        L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

        --05  DESACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

        --07  DESACCTNAME
        L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

        --94  BANKNAME
        L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
        L_TXMSG.TXFIELDS('94').TYPE := 'C';
        L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

        --95  BANKQUE
        L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
        L_TXMSG.TXFIELDS('95').TYPE := 'C';
        L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

        --10  AMOUNT
        L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

        --04  ORDERID
        L_TXMSG.TXFIELDS('04').DEFNAME := 'ORDERID';
        L_TXMSG.TXFIELDS('04').TYPE := 'C';
        L_TXMSG.TXFIELDS('04').VALUE := REC.TXDATE || REC.AFACCTNO;

        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DESC ||
                                        REC.CUSTODYCD ||
                                        UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                        REC.TXDATE;

        BEGIN
          IF TXPKS_#6663.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 6663: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmBAMTTRF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmBAMTTRF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMBAMTTRF;

  PROCEDURE PR_RMBFEETRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmBFEETRF');
    L_TLTX := '6664';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;

    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT CIT.TXDATE,CRA.TRFCODE TRFTYPE,
                CIT.REF ORDERID,SB.SYMBOL,OD.EXECQTTY,CF.CUSTODYCD,CF.FULLNAME, CF.ADDRESS,CF.IDCODE LICENSE,CIT.ACCTNO  AFACCTNO, AF.ACCTNO||OD.CODEID SEACCTNO,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,AF.BANKNAME BANKCODE,
                AF.BANKNAME || ':' || CRB.BANKNAME BANKNAME,
                CEIL(CIT.NAMT) AMOUNT
                FROM (
                            SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT
                FROM CITRAN
                            WHERE DELTD='N' AND TLTXCD='8855' AND TXCD='0011'
                            AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
                            UNION ALL
                            SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT
                FROM CITRANA
                            WHERE DELTD='N' AND TLTXCD='8855' AND TXCD='0011'
                            AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
                        ) CIT, (
                            SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMAST
                            WHERE DELTD='N' AND EXECTYPE IN ('NB','BC')
                            UNION ALL
                            SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMASTHIST
                            WHERE DELTD='N' AND EXECTYPE IN ('NB','BC')
                            AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
                        ) OD,SECURITIES_INFO SB,AFMAST AF,CRBDEFACCT CRA,
                  CRBDEFBANK CRB, CIMAST CI,CFMAST CF
                        WHERE CIT.ACCTNO=AF.ACCTNO AND CI.AFACCTNO=AF.ACCTNO
                  AND CI.COREBANK='Y'
                        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODBFEE'
                        AND AF.BANKNAME=CRB.BANKCODE AND TRUNC(CIT.REF)=OD.ORDERID
                  AND AF.CUSTID=CF.CUSTID
                        AND OD.CODEID=SB.CODEID AND CIT.NAMT>0
                  AND NOT EXISTS (
                             SELECT REQ.REFCODE FROM CRBTXREQ REQ
                             WHERE REQ.TRFCODE='TRFODBFEE' AND REQ.OBJNAME=l_tltx
                             AND (
                                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR') OR
                (REQ.STATUS NOT IN ('E') AND
                REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                                 )
                             AND TRUNC(REQ.REFCODE)=TRUNC(CIT.REF)
                             AND REQ.TXDATE = CIT.TXDATE -- HSX04: Phi tra cham co the tra vao T0
                        )
                  ORDER BY CIT.TXDATE DESC,CIT.TXNUM DESC) LOOP
      -- rec
      BEGIN
        PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        /*IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
            BEGIN
                SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
                INTO l_orgreqid,l_orgtxnum,l_orgdate
                FROM CRBTXREQ
                WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

                cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

                UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                    --RAISE errnums.E_SYSTEM_ERROR;
                WHEN OTHERS THEN
                    plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
            END;
        END IF;*/

        --set txnum
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
        L_TXMSG.TXFIELDS('06').TYPE := 'C';
        L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

        --03  SECACCOUNT
        L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

        --90  CUSTNAME
        L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
        L_TXMSG.TXFIELDS('90').TYPE := 'C';
        L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

        --91  ADDRESS
        L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
        L_TXMSG.TXFIELDS('91').TYPE := 'C';
        L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

        --92  LICENSE
        L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
        L_TXMSG.TXFIELDS('92').TYPE := 'C';
        L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

        --93  BANKACCTNO
        L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
        L_TXMSG.TXFIELDS('93').TYPE := 'C';
        L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

        --05  DESACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

        --07  DESACCTNAME
        L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

        --94  BANKNAME
        L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
        L_TXMSG.TXFIELDS('94').TYPE := 'C';
        L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

        --95  BANKQUE
        L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
        L_TXMSG.TXFIELDS('95').TYPE := 'C';
        L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

        --10  AMOUNT
        L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

        --04  ORDERID
        L_TXMSG.TXFIELDS('04').DEFNAME := 'ORDERID';
        L_TXMSG.TXFIELDS('04').TYPE := 'C';
        L_TXMSG.TXFIELDS('04').VALUE := REC.TXDATE || REC.AFACCTNO;

        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6664 ||
                                        REC.CUSTODYCD ||
                                        UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                        REC.TXDATE;

        P_ERR_CODE := 0;
        BEGIN
          IF TXPKS_#6664.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.ERROR(PKGCTX, 'got error 6664: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END;
    END LOOP; -- rec
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmBFEETRF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmBFEETRF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMBFEETRF;

  /* PROCEDURE pr_rmSAMTTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  varchar2(100);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSAMTTRF');
    l_tltx:='6665';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,
        SB.SYMBOL,OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.EXECAMT) AMOUNT
        FROM (
            SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            UNION
            SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSELL'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS ( --Loai bo nhung ban ke cua ngay hom nay va nhung ban ke thanh cong cua cac ngay hom truoc
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSELL' AND REQ.OBJNAME=l_tltx
            AND (
                REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;

        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6665 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;

        BEGIN
            IF txpks_#6665.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 6665: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSAMTTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSAMTTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSAMTTRF;*/

  PROCEDURE PR_RMSAMTTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   VARCHAR2(100);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSAMTTRF');
    L_TLTX := '6665';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT OD.TXDATE, OD.CLEARDATE DUEDATE, CRA.TRFCODE TRFTYPE, OD.AFACCTNO,
                       CF.CUSTODYCD, CF.FULLNAME, CF.ADDRESS, CF.IDCODE LICENSE,
                       AF.BANKACCTNO, CRB.BANKCODE, CRB.BANKCODE || ':' || CRB.BANKNAME BANKNAME,
                       CRA.REFACCTNO DESACCTNO, CRA.REFACCTNAME DESACCTNAME,
                       OD.EXECAMT, CEIL(AMOUNT) AMOUNT, NVL(OD.AAMT, 0) AAMT
                FROM
                (  SELECT OD.TXDATE, OD.AFACCTNO, OD.CLEARDATE, SUM(NVL(AD.AAMT, 0)) AAMT,
                          --SUM(OD.EXECAMT - OD.NETEXECAMT- OD.CFNETEXECAMT) EXECAMT,
                          SUM(GREATEST(OD.EXECAMT - OD.NETEXECAMT - OD.CFNETEXECAMT,0)) EXECAMT, --HSX04
                          SUM(GREATEST(OD.EXECAMT - OD.NETEXECAMT - OD.CFNETEXECAMT - NVL(AD.AAMT, 0), 0)) AMOUNT
                   FROM
                   (  SELECT OD.*, STS.CLEARDATE FROM STSCHD STS, ODMAST OD
                      WHERE OD.ORDERID = STS.ORGORDERID
                        AND STS.CLEARDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR')
                        AND STS.DUETYPE = 'RM'
                        AND STS.DELTD <> 'Y'
                        AND OD.EXECAMT - OD.NETEXECAMT - OD.CFNETEXECAMT > 0 -- HSX04
                        AND NOT EXISTS
                        (  SELECT REQ.REFCODE FROM CRBTXREQ REQ
                           WHERE REQ.TRFCODE = 'TRFODSELL'
                             AND REQ.OBJNAME = '6665'
                             AND (REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                                 (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))
                             AND TRUNC(REQ.REFCODE) = TRUNC(OD.ORDERID))
                    ) OD,
                    (  SELECT DTL.ORDERID, SUM(AAMT) AAMT
                       FROM ADSCHD AD, ADSCHDDTL DTL
                       WHERE AD.TXNUM = DTL.TXNUM
                         AND AD.TXDATE = DTL.TXDATE
                         AND AD.DELTD <> 'Y'
                         AND DTL.DELTD <> 'Y'
                       GROUP BY DTL.ORDERID
                    ) AD
                    WHERE OD.ORDERID = AD.ORDERID(+)
                    GROUP BY OD.AFACCTNO, OD.CLEARDATE, OD.TXDATE
                ) OD, AFMAST AF, CFMAST CF, CIMAST CI, CRBDEFACCT CRA, CRBDEFBANK CRB
                WHERE OD.AFACCTNO = AF.ACCTNO
                  AND AF.CUSTID = CF.CUSTID
                  AND AF.BANKNAME = CRB.BANKCODE
                  AND AF.BANKNAME = CRA.REFBANK
                  AND CRA.TRFCODE = 'TRFODSELL'
                  AND AF.ACCTNO = CI.AFACCTNO
                  AND CI.COREBANK = 'Y'
                  AND NOT EXISTS
                  (  SELECT REQ.REFCODE FROM CRBTXREQ REQ
                     WHERE REQ.TRFCODE = 'TRFODSELL'
                       AND REQ.OBJNAME = '6665'
                       AND (REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                           (REQ.STATUS NOT IN ('E') AND
                           REQ.TXDATE < TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))
                       AND TRUNC(REQ.REFCODE) = TRUNC(TO_CHAR(OD.TXDATE, 'DDMMRRRR') || TO_CHAR(OD.CLEARDATE, 'DDMMRRRR') || OD.AFACCTNO)
                       AND REQ.TXDATE = OD.CLEARDATE -- HSX04: Check them DK ngay thanh toan
                )) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);

      --Neu la order cua ngay hom truoc,
      --thi phai revert lai giao dich CI truoc do
      /*IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
       BEGIN
           SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
           INTO l_orgreqid,l_orgtxnum,l_orgdate
           FROM CRBTXREQ
           WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

           cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

           UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
               plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
               --RAISE errnums.E_SYSTEM_ERROR;
           WHEN OTHERS THEN
               plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
       END;
      END IF;*/

      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --08   C   DUEDATE
      L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := TO_DATE(REC.DUEDATE,
                                              SYSTEMNUMS.C_DATE_FORMAT);

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMOUNT);

      --04  ORDERID
      L_TXMSG.TXFIELDS('04').DEFNAME := 'ORDERID';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --11  TXNUM
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TXNUM';
      L_TXMSG.TXFIELDS('11').TYPE := 'C';
      L_TXMSG.TXFIELDS('11').VALUE := '';

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      --l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6665 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999')) || ' ' || utf8nums.c_const_TLTX_TXDESC_6665_aamt || trim(to_char(round(rec.aamt),'999,999,999,999,999,999,999'))
      --                                 || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6665 ||
                                      REC.CUSTODYCD ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                      REC.DUEDATE;

      BEGIN
        IF TXPKS_#6665.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6665: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmSAMTTRF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSAMTTRF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSAMTTRF;

  /*PROCEDURE pr_rmSFEETRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFEETRF');
    l_tltx:='6666';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.FEEACR) AMOUNT
        FROM (
            SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            UNION
            SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSFEE'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y' AND OD.FEEACR>0
        AND NOT EXISTS (
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSFEE' AND REQ.OBJNAME=l_tltx
            AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6666 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;

        BEGIN
            IF txpks_#6666.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 6666: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFEETRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFEETRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFEETRF;*/

  PROCEDURE PR_RMSFEETRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSFEETRF');
    L_TLTX := '6666';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT OD.TXNUM,OD.TXDATE,od.cleardate DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
                    OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
                    CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,OD.AMOUNT
                    FROM (
                         select od.*, sts.cleardate, ceil(od.feeacr - ceil((OD.NETEXECAMT+OD.CFNETEXECAMT)*od.feeacr/od.execamt)) amount
                         from stschd sts, odmast od
                         where od.orderid = sts.orgorderid
                            and sts.cleardate = TO_DATE(l_begindate,'DD/MM/RRRR') and sts.duetype ='RM' and sts.deltd <> 'Y'
                            and od.execamt>0
                            and ceil(od.feeacr - ceil((OD.NETEXECAMT+OD.CFNETEXECAMT)*od.feeacr/od.execamt)) > 0 -- HSX04: Xuat bang ke phan phi con lai
                    ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
                    WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
                    AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSFEE'
                    AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
                    AND NOT EXISTS (
                        SELECT REQ.REFCODE FROM CRBTXREQ REQ
                        WHERE REQ.TRFCODE='TRFODSFEE' AND REQ.OBJNAME=l_tltx
                        /*AND (
                             REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                             OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                            )*/
                        AND REQ.TXDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR') --HSX04
                        AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
                        AND REQ.TXDATE = OD.CLEARDATE -- HSX04: Check them DK ngay thanh toan
                    )) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);

      --Neu la order cua ngay hom truoc,
      --thi phai revert lai giao dich CI truoc do
      /*IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
       BEGIN
           SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
           INTO l_orgreqid,l_orgtxnum,l_orgdate
           FROM CRBTXREQ
           WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

           cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

           UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
               plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
               --RAISE errnums.E_SYSTEM_ERROR;
           WHEN OTHERS THEN
               plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
       END;
      END IF;*/
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --08   C   DUEDATE
      L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := TO_DATE(REC.DUEDATE,
                                              SYSTEMNUMS.C_DATE_FORMAT);

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --04  ORDERID
      L_TXMSG.TXFIELDS('04').DEFNAME := 'ORDERID';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --11  TXNUM
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TXNUM';
      L_TXMSG.TXFIELDS('11').TYPE := 'C';
      L_TXMSG.TXFIELDS('11').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6666 ||
                                      REC.CUSTODYCD ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                      REC.DUEDATE;

      BEGIN
        IF TXPKS_#6666.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6666: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmSFEETRF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSFEETRF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSFEETRF;

  PROCEDURE PR_RMSPAIDADV(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSPAIDADV');
    L_TLTX := '6667';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --TRFADPAID
    FOR REC IN (SELECT OD.CLEARDATE DUEDATE,
                       CRA.TRFCODE TRFTYPE,
                       OD.AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AF.BANKACCTNO,
                       CRB.BANKCODE,
                       CRB.BANKCODE || ':' || CRB.BANKNAME BANKNAME,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CEIL(OD.AAMT) AMOUNT
                  FROM (SELECT OD.AFACCTNO,
                               TO_CHAR(OD.CLEARDATE, 'DD/MM/RRRR') CLEARDATE,
                               SUM(NVL(AD.AAMT, 0)) AAMT
                          FROM (SELECT OD.*, STS.CLEARDATE
                                  FROM STSCHD STS, ODMAST OD
                                 WHERE OD.ORDERID = STS.ORGORDERID
                                   AND STS.CLEARDATE =
                                       TO_DATE(L_BEGINDATE, 'DD/MM/RRRR')
                                   AND STS.DUETYPE = 'RM'
                                   AND STS.DELTD <> 'Y'
                                   AND OD.EXECAMT > 0) OD,
                               (SELECT DTL.ORDERID, SUM(AAMT) AAMT
                                  FROM ADSCHD AD, ADSCHDDTL DTL
                                 WHERE AD.TXNUM = DTL.TXNUM
                                   AND AD.TXDATE = DTL.TXDATE
                                   AND AD.DELTD <> 'Y'
                                   AND DTL.DELTD <> 'Y'
                                 GROUP BY DTL.ORDERID) AD
                         WHERE OD.ORDERID = AD.ORDERID(+)
                         GROUP BY OD.AFACCTNO, OD.CLEARDATE) OD,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFAUTOADPAID'
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND CI.COREBANK = 'Y'
                   AND OD.AAMT > 0
                   AND NOT EXISTS
                 ( --Loai bo nhung ban ke cua ngay hom nay va nhung ban ke thanh cong cua cac ngay hom truoc
                        SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFAUTOADPAID'
                           AND REQ.OBJNAME = '6667'
                           AND (REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                               (REQ.STATUS NOT IN ('E') AND
                               REQ.TXDATE <
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))
                           AND REQ.REFCODE = OD.CLEARDATE || OD.AFACCTNO)

                ) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);

      --Neu la order cua ngay hom truoc,
      --thi phai revert lai giao dich CI truoc do
      /*IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
       BEGIN
           SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
           INTO l_orgreqid,l_orgtxnum,l_orgdate
           FROM CRBTXREQ
           WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

           cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

           UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
               plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
               --RAISE errnums.E_SYSTEM_ERROR;
           WHEN OTHERS THEN
               plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
       END;
      END IF;*/
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --08   C   DUEDATE
      L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := TO_DATE(REC.DUEDATE,
                                              SYSTEMNUMS.C_DATE_FORMAT);

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --04  ORDERID
      L_TXMSG.TXFIELDS('04').DEFNAME := 'ORDERID';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --11  TXNUM
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TXNUM';
      L_TXMSG.TXFIELDS('11').TYPE := 'C';
      L_TXMSG.TXFIELDS('11').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6667 ||
                                      REC.CUSTODYCD ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                      REC.DUEDATE;

      BEGIN
        IF TXPKS_#6667.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6667: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmSPAIDADV');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSPAIDADV');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSPAIDADV;

  /*PROCEDURE pr_rmSFDTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFDTRF');
    l_tltx:='6682';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT '0' DTTYPE,OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.TAXSELLAMT) AMOUNT
        FROM (
           SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0 AND TAXSELLAMT >0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
           UNION
           SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0 AND TAXSELLAMT>0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODTAX'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODTAX'
            AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS IN ('P','A','S','C') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
           AND TRUNC(REQ.REFCODE)=TRUNC(OD.TXNUM)
        )
        UNION ALL
        SELECT '1' DTTYPE,OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(CHD.ARIGHT) AMOUNT
        FROM (
           SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0 AND TAXSELLAMT >0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
           UNION
           SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0 AND TAXSELLAMT>0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,(
            SELECT * FROM STSCHD WHERE DUETYPE='RM' AND DELTD='N' AND ARIGHT>0
            UNION ALL
            SELECT * FROM STSCHDHIST WHERE DUETYPE='RM' AND DELTD='N' AND ARIGHT>0
            AND TXDATE>TO_DATE(l_begindate,'DD/MM/RRRR')
        ) CHD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND OD.AFACCTNO||OD.CODEID=CHD.ACCTNO AND ORGORDERID=OD.ORDERID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODTAX'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODTAX'
            AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
           AND TRUNC(REQ.REFCODE)=TRUNC(OD.TXNUM)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;

        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --31  TXNUM
        l_txmsg.txfields ('31').defname   := 'ORGTXNUM';
        l_txmsg.txfields ('31').TYPE      := 'C';
        l_txmsg.txfields ('31').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        IF rec.DTTYPE='0' THEN
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6682_DIV || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;
        ELSE
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6682_RI || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;
        END IF;

        BEGIN
            IF txpks_#6682.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 6682: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFDTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFDTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFDTRF;*/

  PROCEDURE PR_RMSFDTRF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSFDTRF');
    L_TLTX := '6682';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT '0' DTTYPE,
                       OD.CLEARDATE DUEDATE,
                       CRA.TRFCODE TRFTYPE,
                       OD.AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AF.BANKACCTNO,
                       CRB.BANKCODE,
                       CRB.BANKCODE || ':' || CRB.BANKNAME BANKNAME,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CEIL(OD.TAXSELLAMT) AMOUNT
                  FROM (SELECT OD.AFACCTNO,
                               TO_CHAR(STS.CLEARDATE, 'DD/MM/RRRR') CLEARDATE,
                               SUM(OD.TAXSELLAMT + STS.ARIGHT) TAXSELLAMT
                          FROM STSCHD STS, ODMAST OD
                         WHERE OD.ORDERID = STS.ORGORDERID
                           AND STS.CLEARDATE =
                               TO_DATE(L_BEGINDATE, 'DD/MM/RRRR')
                           AND STS.DUETYPE = 'RM'
                           AND STS.DELTD <> 'Y'
                           AND OD.EXECAMT > 0
                           -- HSX04: Xuat bang ke phan phi con lai
                           AND CEIL(STS.ARIGHT - CEIL((OD.NETEXECAMT+ OD.CFNETEXECAMT) * STS.ARIGHT / OD.EXECAMT)) > 0
                           AND OD.TAXSELLAMT + STS.ARIGHT > 0
                         GROUP BY OD.AFACCTNO, STS.CLEARDATE) OD,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFODTAX'
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND CI.COREBANK = 'Y'
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFODTAX'
                           /*AND (REQ.TXDATE =
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                               (REQ.STATUS IN ('P', 'A', 'S', 'C') AND
                               REQ.TXDATE <
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))*/
                           AND REQ.TXDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR') --HSX04
                           AND REQ.REFCODE = OD.CLEARDATE || OD.AFACCTNO)) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for order ID : ' || REC.AFACCTNO);

      --Neu la order cua ngay hom truoc,
      --thi phai revert lai giao dich CI truoc do
      /*IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
       BEGIN
           SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
           INTO l_orgreqid,l_orgtxnum,l_orgdate
           FROM CRBTXREQ
           WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

           cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

           UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
               plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
               --RAISE errnums.E_SYSTEM_ERROR;
           WHEN OTHERS THEN
               plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
       END;
      END IF;*/

      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --08   C   DUEDATE
      L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := TO_DATE(REC.DUEDATE,
                                              SYSTEMNUMS.C_DATE_FORMAT);

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --31  TXNUM
      L_TXMSG.TXFIELDS('31').DEFNAME := 'ORGTXNUM';
      L_TXMSG.TXFIELDS('31').TYPE := 'C';
      L_TXMSG.TXFIELDS('31').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6682_DIV ||
                                      REC.CUSTODYCD ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                      REC.DUEDATE;

      BEGIN
        IF TXPKS_#6682.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6682: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmSFDTRF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSFDTRF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSFDTRF;

  PROCEDURE PR_RMRMEXCA3384(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEXCA3384');
    L_TLTX := '6641';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       TLF.CVALUE CAMASTID,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(LOG.MSGAMT) AMOUNT,
                       'TRFCAREG' TRFTYPE,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       CRB.BANKCODE,
                       LOG.MSGACCT ACCTNO,
                       TLF1.CVALUE DEST,
                       TLF2.CVALUE SYMBOL,
                       TLF3.NVALUE EXPRICE,
                       TLF4.NVALUE EXQTTY
                  FROM TLLOG      LOG,
                       TLLOGFLD   TLF,
                       TLLOGFLD   TLF1,
                       TLLOGFLD   TLF2,
                       TLLOGFLD   TLF3,
                       TLLOGFLD   TLF4,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.TXNUM = TLF.TXNUM
                   AND LOG.TXDATE = TLF.TXDATE
                   AND TLF.FLDCD = '02'
                   AND LOG.TXNUM = TLF1.TXNUM
                   AND LOG.TXDATE = TLF1.TXDATE
                   AND TLF1.FLDCD = '30'
                   AND LOG.TXNUM = TLF2.TXNUM
                   AND LOG.TXDATE = TLF2.TXDATE
                   AND TLF2.FLDCD = '04'
                   AND LOG.TXNUM = TLF3.TXNUM
                   AND LOG.TXDATE = TLF3.TXDATE
                   AND TLF3.FLDCD = '05'
                   AND LOG.TXNUM = TLF4.TXNUM
                   AND LOG.TXDATE = TLF4.TXDATE
                   AND TLF4.FLDCD = '21'
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFCAREG'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.TLTXCD = '3384'
                   AND LOG.MSGAMT > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFCAREG'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                 ORDER BY LOG.AUTOID ASC) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := CEIL(REC.EXPRICE * REC.EXQTTY); -- rec.AMOUNT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      --l_txmsg.txfields ('30').VALUE := rec.DEST || ' , TK : ' || rec.CUSTODYCD;
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6641_3384 ||
                                      REC.SYMBOL || ' ,SL ' ||
                                      TRIM(TO_CHAR(REC.EXQTTY,
                                                   '999,999,999,999,999,999,999')) || ', ' ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6641_PRICE || ' ' ||
                                      TRIM(TO_CHAR(REC.EXPRICE,
                                                   '999,999,999,999,999,999,999')) ||
                                      ', TK ' || REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6641.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6641: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3384');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3384');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEXCA3384;

  PROCEDURE PR_RMRMEXCA3386(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEXCA3386');
    L_TLTX := '6643';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       CRA.TRFCODE TRFTYPE,
                       TLF.CVALUE CAMASTID,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(LOG.MSGAMT * TLF1.NVALUE) AMOUNT,
                       AF.BANKACCTNO BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CRB.BANKCODE,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       TLF2.CVALUE DEST,
                       TLF1.NVALUE EXPRICE,
                       TLF3.CVALUE SYMBOL,
                       TLF4.NVALUE EXQTTY
                  FROM TLLOG      LOG,
                       TLLOGFLD   TLF,
                       TLLOGFLD   TLF1,
                       TLLOGFLD   TLF2,
                       TLLOGFLD   TLF3,
                       TLLOGFLD   TLF4,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.TXNUM = TLF.TXNUM
                   AND LOG.TXDATE = TLF.TXDATE
                   AND TLF.FLDCD = '02'
                   AND LOG.TXNUM = TLF1.TXNUM
                   AND LOG.TXDATE = TLF1.TXDATE
                   AND TLF1.FLDCD = '05'
                   AND LOG.TXNUM = TLF2.TXNUM
                   AND LOG.TXDATE = TLF2.TXDATE
                   AND TLF2.FLDCD = '30'
                   AND LOG.TXNUM = TLF3.TXNUM
                   AND LOG.TXDATE = TLF3.TXDATE
                   AND TLF3.FLDCD = '04'
                   AND LOG.TXNUM = TLF4.TXNUM
                   AND LOG.TXDATE = TLF4.TXDATE
                   AND TLF4.FLDCD = '21'

                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFCAUNREG'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.TLTXCD = '3386'
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFCAUNREG'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                 ORDER BY LOG.AUTOID ASC) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      --l_txmsg.txfields ('30').VALUE := rec.DEST || ' , TK : ' || rec.CUSTODYCD;
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6643_3386 ||
                                      REC.SYMBOL || ' ,SL ' ||
                                      TRIM(TO_CHAR(REC.EXQTTY,
                                                   '999,999,999,999,999,999,999')) || ', ' ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6641_PRICE || ' ' ||
                                      TRIM(TO_CHAR(REC.EXPRICE,
                                                   '999,999,999,999,999,999,999')) ||
                                      ', TK ' || REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6643.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6643: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3386');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3386');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEXCA3386;

  PROCEDURE PR_RMRMEXCA3350(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEXCA3350');
    L_TLTX := '6643';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       LOG.TLTXCD,
                       CRA.TRFCODE TRFTYPE,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(NVL(TLF2.NVALUE, 0)) AMOUNT, --CEIL(LOG.MSGAMT) AMOUNT,
                       CEIL(NVL(TLF1.NVALUE, 0)) DUTYAMT,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CRB.BANKCODE,
                       (CRB.BANKNAME || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       TLF.CVALUE DEST
                  FROM TLLOG      LOG,
                       TLLOGFLD   TLF,
                       TLLOGFLD   TLF1,
                       TLLOGFLD   TLF2,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.TXNUM = TLF.TXNUM
                   AND LOG.TXDATE = TLF.TXDATE
                   AND TLF.FLDCD = '30'
                   AND LOG.TXNUM = TLF1.TXNUM
                   AND LOG.TXDATE = TLF1.TXDATE
                   AND TLF1.FLDCD = '20' --Thue
                   AND LOG.TXNUM = TLF2.TXNUM
                   AND LOG.TXDATE = TLF2.TXDATE
                   AND TLF2.FLDCD = '10' --Thue
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFCACASH'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.TLTXCD IN ('3350', '3354')
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFCACASH'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                 ORDER BY LOG.AUTOID ASC) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      IF REC.TLTXCD = '3350' THEN
        L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;
      ELSE
        L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT - REC.DUTYAMT;
      END IF;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := REC.DEST || ', TK ' || REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6643.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6643: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3350');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3350');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEXCA3350;

  PROCEDURE PR_RMRMEXCA3350DF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEXCA3350DF');
    L_TLTX := '6643';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(LOG.MSGAMT) AMOUNT,
                       CEIL(TLF1.NVALUE) DUTYAMT,
                       CRA.TRFCODE TRFTYPE,
                       CRB.BANKCODE,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       TLF2.CVALUE DEST
                  FROM TLLOG      LOG,
                       TLLOGFLD   TLF1,
                       TLLOGFLD   TLF2,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.TXNUM = TLF1.TXNUM
                   AND LOG.TXDATE = TLF1.TXDATE
                   AND TLF1.FLDCD = '20'
                   AND LOG.TXNUM = TLF2.TXNUM
                   AND LOG.TXDATE = TLF2.TXDATE
                   AND TLF2.FLDCD = '30'
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFCATAX'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.MSGAMT > 0
                   AND LOG.TLTXCD IN ('3350')
                   AND TLF1.NVALUE > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFCATAX'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                 ORDER BY LOG.AUTOID ASC) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.DUTYAMT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6643 ||
                                      REC.DEST || ', TK ' || REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6643.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6643: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3350DF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXCA3350DF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEXCA3350DF;

  PROCEDURE PR_RMRMEX8879(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEX8879');
    L_TLTX := '6644';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       CRA.TRFCODE TRFTYPE,
                       CF.CUSTODYCD,
                       AF.ACCTNO AFACCTNO,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(TLF.NVALUE * TLF1.NVALUE) AMOUNT,
                       CEIL(TLF2.NVALUE) DUTYAMT,
                       TLF3.NVALUE FEEAMT,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CRB.BANKCODE,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       SB.SYMBOL,
                       TLF6.NVALUE QTTY
                  FROM TLLOG        LOG,
                       TLLOGFLD     TLF,
                       TLLOGFLD     TLF1,
                       TLLOGFLD     TLF2,
                       TLLOGFLD     TLF3,
                       TLLOGFLD     TLF4,
                       TLLOGFLD     TLF5,
                       TLLOGFLD     TLF6,
                       SBSECURITIES SB,
                       AFMAST       AF,
                       CFMAST       CF,
                       CIMAST       CI,
                       CRBDEFACCT   CRA,
                       CRBDEFBANK   CRB
                 WHERE AF.ACCTNO = TLF4.CVALUE
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.TXNUM = TLF.TXNUM
                   AND LOG.TXDATE = TLF.TXDATE
                   AND TLF.FLDCD = '10'
                   AND LOG.TXNUM = TLF1.TXNUM
                   AND LOG.TXDATE = TLF1.TXDATE
                   AND TLF1.FLDCD = '11'
                   AND LOG.TXNUM = TLF2.TXNUM
                   AND LOG.TXDATE = TLF2.TXDATE
                   AND TLF2.FLDCD = '14'
                   AND LOG.TXNUM = TLF3.TXNUM
                   AND LOG.TXDATE = TLF3.TXDATE
                   AND TLF3.FLDCD = '22'
                   AND LOG.TXNUM = TLF4.TXNUM
                   AND LOG.TXDATE = TLF4.TXDATE
                   AND TLF4.FLDCD = '02'
                   AND LOG.TXNUM = TLF5.TXNUM
                   AND LOG.TXDATE = TLF5.TXDATE
                   AND TLF5.FLDCD = '01'
                   AND TLF5.CVALUE = SB.CODEID
                   AND LOG.TXNUM = TLF6.TXNUM
                   AND LOG.TXDATE = TLF6.TXDATE
                   AND TLF6.FLDCD = '10'
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFODSRTL'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND LOG.TLTXCD = '8894'
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFODSRTL'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                 ORDER BY LOG.AUTOID ASC) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT - REC.FEEAMT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6644 ||
                                      REC.SYMBOL || ', SL ' || REC.QTTY ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_AMT ||
                                      (REC.AMOUNT - REC.FEEAMT) || ', TK ' ||
                                      REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6644.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6644: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEX8879');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEX8879');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEX8879;

  PROCEDURE PR_RMRMEX8879DF(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEX8879DF');
    L_TLTX := '6644';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       CRA.TRFCODE TRFTYPE,
                       CF.CUSTODYCD,
                       AF.ACCTNO AFACCTNO,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(TLF.NVALUE * TLF1.NVALUE) AMOUNT,
                       CEIL(TLF2.NVALUE) DUTYAMT,
                       TLF3.NVALUE FEEAMT,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CRB.BANKCODE,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       SB.SYMBOL,
                       TLF6.NVALUE QTTY
                  FROM TLLOG        LOG,
                       TLLOGFLD     TLF,
                       TLLOGFLD     TLF1,
                       TLLOGFLD     TLF2,
                       TLLOGFLD     TLF3,
                       TLLOGFLD     TLF4,
                       TLLOGFLD     TLF5,
                       TLLOGFLD     TLF6,
                       SBSECURITIES SB,
                       AFMAST       AF,
                       CFMAST       CF,
                       CIMAST       CI,
                       CRBDEFACCT   CRA,
                       CRBDEFBANK   CRB
                 WHERE AF.ACCTNO = TLF4.CVALUE
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND LOG.TXNUM = TLF.TXNUM
                   AND LOG.TXDATE = TLF.TXDATE
                   AND TLF.FLDCD = '10'
                   AND LOG.TXNUM = TLF1.TXNUM
                   AND LOG.TXDATE = TLF1.TXDATE
                   AND TLF1.FLDCD = '11'
                   AND LOG.TXNUM = TLF2.TXNUM
                   AND LOG.TXDATE = TLF2.TXDATE
                   AND TLF2.FLDCD = '14'
                   AND LOG.TXNUM = TLF3.TXNUM
                   AND LOG.TXDATE = TLF3.TXDATE
                   AND TLF3.FLDCD = '22'
                   AND LOG.TXNUM = TLF4.TXNUM
                   AND LOG.TXDATE = TLF4.TXDATE
                   AND TLF4.FLDCD = '02'
                   AND LOG.TXNUM = TLF5.TXNUM
                   AND LOG.TXDATE = TLF5.TXDATE
                   AND TLF5.FLDCD = '01'
                   AND LOG.TXNUM = TLF6.TXNUM
                   AND LOG.TXDATE = TLF6.TXDATE
                   AND TLF6.FLDCD = '10'
                   AND TLF5.CVALUE = SB.CODEID
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFODSRTDF'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND LOG.TLTXCD = '8894'
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFODSRTDF'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                 ORDER BY LOG.AUTOID ASC) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.DUTYAMT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      --l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644_VAT || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.DUTYAMT;
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6644_VAT ||
                                      REC.SYMBOL || ', SL ' || REC.QTTY ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_AMT ||
                                      REC.DUTYAMT || ', TK ' ||
                                      REC.CUSTODYCD;
      BEGIN
        IF TXPKS_#6644.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6644: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEX8879DF');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEX8879DF');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEX8879DF;

  PROCEDURE PR_RMRMEXSEDPFEE(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG    TX.MSG_RECTYPE;
    L_CURRDATE VARCHAR2(20);
    L_DESC     VARCHAR2(1000);
    --l_EN_Desc varchar2(1000);
    --l_OrgDesc varchar2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEXSEDPFEE');

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    --SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
    SELECT VARVALUE
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);

    L_TLTX         := '6641';
    L_TXMSG.TLTXCD := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Bang ke cho phi luu ky
    FOR REC IN (SELECT LOG.TLTXCD,
                       LOG.TXNUM,
                       LOG.TXDATE,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(LOG.MSGAMT) AMOUNT,
                       CRA.TRFCODE TRFTYPE,
                       CRB.BANKCODE,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       LOG.TXDESC
                  FROM TLLOG      LOG,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFSEFEE'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.MSGAMT > 0
                   AND LOG.TLTXCD IN ('1180', '1182')
                   AND LOG.MSGAMT > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFSEFEE'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))
                UNION ALL
                SELECT LOG.TLTXCD,
                       LOG.TXNUM,
                       LOG.TXDATE,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(FLD1.NVALUE + FLD2.NVALUE + FLD3.NVALUE) AMOUNT,
                       CRA.TRFCODE TRFTYPE,
                       CRB.BANKCODE,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO,
                       LOG.TXDESC
                  FROM TLLOG      LOG,
                       TLLOGFLD   FLD1,
                       TLLOGFLD   FLD2,
                       TLLOGFLD   FLD3,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFSEFEE'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND FLD1.TXNUM = LOG.TXNUM
                   AND FLD1.TXDATE = LOG.TXDATE
                   AND FLD1.FLDCD = '66'
                   AND FLD2.TXNUM = LOG.TXNUM
                   AND FLD2.TXDATE = LOG.TXDATE
                   AND FLD2.FLDCD = '65'
                   AND FLD3.TXNUM = LOG.TXNUM
                   AND FLD3.TXDATE = LOG.TXDATE
                   AND FLD3.FLDCD = '17'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.TLTXCD IN ('0088')
                   AND (FLD1.NVALUE + FLD2.NVALUE + FLD3.NVALUE) > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFSEFEE'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF REC.TLTXCD = '0088' THEN
        L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6641 ||
                                        REC.CUSTODYCD;
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;
      END IF;
      BEGIN
        IF TXPKS_#6641.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6641: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    --Bang ke cho phi chuyen khoan dong tai khoan
    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(FLD4.NVALUE) AMOUNT,
                       CRA.TRFCODE TRFTYPE,
                       CRB.BANKCODE,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO
                  FROM TLLOG      LOG,
                       TLLOGFLD   FLD4,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = LOG.MSGACCT
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFSECLSFEE'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND FLD4.TXNUM = LOG.TXNUM
                   AND FLD4.TXDATE = LOG.TXDATE
                   AND FLD4.FLDCD = '68'
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.TLTXCD IN ('0088')
                   AND (FLD4.NVALUE) > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFSECLSFEE'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6641_2;

      BEGIN
        IF TXPKS_#6641.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6641: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    --Bang ke hoan tra ung truoc tien ban
    FOR REC IN (SELECT LOG.TXNUM,
                       LOG.TXDATE,
                       AF.ACCTNO AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       CEIL(FLD2.NVALUE) AMOUNT,
                       CEIL(FLD4.NVALUE) FEEAMT,
                       CRA.TRFCODE TRFTYPE,
                       CRB.BANKCODE,
                       AF.BANKACCTNO,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                       LOG.MSGACCT ACCTNO
                  FROM TLLOG      LOG,
                       TLLOGFLD   FLD4,
                       TLLOGFLD   FLD2,
                       TLLOGFLD   FLD1,
                       AFMAST     AF,
                       CFMAST     CF,
                       CIMAST     CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE AF.ACCTNO = FLD1.CVALUE
                   AND CI.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFRLSADV'
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND CI.COREBANK = 'Y'
                   AND LOG.DELTD <> 'Y'
                   AND FLD4.TXNUM = LOG.TXNUM
                   AND FLD4.TXDATE = LOG.TXDATE
                   AND FLD4.FLDCD = '17'
                   AND FLD2.TXNUM = LOG.TXNUM
                   AND FLD2.TXDATE = LOG.TXDATE
                   AND FLD2.FLDCD = '16'
                   AND FLD1.TXNUM = LOG.TXNUM
                   AND FLD1.TXDATE = LOG.TXDATE
                   AND FLD1.FLDCD = '03' --So tieu khoan
                   AND AF.BANKACCTNO IS NOT NULL
                   AND LOG.TLTXCD IN ('8842')
                   AND (FLD4.NVALUE) + (FLD2.NVALUE) > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFRLSADV'
                           AND REQ.TXDATE = TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                           AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT - REC.FEEAMT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6641_8842 ||
                                      REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6641.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6641: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    --Cho truong hop hoan phi, hoan thue
    L_TLTX         := '6644';
    L_TXMSG.TLTXCD := L_TLTX;
    FOR REC IN (
                --Hoan thue
                SELECT *
                  FROM (SELECT LOG.TLTXCD,
                                LOG.TXNUM,
                                LOG.TXDATE,
                                CRA.TRFCODE TRFTYPE,
                                CF.CUSTODYCD,
                                AF.ACCTNO AFACCTNO,
                                CF.FULLNAME,
                                CF.ADDRESS,
                                CF.IDCODE LICENSE,
                                CEIL(TLF.NVALUE) AMOUNT,
                                AF.BANKACCTNO,
                                CRA.REFACCTNO DESACCTNO,
                                CRA.REFACCTNAME DESACCTNAME,
                                CRB.BANKCODE,
                                (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                                LOG.MSGACCT ACCTNO
                           FROM TLLOG      LOG,
                                TLLOGFLD   TLF,
                                AFMAST     AF,
                                CFMAST     CF,
                                CIMAST     CI,
                                CRBDEFACCT CRA,
                                CRBDEFBANK CRB
                          WHERE AF.ACCTNO = LOG.MSGACCT
                            AND CI.AFACCTNO = AF.ACCTNO
                            AND AF.CUSTID = CF.CUSTID
                            AND LOG.TXNUM = TLF.TXNUM
                            AND LOG.TXDATE = TLF.TXDATE
                            AND TLF.FLDCD = '10'
                            AND AF.BANKNAME = CRA.REFBANK
                            AND CRA.TRFCODE = 'TRFRLSTAX'
                            AND AF.BANKNAME = CRB.BANKCODE
                            AND LOG.TLTXCD IN ('1137')
                            AND CI.COREBANK = 'Y'
                            AND LOG.DELTD <> 'Y'
                            AND NOT EXISTS
                          (SELECT REQ.REFCODE
                                   FROM CRBTXREQ REQ
                                  WHERE REQ.TRFCODE = 'TRFRLSTAX'
                                    AND REQ.TXDATE =
                                        TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                                    AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))

                         UNION
                         --Hoan phi
                         SELECT LOG.TLTXCD,
                                LOG.TXNUM,
                                LOG.TXDATE,
                                CRA.TRFCODE TRFTYPE,
                                CF.CUSTODYCD,
                                AF.ACCTNO AFACCTNO,
                                CF.FULLNAME,
                                CF.ADDRESS,
                                CF.IDCODE LICENSE,
                                CEIL(TLF.NVALUE) AMOUNT,
                                AF.BANKACCTNO,
                                CRA.REFACCTNO DESACCTNO,
                                CRA.REFACCTNAME DESACCTNAME,
                                CRB.BANKCODE,
                                (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                                LOG.MSGACCT ACCTNO
                           FROM TLLOG      LOG,
                                TLLOGFLD   TLF,
                                AFMAST     AF,
                                CFMAST     CF,
                                CIMAST     CI,
                                CRBDEFACCT CRA,
                                CRBDEFBANK CRB
                          WHERE AF.ACCTNO = LOG.MSGACCT
                            AND CI.AFACCTNO = AF.ACCTNO
                            AND AF.CUSTID = CF.CUSTID
                            AND LOG.TXNUM = TLF.TXNUM
                            AND LOG.TXDATE = TLF.TXDATE
                            AND TLF.FLDCD = '10'
                            AND AF.BANKNAME = CRA.REFBANK
                            AND CRA.TRFCODE = 'TRFRLSFEE'
                            AND AF.BANKNAME = CRB.BANKCODE
                            AND LOG.TLTXCD IN ('1138')
                            AND CI.COREBANK = 'Y'
                            AND LOG.DELTD <> 'Y'
                            AND NOT EXISTS
                          (SELECT REQ.REFCODE
                                   FROM CRBTXREQ REQ
                                  WHERE REQ.TRFCODE = 'TRFRLSFEE'
                                    AND REQ.TXDATE =
                                        TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                                    AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM)))
                 ORDER BY TXNUM) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF REC.TLTXCD = '1137' THEN
        L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6644_TAX ||
                                        REC.CUSTODYCD;
      ELSIF REC.TLTXCD = '1138' THEN
        L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6644_FEE ||
                                        REC.CUSTODYCD;
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6644 ||
                                        REC.CUSTODYCD;
      END IF;

      BEGIN
        IF TXPKS_#6644.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6644: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    --Cho truong hop hoan tien sua loi giao dich lenh mua
    L_TLTX         := '6644';
    L_TXMSG.TLTXCD := L_TLTX;
    FOR REC IN (SELECT *
                  FROM (SELECT LOG.TLTXCD,
                               LOG.TXNUM,
                               LOG.TXDATE,
                               CRA.TRFCODE TRFTYPE,
                               CF.CUSTODYCD,
                               AF.ACCTNO AFACCTNO,
                               CF.FULLNAME,
                               CF.ADDRESS,
                               CF.IDCODE LICENSE,
                               CEIL(LOG.NAMT) AMOUNT,
                               AF.BANKACCTNO,
                               CRA.REFACCTNO DESACCTNO,
                               CRA.REFACCTNAME DESACCTNAME,
                               CRB.BANKCODE,
                               (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
                               LOG.MSGACCT ACCTNO
                          FROM (SELECT LOG.TXNUM,
                                       LOG.TXDATE,
                                       LOG.MSGACCT,
                                       MAX(ACCTNO) ACCTNO,
                                       LOG.TLTXCD,
                                       SUM(TR.NAMT) NAMT
                                  FROM TLLOG LOG, CITRAN TR, APPTX TX
                                 WHERE LOG.TLTXCD IN ('8848', '8849')
                                   AND LOG.TXNUM = TR.TXNUM
                                   AND LOG.TXDATE = TR.TXDATE
                                   AND TR.TXCD = TX.TXCD
                                   AND TX.FIELD = 'BALANCE'
                                   AND TX.APPTYPE = 'CI'
                                   AND TXTYPE = 'C'
                                   AND LOG.DELTD <> 'Y'
                                 GROUP BY LOG.TXNUM,
                                          LOG.TXDATE,
                                          LOG.MSGACCT,
                                          LOG.TLTXCD) LOG,
                               AFMAST AF,
                               CFMAST CF,
                               CIMAST CI,
                               CRBDEFACCT CRA,
                               CRBDEFBANK CRB
                         WHERE AF.ACCTNO = LOG.ACCTNO
                           AND CI.AFACCTNO = AF.ACCTNO
                           AND AF.CUSTID = CF.CUSTID
                           AND AF.BANKNAME = CRA.REFBANK
                           AND CRA.TRFCODE = 'TRFRLSBUY'
                           AND AF.BANKNAME = CRB.BANKCODE
                           AND LOG.TLTXCD IN ('8848', '8849')
                           AND CI.COREBANK = 'Y'
                           AND NOT EXISTS
                         (SELECT REQ.REFCODE
                                  FROM CRBTXREQ REQ
                                 WHERE REQ.TRFCODE = 'TRFRLSBUY'
                                   AND REQ.TXDATE =
                                       TO_DATE(L_CURRDATE, 'DD/MM/RRRR')
                                   AND TRUNC(REQ.REFCODE) = TRUNC(LOG.TXNUM))

                        )
                 ORDER BY TXNUM) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for txnum : ' || REC.TXNUM);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --02  CATXNUM
      L_TXMSG.TXFIELDS('02').DEFNAME := 'CATXNUM';
      L_TXMSG.TXFIELDS('02').TYPE := 'C';
      L_TXMSG.TXFIELDS('02').VALUE := REC.TXNUM;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6644_BUY ||
                                      REC.CUSTODYCD;

      BEGIN
        IF TXPKS_#6644.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6644: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXSEDPFEE');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEXSEDPFEE');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEXSEDPFEE;

  -- -----------------------------------PR_AFIBDEALSFEE------------------------------------------------
  PROCEDURE PR_AFIBDEALSFEE(P_BCHMDL   VARCHAR,
                                P_ERR_CODE OUT VARCHAR2,
                                P_FROMROW  NUMBER,
                                P_TOROW    NUMBER,
                                P_LASTRUN  OUT VARCHAR2) IS
    V_CURRDATE      DATE;
    l_amt           number(20,4);
    v_lastday       date;
    v_firstday      date;
    v_strsbeom      varchar2(10);
    v_lastdayofmonth     date;
    v_NAV           number(20);
  BEGIN

    PLOG.SETBEGINSECTION(PKGCTX, 'PR_AFIBDEALSFEE');
    P_LASTRUN := 'Y';
    P_ERR_CODE := 0;

    SELECT to_date(VARVALUE,'DD/MM/RRRR') INTO V_CURRDATE FROM SYSVAR WHERE VARNAME = 'CURRDATE' AND GRNAME = 'SYSTEM';
    --v_strsbeom
    /*SELECT LAST_DAY(V_CURRDATE) into v_lastday FROM DUAL;*/
    /*SELECT TRUNC(V_CURRDATE,'MM') into v_firstday FROM DUAL;*/
/*    SELECT MAX(SBDATE) into v_lastdayofmonth
    FROM SBCLDR WHERE HOLIDAY = 'N' AND SBDATE >= V_FIRSTDAY AND SBDATE <= V_LASTDAY;*/

    ----if v_lastdayofmonth = V_CURRDATE then
        FOR REC IN (SELECT SE.AFACCTNO, SB.CODEID, SB.SYMBOL, SUM(SE.TRADE) TRADE , MAX(NVL(SB.MRATIO,0)) MRATIO
                    FROM SEMAST SE, SBSECURITIES SB
                    WHERE SE.TRADE > 0 AND SE.CODEID = SB.CODEID
                        AND SB.SECTYPE = '007'
                    GROUP BY SE.AFACCTNO, SB.SYMBOL, SB.CODEID
        )
        LOOP
            select nvl(min(NAV),0) into v_NAV from securities_nav
            where codeid = rec.CODEID and V_CURRDATE between fromdate and todate;

            l_amt :=  (nvl(rec.MRATIO,0)/100)*nvl(rec.TRADE,0)*v_NAV;
            INSERT INTO AFIBDEALSFEE (TXDATE,AFACCTNO,SYMBOL,QTTY,MRATIO,AMT)
            VALUES(V_CURRDATE,rec.AFACCTNO,rec.SYMBOL,rec.TRADE,rec.MRATIO,l_amt);
        END LOOP;
    ----end if;

    PLOG.SETENDSECTION(PKGCTX, 'PR_AFIBDEALSFEE');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on PR_AFIBDEALSFEE');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.SETENDSECTION(PKGCTX, 'PR_AFIBDEALSFEE');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
END PR_AFIBDEALSFEE;

  PROCEDURE PR_BATCHLOG_DOING(
    p_ACTION    IN varchar2,
    p_CMDID     IN varchar2,
    p_IPADDRESS IN varchar2,
    p_BUSDATE   IN varchar2,
    p_TELLERID  IN varchar2,
    p_USERRUN   IN varchar2,
    P_ISAUTO    IN varchar2,
    P_ERR_CODE  OUT VARCHAR2)
  IS
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_BATCHLOG_DOING');

    IF p_ACTION = 'I' THEN
        INSERT INTO BATCHLOG(AUTOID,ID,SERVERDATE,SERVERTIME,CMDID,IPADDRESS,TLID,TXDATE,USERBATCH,ISAUTO)
        SELECT seq_batchlog.NEXTVAL, p_BUSDATE || p_CMDID, TO_CHAR(SYSDATE, 'DD/MM/RRRR'), TO_CHAR (SYSDATE, 'HH24:MI:SS'),
            p_CMDID, p_IPADDRESS, p_TELLERID, p_BUSDATE, p_USERRUN,P_ISAUTO FROM DUAL;
    ELSIF p_ACTION = 'D' THEN
        --ID truyen vao bien p_USERRUN nen xoa theo bien p_USERRUN
        DELETE FROM BATCHLOG WHERE ID = p_USERRUN;
    END IF;

    P_ERR_CODE := 0;

    PLOG.SETENDSECTION(PKGCTX, 'PR_BATCHLOG_DOING');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_BATCHLOG_DOING');
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
  END PR_BATCHLOG_DOING;

  PROCEDURE PR_RMRMEODRPT(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS
    L_TXMSG TX.MSG_RECTYPE;
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmRMEODRPT');

    CSPKS_RMPROC.PR_CREATECRBTXREQ(P_ERR_CODE);

    PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEODRPT');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmRMEODRPT');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMRMEODRPT;
  --End
PROCEDURE PR_GetPM_CAMAST(P_BCHMDL   VARCHAR,
                                  P_ERR_CODE OUT VARCHAR2,
                                  P_FROMROW  NUMBER,
                                  P_TOROW    NUMBER,
                                  P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_ICRATE        NUMBER;
    V_DELTA         NUMBER;
    L_RULETYPE      VARCHAR2(10);
    L_ICCFBAL       NUMBER;
    L_AMOUNT        NUMBER;

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_GetPM_CAMAST');
    P_LASTRUN := 'Y';


    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '3371';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '3371';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Default thu thue la 0.1%
    L_ICRATE := 0;
    V_DELTA  := 0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT CAMAST.CAMASTID ,CAMAST.AUTOID,SYM.SYMBOL,
                    CAMAST.CODEID, CAMAST.EXCODEID, A1.CDVAL TYPEID, A1.CDCONTENT CATYPE,
                    REPORTDATE ,DUEDATE,ACTIONDATE ,BEGINDATE,
                    EXPRICE, EXRATE, RIGHTOFFRATE, DEVIDENTRATE,OPTCODEID,
                    DEVIDENTSHARES, SPLITRATE, INTERESTRATE, CAMAST.DESCRIPTION,CAMAST.DESCRIPTION CONTENTS, INTERESTPERIOD, A2.CDCONTENT STATUS, FRDATERETAIL, TODATERETAIL, TRFLIMIT,
                    (case when CAMAST.CATYPE='014' then CAMAST.EXPRICE end) ROPRICE,
                    (case when CAMAST.CATYPE='011' then CAMAST.EXPRICE end) TVPRICE,
                    (CASE WHEN EXRATE IS NOT NULL THEN EXRATE ELSE (CASE WHEN RIGHTOFFRATE IS NOT NULL
                       THEN RIGHTOFFRATE ELSE (CASE WHEN DEVIDENTRATE IS NOT NULL THEN DEVIDENTRATE  ELSE
                       (CASE WHEN SPLITRATE IS NOT NULL THEN SPLITRATE ELSE (CASE WHEN INTERESTRATE IS NOT NULL
                       THEN INTERESTRATE ELSE
                    (CASE WHEN DEVIDENTSHARES IS NOT NULL THEN DEVIDENTSHARES ELSE '0' END)END)END)END) END)END) RATE,
                    CASE WHEN  PITRATE = 0 THEN TO_NUMBER( SYS.VARVALUE) ELSE TO_NUMBER( PITRATE) END PITRATE,
                    CAMAST.CATYPE CATYPEVAL,FRDATETRANSFER,TODATETRANSFER,DEVIDENTVALUE,
                    camast.status statusval,
                    (case when CAMAST.CATYPE='014' then 1 else 0 end) ISRIGHTOFF,
                    tosym.symbol tosymbol,NVL(camast.tocodeid,camast.codeid) tocodeid,
                    NVL(camast.CANCELDATE,TO_DATE('20/03/2050','DD/MM/RRRR')) CANCELDATE, NVL(camast.RECEIVEDATE,TO_DATE('20/03/2050','DD/MM/RRRR')) RECEIVEDATE, camast.isincode,
                    CAMAST.TRADEDATE
                FROM CAMAST, SBSECURITIES SYM, ALLCODE A1, ALLCODE A2,
                    SBSECURITIES TOSYM,SYSVAR SYS
                WHERE CAMAST.CODEID=SYM.CODEID  AND A1.CDTYPE = 'CA'
                    AND A1.CDNAME = 'CATYPE' AND A1.CDVAL=CATYPE
                    AND A2.CDTYPE = 'CA' AND A2.CDNAME = 'CASTATUS' AND CAMAST.STATUS=A2.CDVAL AND CAMAST.DELTD ='N'
                    AND NVL(camast.tocodeid,camast.codeid)=tosym.codeid
                    AND SYS.VARNAME ='PITRATE' AND getduedate(V_STRCURRDATE,'B', '000', 1) = reportdate
                    and catype in ('009','010','011','021')
                    and CAMAST.status <> 'P'
                ) LOOP
          --Set txnum
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := '0001';

          --Set cac field giao dich
          --03  CAMASTID      C
          L_TXMSG.TXFIELDS('03').DEFNAME := 'CAMASTID';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC.CAMASTID;
          --04  SYMBOL          C
          L_TXMSG.TXFIELDS('04').DEFNAME := 'SYMBOL';
          L_TXMSG.TXFIELDS('04').TYPE := 'C';
          L_TXMSG.TXFIELDS('04').VALUE := rec.SYMBOL;
          --16  CODEID          C
          L_TXMSG.TXFIELDS('16').DEFNAME := 'CODEID';
          L_TXMSG.TXFIELDS('16').TYPE := 'C';
          L_TXMSG.TXFIELDS('16').VALUE := rec.CODEID;
          --05  CATYPE          C
          L_TXMSG.TXFIELDS('05').DEFNAME := 'CATYPE';
          L_TXMSG.TXFIELDS('05').TYPE := 'C';
          L_TXMSG.TXFIELDS('05').VALUE := rec.CATYPEVAL;
          --06  REPORTDATE      C
          L_TXMSG.TXFIELDS('06').DEFNAME := 'REPORTDATE';
          L_TXMSG.TXFIELDS('06').TYPE := 'C';
          L_TXMSG.TXFIELDS('06').VALUE := to_char(rec.REPORTDATE,'dd/mm/rrrr');
          --12  FRDATETRANSFER  D
          L_TXMSG.TXFIELDS('12').DEFNAME := 'FRDATETRANSFER';
          L_TXMSG.TXFIELDS('12').TYPE := 'D';
          L_TXMSG.TXFIELDS('12').VALUE := rec.FRDATETRANSFER;
          --13  TODATETRANSFER  D
          L_TXMSG.TXFIELDS('13').DEFNAME := 'TODATETRANSFER';
          L_TXMSG.TXFIELDS('13').TYPE := 'D';
          L_TXMSG.TXFIELDS('13').VALUE := rec.TODATETRANSFER;
          --07  ACTIONDATE      C
          L_TXMSG.TXFIELDS('07').DEFNAME := 'ACTIONDATE';
          L_TXMSG.TXFIELDS('07').TYPE := 'C';
          L_TXMSG.TXFIELDS('07').VALUE := to_char(rec.ACTIONDATE,'dd/mm/rrrr');
          --10  RATE            C
          L_TXMSG.TXFIELDS('10').DEFNAME := 'RATE';
          L_TXMSG.TXFIELDS('10').TYPE := 'C';
          L_TXMSG.TXFIELDS('10').VALUE := rec.RATE;
          --11  RIGHTOFFRATE    T
          L_TXMSG.TXFIELDS('11').DEFNAME := 'RIGHTOFFRATE';
          L_TXMSG.TXFIELDS('11').TYPE := 'T';
          L_TXMSG.TXFIELDS('11').VALUE := rec.RIGHTOFFRATE;
          --15  TVPRICE         T
          L_TXMSG.TXFIELDS('15').DEFNAME := 'TVPRICE';
          L_TXMSG.TXFIELDS('15').TYPE := 'T';
          L_TXMSG.TXFIELDS('15').VALUE := rec.TVPRICE;
          --14  ROPRICE         T
          L_TXMSG.TXFIELDS('14').DEFNAME := 'ROPRICE';
          L_TXMSG.TXFIELDS('14').TYPE := 'T';
          L_TXMSG.TXFIELDS('14').VALUE := rec.ROPRICE;
          --30    DESC        C
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
          BEGIN
            IF TXPKS_#3371.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 3371: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            END IF;
          END;
    END LOOP;
    ------
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '3322';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '3322';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Default thu thue la 0.1%
    L_ICRATE := 0;
    V_DELTA  := 0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (
        SELECT CA.AUTOID, CF.CUSTODYCD,AF.ACCTNO,CA.AMT,CA.QTTY, SB.SYMBOL,ca.camastid
        FROM CASCHD4P CA,sbsecurities SB,AFMAST AF, CFMAST CF
        WHERE CA.CODEID = SB.CODEID
        AND CA.AFACCTNO = AF.ACCTNO
        AND AF.CUSTID = CF.CUSTID
        AND CA.STATUS='A'
                ) LOOP
          --Set txnum
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := '0001';

          --Set cac field giao dich
          --01  CAMASTID      C
          L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
          L_TXMSG.TXFIELDS('01').TYPE := 'C';
          L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

          --Set cac field giao dich
          --02  CAMASTID      C
          L_TXMSG.TXFIELDS('02').DEFNAME := 'CAMASTID';
          L_TXMSG.TXFIELDS('02').TYPE := 'C';
          L_TXMSG.TXFIELDS('02').VALUE := REC.CAMASTID;

          --03  ACCTNO          C
          L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := rec.ACCTNO;

          --04  SYMBOL          C
          L_TXMSG.TXFIELDS('04').DEFNAME := 'SYMBOL';
          L_TXMSG.TXFIELDS('04').TYPE := 'C';
          L_TXMSG.TXFIELDS('04').VALUE := rec.SYMBOL;
          --10  AMT            N
          L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := rec.AMT;
          --11  QTTY            N
          L_TXMSG.TXFIELDS('11').DEFNAME := 'QTTY';
          L_TXMSG.TXFIELDS('11').TYPE := 'N';
          L_TXMSG.TXFIELDS('11').VALUE := rec.QTTY;

           --03  CUSTODYCD          C
          L_TXMSG.TXFIELDS('36').DEFNAME := 'CUSTODYCD';
          L_TXMSG.TXFIELDS('36').TYPE := 'C';
          L_TXMSG.TXFIELDS('36').VALUE := rec.CUSTODYCD;

          --30    DESC        C
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC;
          BEGIN
            IF TXPKS_#3322.FN_BATCHTXPROCESS(L_TXMSG,
                                             P_ERR_CODE,
                                             L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
              PLOG.DEBUG(PKGCTX, 'got error 3322: ' || P_ERR_CODE);
              ROLLBACK;
              RETURN;
            else
                update CASCHD4P set STATUS='C' where AUTOID = REC.AUTOID;
            END IF;
          END;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_GetPM_CAMAST');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on PR_GetPM_CAMAST');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_GetPM_CAMAST');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_GetPM_CAMAST;

 --HSX04: netoff end day : net theo tieu khoan -> tai khoan
PROCEDURE PR_NETOFFORDERENDDAY(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2)
  IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   DATE;
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    v_netexecqty    NUMBER(30);
    v_netexecamt    NUMBER(30);
    v_netqtty       NUMBER(30);
    v_netamt        NUMBER(30);
    v_netqtty_af    NUMBER(30);
    v_netamt_af     NUMBER(30);
    v_netqtty_cf    NUMBER(30);
    v_netamt_cf     NUMBER(30);
    v_afnetqty      NUMBER(30);
    v_afnetamt      NUMBER(30);
    v_cfnetqty      NUMBER(30);
    v_cfnetamt      NUMBER(30);
    L_ERR_PARAM     VARCHAR2(300);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_NETOFFORDERENDDAY');
    SELECT TO_DATE(VARVALUE,'DD/MM/RRRR') INTO V_STRCURRDATE FROM SYSVAR WHERE GRNAME = 'SYSTEM' AND VARNAME = 'CURRDATE';
    -- Netoff chung khoan, tien
    FOR rec IN (
          SELECT af.custid , od.codeid, od.txdate, od.afacctno,
                 SUM (execqtty - netexecqtty - cfnetexecqtty) qtty,
                 SUM ( execamt - netexecamt - cfnetexecamt) amt
            FROM odmast od, afmast af, sbsecurities sb, domain d
           WHERE od.afacctno = af.acctno
             AND ( od.execqtty - od.netexecqtty - od.cfnetexecqtty > 0
                OR od.execamt - od.netexecamt - od.cfnetexecamt > 0 )
             AND od.exectype IN ('NS','MS')
             AND od.deltd <> 'Y'
             AND od.TXDATE = v_strcurrdate
             AND sb.codeid = od.codeid
             AND sb.domain = d.domaincode
             AND d.settletype = 'DVP3'
             AND od.ISBUYIN <> 'Y'
           GROUP BY af.custid , od.codeid, od.txdate, od.afacctno
    ) LOOP
      v_netexecqty := rec.qtty ;
      v_netexecamt := rec.amt ;
      v_netqtty := 0;
      v_netamt := 0;
      v_netqtty_af := 0;
      v_netamt_af  := 0;
      v_netqtty_cf := 0;
      v_netamt_cf  := 0;
      v_afnetqty   := 0;
      v_afnetamt   := 0;
      v_cfnetqty   := 0;
      v_cfnetamt   := 0;

      IF v_netexecqty > 0 OR v_netexecamt > 0 THEN
        FOR rec_buy IN (
            SELECT od.*
                FROM odmast od, afmast af
               WHERE od.afacctno = af.acctno
                 AND af.custid = rec.CUSTID
                 AND od.codeid = rec.codeid
                 AND od.txdate = rec.txdate
                 AND ( od.execqtty - od.netexecqtty - od.cfnetexecqtty > 0
                    OR od.execamt - od.netexecamt - od.cfnetexecamt > 0 )
                 AND od.exectype = 'NB'
                 AND od.deltd <> 'Y'
                 AND od.TXDATE = v_strcurrdate
                 AND od.ISBUYIN <> 'Y'
               ORDER BY decode(od.afacctno, rec.afacctno,0,1),od.ordertime
          )
          LOOP
              v_netqtty :=  greatest(0,least(v_netexecqty, rec_buy.execqtty - rec_buy.netexecqtty - rec_buy.cfnetexecqtty));
              v_netamt := greatest(0,least(v_netexecamt, rec_buy.execamt - rec_buy.netexecamt - rec_buy.cfnetexecamt));

              IF rec.afacctno = rec_buy.afacctno THEN -- net tieu khoan
                 UPDATE odmast SET netexecqtty =  netexecqtty + v_netqtty,
                                   netexecamt =  netexecamt + v_netamt
                 WHERE orderid = rec_buy.orderid;

                 v_afnetqty := nvl(v_afnetqty,0) + v_netqtty; -- so luong da net theo tieu khoan
                 v_netexecqty := v_netexecqty - v_netqtty;

                 v_afnetamt := nvl(v_afnetamt,0) + v_netamt; -- gia tri da net theo tieu khoan
                 v_netexecamt := v_netexecamt - v_netamt;
              ELSE -- net tai khoan
                 UPDATE odmast SET cfnetexecqtty =  cfnetexecqtty + v_netqtty,
                                   cfnetexecamt =  cfnetexecamt + v_netamt
                 WHERE orderid = rec_buy.orderid;

                 v_cfnetqty := nvl(v_cfnetqty,0) + v_netqtty; -- so luong da net theo tieu khoan
                 v_netexecqty := v_netexecqty - v_netqtty;

                 v_cfnetamt := nvl(v_cfnetamt,0) + v_netamt; -- gia tri da net theo tieu khoan
                 v_netexecamt := v_netexecamt - v_netamt;

              END IF;
            EXIT WHEN v_netexecqty = 0 AND v_netexecamt = 0 ;
          END LOOP;

          IF nvl(v_afnetqty,0) + NVL(v_afnetamt,0) + nvl(v_cfnetqty,0) + NVL(v_cfnetamt,0) > 0  THEN
            FOR rec_sell IN (
               SELECT od.*
                FROM odmast od
               WHERE od.codeid = rec.codeid
                 AND od.txdate = rec.txdate
                 AND od.afacctno = rec.afacctno
                 AND ( od.execqtty - od.netexecqtty - od.cfnetexecqtty > 0
                    OR od.execamt - od.netexecamt - od.cfnetexecamt > 0 )
                 AND od.exectype IN ('NS','MS')
                 AND od.deltd <> 'Y'
                 AND od.txdate = v_strcurrdate
                 AND od.ISBUYIN <> 'Y'
               ORDER BY od.ordertime
              ) LOOP
                   v_netqtty_af :=  greatest(0,least(v_afnetqty, rec_sell.execqtty - rec_sell.netexecqtty - rec_sell.cfnetexecqtty));
                   v_netamt_af := greatest(0,least(v_afnetamt, rec_sell.execamt - rec_sell.netexecamt - rec_sell.cfnetexecamt));

                   v_netqtty_cf :=  greatest(0,least(v_cfnetqty, rec_sell.execqtty - rec_sell.netexecqtty - rec_sell.cfnetexecqtty - v_netqtty_af));
                   v_netamt_cf := greatest(0,least(v_cfnetamt, rec_sell.execamt - rec_sell.netexecamt - rec_sell.cfnetexecamt - v_netamt_af));

                   UPDATE odmast SET netexecqtty = netexecqtty + v_netqtty_af,
                                     netexecamt = netexecamt + v_netamt_af,
                                     cfnetexecqtty = cfnetexecqtty + v_netqtty_cf,
                                     cfnetexecamt = cfnetexecamt + v_netamt_cf
                    WHERE orderid = rec_sell.orderid;

                  v_afnetqty := nvl(v_afnetqty,0) - v_netqtty_af;
                  v_afnetamt := nvl(v_afnetamt,0) - v_netamt_af;

                  v_cfnetqty := nvl(v_cfnetqty,0) - v_netqtty_cf;
                  v_cfnetamt := nvl(v_cfnetamt,0) - v_netamt_cf;

                  EXIT WHEN v_afnetqty = 0 AND v_afnetamt = 0 AND v_cfnetqty = 0 AND v_cfnetamt = 0;
               END LOOP;
          END IF;
      END IF;
    END LOOP;

    -- chuyen khoan ttbt noi bo
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8901';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := V_STRCURRDATE;
    L_TXMSG.BUSDATE   := V_STRCURRDATE;
    L_TXMSG.TLTXCD    := '8901';

    FOR rec_tt IN (
       SELECT * FROM (
              SELECT od.afacctno, od.codeid,MAX(sb.symbol) symbol,od.afacctno||od.codeid acctno, od.txdate,substr(od.exectype,2) BORS,
                     SUM(CASE WHEN od.exectype IN ('NS','MS') THEN od.cfnetexecqtty ELSE 0 END) OUT_QTTY,
                     SUM(CASE WHEN od.exectype IN ('NS','MS') THEN od.cfnetexecamt ELSE 0 END) IN_AMT,
                     SUM(CASE WHEN od.exectype = 'NB' THEN od.cfnetexecqtty ELSE 0 END) IN_QTTY,
                     SUM(CASE WHEN od.exectype = 'NB' THEN od.cfnetexecamt ELSE 0 END) OUT_AMT
                FROM odmast od, sbsecurities sb
               WHERE od.codeid = sb.codeid
                 AND (od.cfnetexecqtty > 0 OR cfnetexecamt > 0)
                 AND od.exectype IN ('NB','NS','MS')
                 AND od.deltd <> 'Y'
                 AND od.TXDATE = v_strcurrdate
               GROUP BY od.afacctno, od.codeid, od.exectype, od.txdate) A
         WHERE NOT EXISTS ( SELECT 1 FROM NETOFFENDAY_LOG
                                  WHERE afacctno = A.afacctno
                                    AND codeid   = A.codeid
                                    AND orderdate = A.txdate
                                    AND bors     = A.bors
                                    AND deltd    <> 'Y'
                                    AND status   = 'C')
      ) LOOP

          --Set txnum
          SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
                 LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO L_TXMSG.TXNUM
            FROM DUAL;
          L_TXMSG.BRID := SUBSTR(REC_TT.AFACCTNO, 1, 4);
          L_TXMSG.ccyusage := REC_TT.CODEID;
          --Set cac field giao dich
          --01   C   CODEID
          L_TXMSG.TXFIELDS('01').DEFNAME := 'CODEID';
          L_TXMSG.TXFIELDS('01').TYPE := 'C';
          L_TXMSG.TXFIELDS('01').VALUE := REC_TT.CODEID;
          --03   C   AFACCTNO
          L_TXMSG.TXFIELDS('03').DEFNAME := 'AFACCTNO';
          L_TXMSG.TXFIELDS('03').TYPE := 'C';
          L_TXMSG.TXFIELDS('03').VALUE := REC_TT.AFACCTNO;

          --05   C   SEACCTNO
          L_TXMSG.TXFIELDS('05').DEFNAME := 'SEACCTNO';
          L_TXMSG.TXFIELDS('05').TYPE := 'C';
          L_TXMSG.TXFIELDS('05').VALUE := REC_TT.ACCTNO;

          --06   C   TXDATE
          L_TXMSG.TXFIELDS('06').DEFNAME := 'TXDATE';
          L_TXMSG.TXFIELDS('06').TYPE := 'D';
          L_TXMSG.TXFIELDS('06').VALUE := REC_TT.TXDATE;

          --07   C   SYMBOL
          L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
          L_TXMSG.TXFIELDS('07').TYPE := 'C';
          L_TXMSG.TXFIELDS('07').VALUE := REC_TT.SYMBOL;

          --08   C   BORS
          L_TXMSG.TXFIELDS('08').DEFNAME := 'BORS';
          L_TXMSG.TXFIELDS('08').TYPE := 'C';
          L_TXMSG.TXFIELDS('08').VALUE := REC_TT.BORS;

          --10   N   AMT
          L_TXMSG.TXFIELDS('10').DEFNAME := 'AMT';
          L_TXMSG.TXFIELDS('10').TYPE := 'N';
          L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC_TT.IN_AMT, 0);
          --11   N   QTTY
          L_TXMSG.TXFIELDS('11').DEFNAME := 'QTTY';
          L_TXMSG.TXFIELDS('11').TYPE := 'N';
          L_TXMSG.TXFIELDS('11').VALUE := REC_TT.OUT_QTTY;
          --12   N   AMT
          L_TXMSG.TXFIELDS('12').DEFNAME := 'AMT';
          L_TXMSG.TXFIELDS('12').TYPE := 'N';
          L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC_TT.OUT_AMT, 0);
          --13   N   QTTY
          L_TXMSG.TXFIELDS('13').DEFNAME := 'QTTY';
          L_TXMSG.TXFIELDS('13').TYPE := 'N';
          L_TXMSG.TXFIELDS('13').VALUE := REC_TT.IN_QTTY;
          --30   C   DESC
          L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
          L_TXMSG.TXFIELDS('30').TYPE := 'C';
          L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC|| ' :' || REC_TT.AFACCTNO ||' - '||
                                          REC_TT.SYMBOL || ' - ' ||
                                          UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                          TO_CHAR(REC_TT.TXDATE, 'DD/MM/RRRR');
          BEGIN
            IF TXPKS_#8901.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
               SYSTEMNUMS.C_SUCCESS THEN
               ROLLBACK;
               PLOG.SETENDSECTION(PKGCTX, 'PR_NETOFFORDERENDDAY');
               RETURN;
            END IF;
          END;
      END LOOP;
    --
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_NETOFFORDERENDDAY');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on netoff order end day');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_NETOFFORDERENDDAY');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_NETOFFORDERENDDAY;

 -- HSX04: Thanh toan luon lich SM trong ngay neu lenh bi net het
PROCEDURE PR_ODSETTLEMENTRECEIVESECID(P_BCHMDL   VARCHAR,
                                      P_ERR_CODE OUT VARCHAR2,
                                      P_FROMROW  NUMBER,
                                      P_TOROW    NUMBER,
                                      P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementReceiveSecID');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8868';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8868';
    FOR REC IN (SELECT SUBSTR(CUSTODYCD, 4, 1) CUSTODYCD, MST.AUTOID, MST.ORGORDERID, MST.AFACCTNO,
                       MST.ACCTNO, SEC.SYMBOL, GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT, 0) AMT, --HSX04
                       GREATEST(MST.QTTY - ODMST.NETEXECQTTY - ODMST.CFNETEXECQTTY, 0) QTTY, --HSX04
                       ROUND(MST.AMT / MST.QTTY, 4) MATCHPRICE,
                       SEC.PARVALUE, ODMST.FEEACR, ODMST.EXECQTTY SQTTY
                 FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       ODMAST ODMST, AFMAST AF, CFMAST CF, ODTYPE TYP, SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RS')
                   AND CF.CUSTATCOM = 'Y'
                   AND MST.QTTY > 0
                   AND MST.TXDATE = TO_DATE(V_STRCURRDATE,SYSTEMNUMS.C_DATE_FORMAT)
                   AND GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT, 0) = 0
                   AND GREATEST(MST.QTTY - ODMST.NETEXECQTTY - ODMST.CFNETEXECQTTY, 0) = 0
                 ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;

      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.AFACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.ACCTNO;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   MATCHPRICE
      L_TXMSG.TXFIELDS('10').DEFNAME := 'MATCHPRICE';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.MATCHPRICE;
      --11   N   RCVQTTY
      L_TXMSG.TXFIELDS('11').DEFNAME := 'RCVQTTY';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := REC.QTTY;
      --12   N   PARVALUE
      L_TXMSG.TXFIELDS('12').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := REC.PARVALUE;
      --13   N   FEEACR
      L_TXMSG.TXFIELDS('13').DEFNAME := 'FEEACR';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := REC.FEEACR;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      IF V_BLNVIETNAMESE = TRUE THEN
        L_TXMSG.TXFIELDS('30').VALUE := V_STRDESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' ' ||
                                        UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      ELSE
        L_TXMSG.TXFIELDS('30').VALUE := V_STREN_DESC || ' ' ||
                                        TRIM(TO_CHAR(REC.SQTTY,
                                                     '999,999,999,999,999,999,999')) || ' ' ||
                                        REC.SYMBOL || ' date ' ||
                                        SUBSTR(REC.ORGORDERID, 5, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 7, 2) || '/' ||
                                        SUBSTR(REC.ORGORDERID, 9, 2);
      END IF;
      UPDATE SECMAST
         SET MAPAVL = 'Y'
       WHERE ORDERID = REC.ORGORDERID
         AND ACCTNO = REC.AFACCTNO;
      BEGIN
        IF TXPKS_#8868.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8868: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveSecID');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive pr_ODSettlementReceiveSecID');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveSecID');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTRECEIVESECID;

 -- HSX04: Thanh toan luon lich RM trong ngay neu lenh bi net het
PROCEDURE PR_ODSETTLEMENTRECEIVEMONEYID(P_BCHMDL   VARCHAR,
                                        P_ERR_CODE OUT VARCHAR2,
                                        P_FROMROW  NUMBER,
                                        P_TOROW    NUMBER,
                                        P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    V_DBLPROFIT     NUMBER(20, 0);
    V_DBLLOSS       NUMBER(20, 0);
    V_DBLAVLRCVAMT  NUMBER(20, 0);
    V_DBLVATRATE    NUMBER(20, 0);
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    V_COMPANYCD     VARCHAR2(10);
    L_RcvCash_Buyin varchar2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_ODSettlementReceiveMoneyId');

    V_COMPANYCD := CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8866';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    --HSX04
    SELECT NVL(VARVALUE, 'Y')
      INTO L_RCVCASH_BUYIN
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'RCVCASHTIME_BUYIN_CN';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8866';
    V_DBLPROFIT       := 0;
    V_DBLLOSS         := 0;
    FOR REC IN (SELECT SUBSTR(CUSTODYCD, 4, 1) CUSTODYCD, COSTPRICE, MST.AFACCTNO,
                       CASE WHEN CI.COREBANK = 'Y' THEN 1 ELSE 0 END COREBANK,
                       ODMST.EXECTYPE, GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT, 0) AMT,
                       MST.TXDATE, GREATEST(MST.QTTY - ODMST.NETEXECQTTY - ODMST.CFNETEXECQTTY, 0) QTTY,
                       TYP.VATRATE, MST.AUTOID, SEC.CODEID, SEC.SYMBOL, SEC.PARVALUE,
                       MST.AAMT, MST.ORGORDERID, MST.ACCTNO, ODMST.EXECQTTY SQTTY
                 FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                      ODMAST ODMST, AFMAST AF, CFMAST CF, CIMAST CI, ODTYPE TYP, SBSECURITIES SEC
                 WHERE ODMST.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND ODMST.AFACCTNO = CI.AFACCTNO
                   AND ODMST.ACTYPE = TYP.ACTYPE
                   AND MST.ORGORDERID = ODMST.ORDERID
                   AND MST.CODEID = SEC.CODEID
                   AND SEC.TRADEPLACE <> '003'
                   AND MST.STATUS = 'N'
                   AND MST.DELTD <> 'Y'
                   AND (MST.DUETYPE = 'RM')
                   AND CF.CUSTATCOM = 'Y'
                   AND MST.TXDATE = TO_DATE(V_STRCURRDATE,SYSTEMNUMS.C_DATE_FORMAT)
                   AND ( ( GREATEST(MST.AMT - ODMST.NETEXECAMT - ODMST.CFNETEXECAMT, 0) = 0
                       AND GREATEST(MST.QTTY - ODMST.NETEXECQTTY - ODMST.CFNETEXECQTTY, 0) = 0 )
                       OR ( nvl(odmst.isbuyin,'N') ='Y'  and L_RcvCash_Buyin ='Y' ) )
                 ORDER BY ORGORDERID
                 ) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;
      V_DBLAVLRCVAMT := REC.AMT;
      V_DBLVATRATE   := REC.VATRATE;
      --Tinh gia tri lai lo cho tu doanh
      IF REC.CUSTODYCD = 'P' THEN
        IF REC.AMT > REC.COSTPRICE * REC.QTTY THEN
          V_DBLPROFIT := ROUND(REC.AMT - REC.COSTPRICE * REC.QTTY, 0);
          V_DBLLOSS   := 0;
        ELSE
          V_DBLPROFIT := 0;
          V_DBLLOSS   := ROUND(REC.COSTPRICE * REC.QTTY - REC.AMT, 0);
        END IF;
      END IF;
      --Set cac field giao dich
      --01   N   AUTOID
      L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
      L_TXMSG.TXFIELDS('01').TYPE := 'N';
      L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

      --03   C   ORGORDERID
      L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
      --04   C   AFACCTNO
      L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
      --05   C   CIACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.ACCTNO;
      --06   C   SEACCTNO
      L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
      --07   C   SYMBOL
      L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
      --08   N   AMT
      L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
      L_TXMSG.TXFIELDS('08').TYPE := 'N';
      L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.AMT, 0);
      --09   N   QTTY
      L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
      L_TXMSG.TXFIELDS('09').TYPE := 'N';
      L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
      --10   N   RAMT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'RAMT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := ROUND(REC.AMT, 0);
      --11   N   AAMT
      L_TXMSG.TXFIELDS('11').DEFNAME := 'AAMT';
      L_TXMSG.TXFIELDS('11').TYPE := 'N';
      L_TXMSG.TXFIELDS('11').VALUE := ROUND(REC.AAMT, 0);
      --12   N   FEEAMT
      L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
      L_TXMSG.TXFIELDS('12').TYPE := 'N';
      L_TXMSG.TXFIELDS('12').VALUE := 0;
      --13   N   VAT
      L_TXMSG.TXFIELDS('13').DEFNAME := 'VAT';
      L_TXMSG.TXFIELDS('13').TYPE := 'N';
      L_TXMSG.TXFIELDS('13').VALUE := 0;
      --14   N   PROFITAMT
      L_TXMSG.TXFIELDS('14').DEFNAME := 'PROFITAMT';
      L_TXMSG.TXFIELDS('14').TYPE := 'N';
      L_TXMSG.TXFIELDS('14').VALUE := V_DBLPROFIT;
      --15   N   LOSSAMT
      L_TXMSG.TXFIELDS('15').DEFNAME := 'LOSSAMT';
      L_TXMSG.TXFIELDS('15').TYPE := 'N';
      L_TXMSG.TXFIELDS('15').VALUE := V_DBLLOSS;
      --16   N   COSTPRICE
      L_TXMSG.TXFIELDS('16').DEFNAME := 'COSTPRICE';
      L_TXMSG.TXFIELDS('16').TYPE := 'N';
      L_TXMSG.TXFIELDS('16').VALUE := REC.COSTPRICE;
      --31   N   COREBANK
      L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
      L_TXMSG.TXFIELDS('31').TYPE := 'N';
      L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;
      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_8866 || ' ' ||
                                      TRIM(TO_CHAR(REC.SQTTY,
                                                   '999,999,999,999,999')) || ' ' ||
                                      REC.SYMBOL || ' ' ||
                                      UTF8NUMS.C_CONST_DATE_VI || ' ' ||
                                      TO_CHAR(REC.TXDATE, 'DD/MM/RRRR');
      --44   N   PARVALUE
      L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
      L_TXMSG.TXFIELDS('44').TYPE := 'N';
      L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

      --53   N   MICD
      L_TXMSG.TXFIELDS('53').DEFNAME := 'MICD';
      L_TXMSG.TXFIELDS('53').TYPE := 'C';
      L_TXMSG.TXFIELDS('53').VALUE := '';

      --60   N   ISMORTAGE
      L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
      L_TXMSG.TXFIELDS('60').TYPE := 'N';
      L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                        WHEN REC.EXECTYPE = 'MS' THEN
                                         1
                                        ELSE
                                         0
                                      END);
      BEGIN
        IF TXPKS_#8866.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 8866: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveMoneyId');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on receive money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_ODSettlementReceiveMoneyId');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_ODSETTLEMENTRECEIVEMONEYID;

-- HSX04: Tra phi ODPAIDSF_EOD lenh lenh ban net trong ngay
PROCEDURE PR_TRANSFERSELLFEEID(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_STRORGORDERID VARCHAR2(100);
    V_BLNVIETNAMESE BOOLEAN;
    V_DBLPROFIT     NUMBER(20, 0);
    V_DBLLOSS       NUMBER(20, 0);
    V_DBLAVLRCVAMT  NUMBER(20, 0);
    V_DBLVATRATE    NUMBER(20, 0);
    V_DBLAVLFEEAMT  NUMBER(20, 0);
    V_DBLFEETEMP    NUMBER(20, 0);
    V_DBLFEEAMT     NUMBER(20, 0);
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_RcvCash_Buyin VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_TransferSellFee');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM STSCHD;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;
    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '8856';
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';

    SELECT NVL(VARVALUE, 'Y')
      INTO L_RCVCASH_BUYIN
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'RCVCASHTIME_BUYIN_CN';


    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '8856';
    V_STRORGORDERID   := 'orderid';
    V_DBLAVLFEEAMT    := 0;
    V_DBLPROFIT       := 0;
    V_DBLLOSS         := 0;
    FOR REC IN (SELECT SUBSTR(CUSTODYCD, 4, 1) CUSTODYCD, MST.AFACCTNO, MST.ORGORDERID,
               CASE WHEN CI.COREBANK = 'Y' THEN 1 ELSE 0 END COREBANK, ODMST.EXECTYPE,
               case when  nvl(odmst.isbuyin,'N') ='Y' then ODMST.FEEACR - ODMST.FEEAMT  else DECODE(ODMST.NETEXECAMT + ODMST.CFNETEXECAMT, ODMST.EXECAMT, ODMST.FEEACR, CEIL((ODMST.NETEXECAMT + ODMST.CFNETEXECAMT)*ODMST.FEEACR/ODMST.EXECAMT)) - ODMST.FEEAMT  end AVLFEEAMT,
               MST.AMT, TYP.VATRATE, MST.AUTOID,
               MST.ACCTNO, SEC.CODEID, SEC.SYMBOL, MST.QTTY, COSTPRICE, SEC.PARVALUE,
               UTF8NUMS.C_CONST_TLTX_TXDESC_8856 || ' ' || ODMST.EXECQTTY || ' ' ||
               SEC.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' ||
               TO_CHAR(ODMST.TXDATE, SYSTEMNUMS.C_DATE_FORMAT) TXDESC
           FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                ODMAST ODMST, AFMAST AF, CFMAST CF, CIMAST CI, ODTYPE TYP, SBSECURITIES SEC
           WHERE ODMST.AFACCTNO = AF.ACCTNO
             AND AF.CUSTID = CF.CUSTID
             AND AF.ACCTNO = CI.AFACCTNO
             AND CF.CUSTATCOM = 'Y'
             AND ODMST.ACTYPE = TYP.ACTYPE
             AND MST.ORGORDERID = ODMST.ORDERID
             AND MST.CODEID = SEC.CODEID
             AND SEC.TRADEPLACE <> '003'
             AND MST.TXDATE = TO_DATE(V_STRCURRDATE,SYSTEMNUMS.C_DATE_FORMAT)
             AND MST.DELTD <> 'Y'
             AND (MST.DUETYPE = 'RM')
             AND ((DECODE(ODMST.NETEXECAMT + ODMST.CFNETEXECAMT, ODMST.EXECAMT, ODMST.FEEACR, CEIL((ODMST.NETEXECAMT + ODMST.CFNETEXECAMT)*ODMST.FEEACR/ODMST.EXECAMT)) > ODMST.FEEAMT
                 AND ODMST.NETEXECAMT + ODMST.CFNETEXECAMT > 0)
                  OR ( nvl(odmst.isbuyin,'N') ='Y'  and L_RcvCash_Buyin ='Y' and ODMST.FEEACR > ODMST.FEEAMT )
                  )
           ORDER BY ORGORDERID) LOOP
      --Set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);
      --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
      IF REC.CUSTODYCD = 'F' THEN
        V_BLNVIETNAMESE := FALSE;
      ELSE
        V_BLNVIETNAMESE := TRUE;
      END IF;
      IF V_STRORGORDERID <> REC.ORGORDERID THEN
        V_STRORGORDERID := REC.ORGORDERID;
        V_DBLAVLFEEAMT  := REC.AVLFEEAMT;
      END IF;
      V_DBLAVLRCVAMT := REC.AMT;
      V_DBLVATRATE   := REC.VATRATE;
      IF V_DBLAVLFEEAMT <= V_DBLAVLRCVAMT THEN
        V_DBLFEETEMP := V_DBLAVLFEEAMT;
      ELSE
        V_DBLFEETEMP := V_DBLAVLRCVAMT;
      END IF;
      IF V_DBLFEETEMP > 0 THEN
        --Set cac field giao dich

        --01   N   AUTOID
        L_TXMSG.TXFIELDS('01').DEFNAME := 'AUTOID';
        L_TXMSG.TXFIELDS('01').TYPE := 'N';
        L_TXMSG.TXFIELDS('01').VALUE := REC.AUTOID;

        --03   C   ORGORDERID
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ORGORDERID';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ORGORDERID;
        --04   C   AFACCTNO
        L_TXMSG.TXFIELDS('04').DEFNAME := 'AFACCTNO';
        L_TXMSG.TXFIELDS('04').TYPE := 'C';
        L_TXMSG.TXFIELDS('04').VALUE := REC.AFACCTNO;
        --05   C   CIACCTNO
        L_TXMSG.TXFIELDS('05').DEFNAME := 'CIACCTNO';
        L_TXMSG.TXFIELDS('05').TYPE := 'C';
        L_TXMSG.TXFIELDS('05').VALUE := REC.ACCTNO;
        --06   C   SEACCTNO
        L_TXMSG.TXFIELDS('06').DEFNAME := 'SEACCTNO';
        L_TXMSG.TXFIELDS('06').TYPE := 'C';
        L_TXMSG.TXFIELDS('06').VALUE := REC.AFACCTNO || REC.CODEID;
        --07   C   SYMBOL
        L_TXMSG.TXFIELDS('07').DEFNAME := 'SYMBOL';
        L_TXMSG.TXFIELDS('07').TYPE := 'C';
        L_TXMSG.TXFIELDS('07').VALUE := REC.SYMBOL;
        --08   N   AMT
        L_TXMSG.TXFIELDS('08').DEFNAME := 'AMT';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := 0;
        --09   N   QTTY
        L_TXMSG.TXFIELDS('09').DEFNAME := 'QTTY';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := REC.QTTY;
        --10   N   RAMT
        L_TXMSG.TXFIELDS('10').DEFNAME := 'RAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := 0;
        --11   N   AAMT
        L_TXMSG.TXFIELDS('11').DEFNAME := 'AAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := 0;
        --12   N   FEEAMT
        L_TXMSG.TXFIELDS('12').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        IF V_DBLAVLFEEAMT <= V_DBLAVLRCVAMT THEN
          V_DBLFEEAMT    := V_DBLAVLFEEAMT;
          V_DBLAVLFEEAMT := 0;
        ELSE
          V_DBLFEEAMT    := V_DBLAVLRCVAMT;
          V_DBLAVLFEEAMT := V_DBLAVLFEEAMT - V_DBLAVLRCVAMT;
        END IF;
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(V_DBLFEEAMT, 0);

        --13   N   VAT
        L_TXMSG.TXFIELDS('13').DEFNAME := 'VAT';
        L_TXMSG.TXFIELDS('13').TYPE := 'N';
        L_TXMSG.TXFIELDS('13').VALUE := ROUND(V_DBLVATRATE * V_DBLFEEAMT, 0);
        --14   N   PROFITAMT
        L_TXMSG.TXFIELDS('14').DEFNAME := 'PROFITAMT';
        L_TXMSG.TXFIELDS('14').TYPE := 'N';
        L_TXMSG.TXFIELDS('14').VALUE := V_DBLPROFIT;
        --15   N   LOSSAMT
        L_TXMSG.TXFIELDS('15').DEFNAME := 'LOSSAMT';
        L_TXMSG.TXFIELDS('15').TYPE := 'N';
        L_TXMSG.TXFIELDS('15').VALUE := V_DBLLOSS;
        --16   N   COSTPRICE
        L_TXMSG.TXFIELDS('16').DEFNAME := 'COSTPRICE';
        L_TXMSG.TXFIELDS('16').TYPE := 'N';
        L_TXMSG.TXFIELDS('16').VALUE := REC.COSTPRICE;
        --30   C   DESC
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := REC.TXDESC;
        --44   N   PARVALUE
        L_TXMSG.TXFIELDS('44').DEFNAME := 'PARVALUE';
        L_TXMSG.TXFIELDS('44').TYPE := 'N';
        L_TXMSG.TXFIELDS('44').VALUE := REC.PARVALUE;

        --53   N   MICD
        L_TXMSG.TXFIELDS('53').DEFNAME := 'MICD';
        L_TXMSG.TXFIELDS('53').TYPE := 'C';
        L_TXMSG.TXFIELDS('53').VALUE := '';

        --60   N   ISMORTAGE
        L_TXMSG.TXFIELDS('60').DEFNAME := 'ISMORTAGE';
        L_TXMSG.TXFIELDS('60').TYPE := 'N';
        L_TXMSG.TXFIELDS('60').VALUE := (CASE
                                          WHEN REC.EXECTYPE = 'MS' THEN
                                           1
                                          ELSE
                                           0
                                        END);

        --31   N   COREBANK
        L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;

        BEGIN
          IF TXPKS_#8856.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 8856: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_TransferSellFeeId');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on transfer sell money');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_TransferSellFeeId');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_TRANSFERSELLFEEID;

  PROCEDURE pr_ODDayReleaseAdvancedExcess(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
    l_txmsg tx.msg_rectype;
    l_err_param varchar2(300);
    v_dtCURRDATE DATE;
    v_strDesc varchar2(1000);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODDayReleaseAdvancedExcess');
    p_lastRun:='Y';

    SELECT to_date(varvalue,systemnums.c_date_format)INTO v_dtCURRDATE
    FROM sysvar WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    SELECT SYS_CONTEXT ('USERENV', 'HOST'), SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
    INTO l_txmsg.wsname, l_txmsg.ipaddress FROM DUAL;

    SELECT TXDESC INTO v_strDesc FROM  TLTX WHERE TLTXCD='8851';

    l_txmsg.msgtype     :='T';
    l_txmsg.local       :='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate      := v_dtCURRDATE;
    l_txmsg.busdate     := v_dtCURRDATE;
    l_txmsg.tltxcd      := '8851';

    FOR I IN (
        SELECT MST.AFACCTNO, MST.CLEARDATE, MST.TXDATE, MST.AAMT, MST.PAIDAMT, MST.NETEXECAMT,
               DECODE(CF.VAT, 'Y', MST.TAXSELLAMT + MST.RIGHTVAT, 0) + MST.FEEACR EXFEEAMT
        FROM (
           SELECT STS.AFACCTNO, STS.CLEARDATE, STS.TXDATE, SUM(STS.AAMT) AAMT,
                  SUM(STS.PAIDAMT) PAIDAMT, SUM(MST.FEEACR - MST.FEEAMT) FEEACR,
                  SUM(MST.TAXSELLAMT) TAXSELLAMT, SUM(STS.ARIGHT) RIGHTVAT,
                  SUM(STS.AMT - MST.NETEXECAMT - MST.CFNETEXECAMT) NETEXECAMT
           FROM STSCHD STS, ODMAST MST
           WHERE STS.ORGORDERID = MST.ORDERID AND STS.DELTD <> 'Y'
             AND STS.TXDATE = v_dtCURRDATE AND STS.DUETYPE = 'RM'
             AND MST.GRPORDER <> 'Y' AND MST.ERROD = 'N'
           GROUP BY STS.AFACCTNO, STS.CLEARDATE, STS.TXDATE
        ) MST, CFMAST CF, AFMAST AF, AFTYPE AFT
        WHERE MST.AFACCTNO =  AF.ACCTNO AND AF.ACTYPE = AFT.ACTYPE AND CF.CUSTID=AF.CUSTID
          AND AAMT - PAIDAMT > NETEXECAMT - DECODE(CF.VAT, 'Y', MST.TAXSELLAMT + MST.RIGHTVAT, 0) - MST.FEEACR
    ) LOOP
        FOR REC IN
        (   SELECT MST.AUTOID, MST.ACCTNO, MST.ISMORTAGE, MST.RRTYPE, MST.CIACCTNO, MST.CUSTBANK,
                   DECODE(MST.AAMT,0,MST.AMT,MST.AMT-MST.AAMT+LEAST(GREATEST(MST.AAMT*(MST.CLEARDT-MST.TXDATE)*AD.AINTRATE/360/100,AD.AMINFEE),AD.AMAXFEE)) AMT,
                   DECODE(MST.AAMT,0,MST.FEEAMT,MST.FEEAMT-LEAST(GREATEST(MST.AAMT*(MST.CLEARDT-MST.TXDATE)*AD.AINTRATE/360/100,AD.AMINFEE),AD.AMAXFEE)) OVERFEEAMT,
                   DECODE(MST.RRTYPE, 'O', 1,0) CIDRAWNDOWN,
                   DECODE(MST.RRTYPE, 'B', 1,0) BANKDRAWNDOWN,
                   DECODE(MST.RRTYPE, 'C', 1,0) CMPDRAWNDOWN,
                   UTF8NUMS.C_CONST_DESC_8851 ||', ' || UTF8NUMS.C_CONST_DESC_8851_ODDATE || ' ' || MST.TXDATE  || ', ' || UTF8NUMS.C_CONST_DESC_8851_TXDATE ||' ' || MST.ODDATE TXDESC
            FROM
            (   SELECT LEAST(AD.AMT+AD.FEEAMT, GREATEST(I.NETEXECAMT-I.EXFEEAMT-AD.TOTALCURAMT+AD.AMT+AD.FEEAMT,0)) AAMT,
                       AD.*
                FROM ADSCHD AD
                WHERE AD.ACCTNO = I.AFACCTNO AND AD.CLEARDT = I.CLEARDATE AND ad.oddate = i.txdate
                AND AD.TOTALCURAMT > I.NETEXECAMT - I.EXFEEAMT
                AND AD.STATUS = 'N' AND AD.DELTD <> 'Y'
            ) MST, AFMAST AF, VW_AF_ADTYPE_INFO AD
            WHERE MST.ACCTNO = AF.ACCTNO
              AND MST.ADTYPE = AD.VALUE AND AF.ACTYPE = AD.FILTERCD
        )
        LOOP
            --Set txnum
            plog.debug(pkgctx, 'Loop for autoid:' || rec.AUTOID);
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich

            --09   STAUTOID     N
            l_txmsg.txfields ('09').defname   := 'STAUTOID';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := rec.AUTOID;

            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            --10   PAIDAMT      N
            l_txmsg.txfields ('10').defname   := 'PAIDAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
            --11   PAIDFEEAMT   N
            l_txmsg.txfields ('11').defname   := 'PAIDFEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := 0;
            --12   N   FEEAMT
            l_txmsg.txfields ('12').defname   := 'OVERFEEAMT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := round(rec.OVERFEEAMT,0);

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE := rec.txdesc ;

            --60   N   ISMORTAGE
            l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
            l_txmsg.txfields ('60').TYPE      := 'N';
            l_txmsg.txfields ('60').VALUE     := rec.ISMORTAGE;


            --44   C   RRTYPE
            l_txmsg.txfields ('44').defname   := 'RRTYPE';
            l_txmsg.txfields ('44').TYPE      := 'C';
            l_txmsg.txfields ('44').VALUE     := rec.RRTYPE;

            --04   C   CIACCTNO
            l_txmsg.txfields ('04').defname   := 'CIACCTNO';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.CIACCTNO;

            --05   C   CUSTBANK
            l_txmsg.txfields ('05').defname   := 'CUSTBANK';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.CUSTBANK;

            --94   N   ISCOREBANK
            l_txmsg.txfields ('94').defname   := 'ISMORTAGE';
            l_txmsg.txfields ('94').TYPE      := 'N';
            l_txmsg.txfields ('94').VALUE     := '0';

            --96   C   CIDRAWNDOWN
            l_txmsg.txfields ('96').defname   := 'CIDRAWNDOWN';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.CIDRAWNDOWN;

            --97   C   BANKDRAWNDOWN
            l_txmsg.txfields ('97').defname   := 'BANKDRAWNDOWN';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := rec.BANKDRAWNDOWN;

            --98   C   CMPDRAWNDOWN
            l_txmsg.txfields ('98').defname   := 'CMPDRAWNDOWN';
            l_txmsg.txfields ('98').TYPE      := 'C';
            l_txmsg.txfields ('98').VALUE     := rec.CMPDRAWNDOWN;

            --99   C   ALLORONE         hoan ung 1 lenh hoac all
            l_txmsg.txfields ('99').defname   := 'ALLORONE';
            l_txmsg.txfields ('99').TYPE      := 'C';
            l_txmsg.txfields ('99').VALUE     := 'ALL';

            BEGIN
                IF txpks_#8851.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.debug (pkgctx,
                               'got error 8851: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        END LOOP;
    END LOOP;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODDayReleaseAdvancedExcess');
  EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODDayReleaseAdvancedExcess');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODDayReleaseAdvancedExcess;

  PROCEDURE pr_rmSFEETRFInday(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFEETRFInday');
    l_tltx:='6666';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
    SELECT varvalue INTO l_CURRDATE FROM sysvar WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_begindate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT OD.TXNUM,OD.TXDATE,OD.CLEARDATE DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,OD.AMOUNT
        FROM (
             SELECT OD.*, STS.TXDATE CLEARDATE, CEIL((OD.NETEXECAMT+OD.CFNETEXECAMT)*OD.FEEACR/OD.EXECAMT) AMOUNT
             FROM STSCHD STS, ODMAST OD
             WHERE OD.ORDERID = STS.ORGORDERID
                AND STS.TXDATE = TO_DATE(L_BEGINDATE,'DD/MM/RRRR') AND STS.DUETYPE ='RM' AND STS.DELTD <> 'Y'
                AND OD.EXECAMT > 0
                AND CEIL((OD.NETEXECAMT+OD.CFNETEXECAMT)*OD.FEEACR/OD.EXECAMT) > 0
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSFEE'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSFEE' AND REQ.OBJNAME=L_TLTX
            AND (
                 REQ.TXDATE=TO_DATE(L_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(L_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
            AND REQ.TXDATE = OD.CLEARDATE
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6666 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999'))
                                        || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');

        BEGIN
            IF txpks_#6666.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 6666: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFEETRFInday');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFEETRFInday');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFEETRFInday;
  PROCEDURE PR_RMSFEETRFID(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);

  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PR_RMSFEETRFID');
    L_TLTX := '6666';

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT OD.CLEARDATE DUEDATE,
                       CRA.TRFCODE TRFTYPE,
                       OD.AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AF.BANKACCTNO,
                       CRB.BANKCODE,
                       CRB.BANKCODE || ':' || CRB.BANKNAME BANKNAME,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CEIL(OD.FEEACR) AMOUNT
                  FROM (SELECT TO_CHAR(STS.CLEARDATE, 'DD/MM/RRRR') CLEARDATE,
                               OD.AFACCTNO,
                               SUM((OD.NETEXECAMT+OD.CFNETEXECAMT)*OD.FEEACR/OD.EXECAMT) FEEACR
                          FROM STSCHD STS, ODMAST OD
                         WHERE OD.ORDERID = STS.ORGORDERID
                           AND STS.TXDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR')
                           AND STS.DUETYPE = 'RM'
                           AND STS.DELTD <> 'Y'
                           AND OD.EXECAMT > 0
                            AND (OD.NETEXECAMT+OD.CFNETEXECAMT)*OD.FEEACR/OD.EXECAMT > 0
                         GROUP BY STS.CLEARDATE, OD.AFACCTNO) OD,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFODSFEE'
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND CI.COREBANK = 'Y'
                   AND OD.FEEACR > 0
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFODSFEE'
                           AND REQ.OBJNAME = L_TLTX
                           /*AND (REQ.TXDATE =
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                               (REQ.STATUS NOT IN ('E') AND
                               REQ.TXDATE <
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))*/
                           AND REQ.TXDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR')
                           AND REQ.REFCODE = OD.CLEARDATE || OD.AFACCTNO)) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for account : ' || REC.AFACCTNO);
      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --08   C   DUEDATE
      L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := TO_DATE(REC.DUEDATE,
                                              SYSTEMNUMS.C_DATE_FORMAT);

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --04  ORDERID
      L_TXMSG.TXFIELDS('04').DEFNAME := 'ORDERID';
      L_TXMSG.TXFIELDS('04').TYPE := 'C';
      L_TXMSG.TXFIELDS('04').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --11  TXNUM
      L_TXMSG.TXFIELDS('11').DEFNAME := 'TXNUM';
      L_TXMSG.TXFIELDS('11').TYPE := 'C';
      L_TXMSG.TXFIELDS('11').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6666 ||
                                      REC.CUSTODYCD ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                      REC.DUEDATE;

      BEGIN
        IF TXPKS_#6666.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6666: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_RMSFEETRFID');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_rmSFEETRFID');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSFEETRFID;
-- HSX04: Tra thue lenh ban net trong ngay
  PROCEDURE PR_CFPAIDSELLVATID(P_BCHMDL   VARCHAR,
                               P_ERR_CODE OUT VARCHAR2,
                               P_FROMROW  NUMBER,
                               P_TOROW    NUMBER,
                               P_LASTRUN  OUT VARCHAR2) IS
    L_TXMSG         TX.MSG_RECTYPE;
    V_STRCURRDATE   VARCHAR2(20);
    V_STRPREVDATE   VARCHAR2(20);
    V_STRNEXTDATE   VARCHAR2(20);
    V_STRDESC       VARCHAR2(1000);
    V_STREN_DESC    VARCHAR2(1000);
    V_BLNVIETNAMESE BOOLEAN;
    L_ERR_PARAM     VARCHAR2(300);
    L_MAXROW        NUMBER(20, 0);
    L_VATRATE       NUMBER(20, 6);
    L_RIGHTRATE     NUMBER(20, 6);
    V_DELTA         NUMBER(20, 6);
    L_RULETYPE      VARCHAR2(10);
    l_CHGBCHORDERSTARTDATE DATE ;
    L_RcvCash_Buyin VARCHAR2(10);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_CFPaidSellVATId');
    SELECT COUNT(*) MAXROW INTO L_MAXROW FROM AFMAST;
    IF L_MAXROW > P_TOROW THEN
      P_LASTRUN := 'N';
    ELSE
      P_LASTRUN := 'Y';
    END IF;

    SELECT TXDESC, EN_TXDESC
      INTO V_STRDESC, V_STREN_DESC
      FROM TLTX
     WHERE TLTXCD = '0066';
    SELECT VARVALUE
      INTO V_STRCURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    SELECT VARVALUE
      INTO V_STRPREVDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'PREVDATE';

    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := '0066';
    PLOG.DEBUG(PKGCTX, 'Begin loop');
    --Default thu thue la 0.1%
    BEGIN
      L_VATRATE := TO_NUMBER(CSPKS_SYSTEM.FN_GET_SYSVAR('SYSTEM',
                                                        'ADVSELLDUTY'));
    EXCEPTION
      WHEN OTHERS THEN
        L_VATRATE := 0.1;
    END;


    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
      from sysvar
     where grname like 'SYSTEM' and varname='CHGBCHORDERSTARTDATE';
    --- Lay ti le thue TNCN
    SELECT VARVALUE
      INTO L_RIGHTRATE
      FROM SYSVAR
     WHERE VARNAME = 'ADVVATDUTY'
       AND GRNAME = 'SYSTEM';

    --HSX04
    SELECT NVL(VARVALUE, 'Y')
      INTO L_RCVCASH_BUYIN
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'RCVCASHTIME_BUYIN_CN';
    V_DELTA := 0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    FOR REC IN (SELECT MST.ACCTNO,
                       CASE
                         WHEN CI.COREBANK = 'Y' THEN
                          1
                         ELSE
                          0
                       END COREBANK,
                       MST.ACTYPE,
                       CF.VAT,
                       SUM(OD.NETEXECAMT + OD.CFNETEXECAMT) SELLAMT,
                       SUM(CASE WHEN od.isbuyin = 'Y'THEN OD.TAXSELLAMT ELSE  DECODE(OD.NETEXECAMT + OD.CFNETEXECAMT, OD.EXECAMT, OD.TAXSELLAMT, CEIL((OD.NETEXECAMT + OD.CFNETEXECAMT)* OD.TAXSELLAMT/OD.EXECAMT)) END ) TAXSELLAMT,
                       SUM(CASE WHEN od.isbuyin = 'Y'THEN ST.ARIGHT ELSE DECODE(OD.NETEXECAMT + OD.CFNETEXECAMT, OD.EXECAMT, ST.ARIGHT, CEIL((OD.NETEXECAMT + OD.CFNETEXECAMT)*ST.ARIGHT/OD.EXECAMT))END ) SELLRIGHTAMT,
                       MAX( CASE WHEN  cf.whtax='Y' THEN  REPLACE ( V_STRDESC,'TNCN','') ELSE V_STRDESC  END  || ' ' ||
                           TO_CHAR(ST.TXDATE, 'DD/MM/RRRR')) TRDESC
                  FROM (SELECT *
                          FROM (SELECT A.*, ROWNUM ID FROM AFMAST A)
                         WHERE ID BETWEEN P_FROMROW AND P_TOROW) MST,
                       AFTYPE TYP,
                       STSCHD ST,
                       SBSECURITIES SB,
                       ODMAST OD,
                       CIMAST CI,
                       CFMAST CF
                 WHERE MST.ACTYPE = TYP.ACTYPE
                   AND MST.ACCTNO = ST.ACCTNO
                   AND ST.ORGORDERID = OD.ORDERID
                   AND ST.CODEID = SB.CODEID
                   AND MST.ACCTNO = CI.AFACCTNO
                   AND ST.DUETYPE = 'RM'
                   AND ST.TXDATE = TO_DATE(V_STRCURRDATE, SYSTEMNUMS.C_DATE_FORMAT)
                   AND MST.STATUS <> 'C'
                   AND  (CF.VAT = 'Y' OR cf.whtax='Y')
                   AND ST.DELTD = 'N'
                   AND CF.CUSTID = MST.CUSTID
                   AND CF.CUSTATCOM = 'Y'
                   AND sb.sectype not in ('003','006')
                   --T2 NAMNT
                   AND od.txdate >= l_CHGBCHORDERSTARTDATE
                   --End T2 NAMNT
                   AND (OD.NETEXECAMT + OD.CFNETEXECAMT >0 OR (nvl(OD.isbuyin,'N') ='Y' AND L_RcvCash_Buyin ='Y'))
                  GROUP BY MST.ACCTNO, MST.ACTYPE, CF.VAT, CI.COREBANK
                 ORDER BY MST.ACCTNO) LOOP
      IF REC.TAXSELLAMT > 0 OR REC.SELLRIGHTAMT > 0 THEN
        --Set txnum
        PLOG.DEBUG(PKGCTX,
                   'Loop for account:' || REC.ACCTNO || ' ngay' ||
                   V_STRCURRDATE);
        SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
               LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO L_TXMSG.TXNUM
          FROM DUAL;
        L_TXMSG.BRID := SUBSTR(REC.ACCTNO, 1, 4);

        --Set cac field giao dich
        --03  ACCTNO      C
        L_TXMSG.TXFIELDS('03').DEFNAME := 'ACCTNO';
        L_TXMSG.TXFIELDS('03').TYPE := 'C';
        L_TXMSG.TXFIELDS('03').VALUE := REC.ACCTNO;
        --07  PERCENT     N
        L_TXMSG.TXFIELDS('07').DEFNAME := 'PERCENT';
        L_TXMSG.TXFIELDS('07').TYPE := 'N';
        L_TXMSG.TXFIELDS('07').VALUE := 100;
        --08  ICCFBAL     N
        L_TXMSG.TXFIELDS('08').DEFNAME := 'ICCFBAL';
        L_TXMSG.TXFIELDS('08').TYPE := 'N';
        L_TXMSG.TXFIELDS('08').VALUE := ROUND(REC.SELLAMT, 0);
        --09  ICCFRATE    N
        L_TXMSG.TXFIELDS('09').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('09').TYPE := 'N';
        L_TXMSG.TXFIELDS('09').VALUE := L_VATRATE;
        --10  INTAMT      N
        L_TXMSG.TXFIELDS('10').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('10').TYPE := 'N';
        L_TXMSG.TXFIELDS('10').VALUE := REC.TAXSELLAMT;
        --11  RIGHTRATE    N
        L_TXMSG.TXFIELDS('11').DEFNAME := 'FEEAMT';
        L_TXMSG.TXFIELDS('11').TYPE := 'N';
        L_TXMSG.TXFIELDS('11').VALUE := L_RIGHTRATE;
        --12  INTRIGHTAMT      N
        L_TXMSG.TXFIELDS('12').DEFNAME := 'INTAMT';
        L_TXMSG.TXFIELDS('12').TYPE := 'N';
        L_TXMSG.TXFIELDS('12').VALUE := ROUND(REC.SELLRIGHTAMT, 0);
        --30    DESC        C
        L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
        L_TXMSG.TXFIELDS('30').TYPE := 'C';
        L_TXMSG.TXFIELDS('30').VALUE := REC.TRDESC;
        --31    COREBANK        N
        L_TXMSG.TXFIELDS('31').DEFNAME := 'COREBANK';
        L_TXMSG.TXFIELDS('31').TYPE := 'N';
        L_TXMSG.TXFIELDS('31').VALUE := REC.COREBANK;
        BEGIN
          IF TXPKS_#0066.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
             SYSTEMNUMS.C_SUCCESS THEN
            PLOG.DEBUG(PKGCTX, 'got error 0066: ' || P_ERR_CODE);
            ROLLBACK;
            RETURN;
          END IF;
        END;
      END IF;
    END LOOP;
    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'pr_CFPaidSellVATId');
  EXCEPTION
    WHEN OTHERS THEN
      PLOG.DEBUG(PKGCTX, 'got error on release pr_CFPaidSellVATId');
      ROLLBACK;
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'pr_CFPaidSellVATId');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_CFPAIDSELLVATID;
PROCEDURE pr_rmSFDTRFID(P_BCHMDL VARCHAR, P_ERR_CODE OUT VARCHAR2) IS

    L_TXMSG      TX.MSG_RECTYPE;
    L_CURRDATE   VARCHAR2(20);
    L_DESC       VARCHAR2(1000);
    L_EN_DESC    VARCHAR2(1000);
    L_ORGDESC    VARCHAR2(1000);
    L_EN_ORGDESC VARCHAR2(1000);
    L_ERR_PARAM  VARCHAR2(300);
    L_TLTX       VARCHAR2(4);
    L_BEGINDATE  VARCHAR2(10);
    L_ORGTXNUM   VARCHAR2(100);
    L_ORGDATE    VARCHAR2(10);
    L_ORGREQID   NUMBER(20, 0);
  BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'pr_rmSFDTRFID');
    L_TLTX := '6682';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC, EN_TXDESC
      INTO L_ORGDESC, L_EN_ORGDESC
      FROM TLTX
     WHERE TLTXCD = L_TLTX;
    SELECT TO_DATE(VARVALUE, SYSTEMNUMS.C_DATE_FORMAT)
      INTO L_CURRDATE
      FROM SYSVAR
     WHERE GRNAME = 'SYSTEM'
       AND VARNAME = 'CURRDATE';
    L_BEGINDATE     := L_CURRDATE;
    L_TXMSG.MSGTYPE := 'T';
    L_TXMSG.LOCAL   := 'N';
    L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
    PLOG.DEBUG(PKGCTX, 'l_txmsg.tlid' || L_TXMSG.TLID);
    SELECT SYS_CONTEXT('USERENV', 'HOST'),
           SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
      INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
      FROM DUAL;
    L_TXMSG.OFF_LINE  := 'N';
    L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
    L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
    L_TXMSG.MSGSTS    := '0';
    L_TXMSG.OVRSTS    := '0';
    L_TXMSG.BATCHNAME := P_BCHMDL;
    L_TXMSG.TXDATE    := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.BUSDATE   := TO_DATE(L_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT);
    L_TXMSG.TLTXCD    := L_TLTX;

    PLOG.DEBUG(PKGCTX, 'Begin loop');

    FOR REC IN (SELECT '0' DTTYPE,
                       OD.CLEARDATE DUEDATE,
                       CRA.TRFCODE TRFTYPE,
                       OD.AFACCTNO,
                       CF.CUSTODYCD,
                       CF.FULLNAME,
                       CF.ADDRESS,
                       CF.IDCODE LICENSE,
                       AF.BANKACCTNO,
                       CRB.BANKCODE,
                       CRB.BANKCODE || ':' || CRB.BANKNAME BANKNAME,
                       CRA.REFACCTNO DESACCTNO,
                       CRA.REFACCTNAME DESACCTNAME,
                       CEIL(OD.TAXSELLAMT) AMOUNT
                  FROM (SELECT OD.AFACCTNO,
                               TO_CHAR(STS.CLEARDATE, 'DD/MM/RRRR') CLEARDATE,
                               SUM( CEIL((OD.NETEXECAMT + OD.CFNETEXECAMT)* OD.TAXSELLAMT/OD.EXECAMT) + CEIL((OD.NETEXECAMT+OD.CFNETEXECAMT)*STS.ARIGHT/OD.EXECAMT)) TAXSELLAMT --HSX04: xuat phan con lai
                          FROM STSCHD STS, ODMAST OD
                         WHERE OD.ORDERID = STS.ORGORDERID
                           AND STS.TXDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR')
                           AND STS.DUETYPE = 'RM'
                           AND STS.DELTD <> 'Y'
                           AND OD.EXECAMT > 0
                           AND OD.TAXSELLAMT > 0 --HSX04
                           AND CEIL((OD.NETEXECAMT + OD.CFNETEXECAMT)* OD.TAXSELLAMT/OD.EXECAMT) + CEIL((OD.NETEXECAMT+OD.CFNETEXECAMT)*STS.ARIGHT/OD.EXECAMT) > 0 --HSX04: xuat phan con lai
                         GROUP BY OD.AFACCTNO, STS.CLEARDATE) OD,
                       AFMAST AF,
                       CFMAST CF,
                       CIMAST CI,
                       CRBDEFACCT CRA,
                       CRBDEFBANK CRB
                 WHERE OD.AFACCTNO = AF.ACCTNO
                   AND AF.CUSTID = CF.CUSTID
                   AND AF.BANKNAME = CRB.BANKCODE
                   AND AF.BANKNAME = CRA.REFBANK
                   AND CRA.TRFCODE = 'TRFODTAX'
                   AND AF.ACCTNO = CI.AFACCTNO
                   AND CI.COREBANK = 'Y'
                   AND NOT EXISTS
                 (SELECT REQ.REFCODE
                          FROM CRBTXREQ REQ
                         WHERE REQ.TRFCODE = 'TRFODTAX'
                           /*AND (REQ.TXDATE =
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR') OR
                               (REQ.STATUS IN ('P', 'A', 'S', 'C') AND
                               REQ.TXDATE <
                               TO_DATE(L_CURRDATE, 'DD/MM/RRRR')))*/
                           AND REQ.TXDATE = TO_DATE(L_BEGINDATE, 'DD/MM/RRRR') --HSX04
                           AND REQ.REFCODE = OD.CLEARDATE || OD.AFACCTNO)) LOOP
      -- rec
      PLOG.DEBUG(PKGCTX, 'Loop for order ID : ' || REC.AFACCTNO);

      --set txnum
      SELECT SYSTEMNUMS.C_BATCH_PREFIXED ||
             LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0')
        INTO L_TXMSG.TXNUM
        FROM DUAL;
      L_TXMSG.BRID := SUBSTR(REC.AFACCTNO, 1, 4);

      --Set cac field giao dich
      --06   C   TRFTYPE
      L_TXMSG.TXFIELDS('06').DEFNAME := 'TRFTYPE';
      L_TXMSG.TXFIELDS('06').TYPE := 'C';
      L_TXMSG.TXFIELDS('06').VALUE := REC.TRFTYPE;

      --08   C   DUEDATE
      L_TXMSG.TXFIELDS('08').DEFNAME := 'DUEDATE';
      L_TXMSG.TXFIELDS('08').TYPE := 'C';
      L_TXMSG.TXFIELDS('08').VALUE := TO_DATE(REC.DUEDATE,
                                              SYSTEMNUMS.C_DATE_FORMAT);

      --03  SECACCOUNT
      L_TXMSG.TXFIELDS('03').DEFNAME := 'SECACCOUNT';
      L_TXMSG.TXFIELDS('03').TYPE := 'C';
      L_TXMSG.TXFIELDS('03').VALUE := REC.AFACCTNO;

      --90  CUSTNAME
      L_TXMSG.TXFIELDS('90').DEFNAME := 'CUSTNAME';
      L_TXMSG.TXFIELDS('90').TYPE := 'C';
      L_TXMSG.TXFIELDS('90').VALUE := REC.FULLNAME;

      --91  ADDRESS
      L_TXMSG.TXFIELDS('91').DEFNAME := 'ADDRESS';
      L_TXMSG.TXFIELDS('91').TYPE := 'C';
      L_TXMSG.TXFIELDS('91').VALUE := REC.ADDRESS;

      --92  LICENSE
      L_TXMSG.TXFIELDS('92').DEFNAME := 'LICENSE';
      L_TXMSG.TXFIELDS('92').TYPE := 'C';
      L_TXMSG.TXFIELDS('92').VALUE := REC.LICENSE;

      --93  BANKACCTNO
      L_TXMSG.TXFIELDS('93').DEFNAME := 'BANKACCTNO';
      L_TXMSG.TXFIELDS('93').TYPE := 'C';
      L_TXMSG.TXFIELDS('93').VALUE := REC.BANKACCTNO;

      --05  DESACCTNO
      L_TXMSG.TXFIELDS('05').DEFNAME := 'DESACCTNO';
      L_TXMSG.TXFIELDS('05').TYPE := 'C';
      L_TXMSG.TXFIELDS('05').VALUE := REC.DESACCTNO;

      --07  DESACCTNAME
      L_TXMSG.TXFIELDS('07').DEFNAME := 'DESACCTNAME';
      L_TXMSG.TXFIELDS('07').TYPE := 'C';
      L_TXMSG.TXFIELDS('07').VALUE := REC.DESACCTNAME;

      --94  BANKNAME
      L_TXMSG.TXFIELDS('94').DEFNAME := 'BANKNAME';
      L_TXMSG.TXFIELDS('94').TYPE := 'C';
      L_TXMSG.TXFIELDS('94').VALUE := REC.BANKNAME;

      --95  BANKQUE
      L_TXMSG.TXFIELDS('95').DEFNAME := 'BANKQUE';
      L_TXMSG.TXFIELDS('95').TYPE := 'C';
      L_TXMSG.TXFIELDS('95').VALUE := REC.BANKCODE;

      --10  AMOUNT
      L_TXMSG.TXFIELDS('10').DEFNAME := 'AMOUNT';
      L_TXMSG.TXFIELDS('10').TYPE := 'N';
      L_TXMSG.TXFIELDS('10').VALUE := REC.AMOUNT;

      --31  TXNUM
      L_TXMSG.TXFIELDS('31').DEFNAME := 'ORGTXNUM';
      L_TXMSG.TXFIELDS('31').TYPE := 'C';
      L_TXMSG.TXFIELDS('31').VALUE := REC.DUEDATE || REC.AFACCTNO;

      --30   C   DESC
      L_TXMSG.TXFIELDS('30').DEFNAME := 'DESC';
      L_TXMSG.TXFIELDS('30').TYPE := 'C';
      L_TXMSG.TXFIELDS('30').VALUE := UTF8NUMS.C_CONST_TLTX_TXDESC_6682_DIV ||
                                      REC.CUSTODYCD ||
                                      UTF8NUMS.C_CONST_TLTX_TXDESC_6663_DATE ||
                                      REC.DUEDATE;

      BEGIN
        IF TXPKS_#6682.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <>
           SYSTEMNUMS.C_SUCCESS THEN
          PLOG.DEBUG(PKGCTX, 'got error 6682: ' || P_ERR_CODE);
          ROLLBACK;
          RETURN;
        END IF;
      END;
    END LOOP; -- rec

    P_ERR_CODE := 0;
    PLOG.SETENDSECTION(PKGCTX, 'PR_RMSFDTRFID');
  EXCEPTION
    WHEN OTHERS THEN
      P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
      PLOG.ERROR(PKGCTX, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      PLOG.ERROR(PKGCTX, SQLERRM);
      PLOG.SETENDSECTION(PKGCTX, 'PR_RMSFDTRFID');
      RAISE ERRNUMS.E_SYSTEM_ERROR;
  END PR_RMSFDTRFID;

BEGIN
  FOR I IN (SELECT * FROM TLOGDEBUG) LOOP
    LOGROW.LOGLEVEL  := I.LOGLEVEL;
    LOGROW.LOG4TABLE := I.LOG4TABLE;
    LOGROW.LOG4ALERT := I.LOG4ALERT;
    LOGROW.LOG4TRACE := I.LOG4TRACE;
  END LOOP;

  PKGCTX := PLOG.INIT('TXPKS_BATCH',
                      PLEVEL       => LOGROW.LOGLEVEL,
                      PLOGTABLE    => (LOGROW.LOG4TABLE = 'Y'),
                      PALERT       => (LOGROW.LOG4ALERT = 'Y'),
                      PTRACE       => (LOGROW.LOG4TRACE = 'Y'));
END TXPKS_BATCH;
/
